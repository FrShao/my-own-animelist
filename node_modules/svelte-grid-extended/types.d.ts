import type { RequireAtLeastOne } from './utils/types';
export declare type LayoutItem<T = unknown> = Size & Position & {
    id: string;
    min?: Size;
    max?: Size;
    movable?: boolean;
    resizable?: boolean;
} & (T extends undefined ? {
    data: T;
} : {
    data?: T;
});
export declare type Layout<T = unknown> = LayoutItem<T>[];
export declare type Size = {
    w: number;
    h: number;
};
export declare type Position = {
    x: number;
    y: number;
};
export declare type ItemPosition = {
    left: number;
    top: number;
};
export declare type ItemSize = {
    width: number;
    height: number;
};
export declare type ItemChangeEvent = {
    id: number;
    x: number;
    y: number;
    w: number;
    h: number;
};
export declare type BreakpointKey = 'xxl' | 'xl' | 'lg' | 'md' | 'sm' | 'xs';
export declare type Breakpoints = Record<BreakpointKey, number>;
export declare type GridSize = number | RequireAtLeastOne<Breakpoints>;
export declare type GridDimensions = {
    cols: number;
    rows: number;
};
export declare type GridParams = {
    itemSize: ItemSize;
    gap: number;
    maxCols: number;
    maxRows: number;
    bounds: boolean;
    items: LayoutItem[];
    readOnly: boolean;
};
