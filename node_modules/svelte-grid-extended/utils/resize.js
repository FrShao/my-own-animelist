export default function resize(node, options = {}) {
    const { min, max, resizerClass = '', bounds = false } = options;
    const bottomRight = document.createElement('div');
    bottomRight.classList.add(resizerClass);
    let width;
    let height;
    let initialRect;
    let initialPosition = { x: 0, y: 0 };
    let parentRect;
    let rect;
    node.appendChild(bottomRight);
    bottomRight.addEventListener('mousedown', onMouseDown);
    bottomRight.addEventListener('touchstart', onMouseDown);
    function onMouseDown(event) {
        event.stopPropagation();
        if (event instanceof MouseEvent && event.button !== 0)
            return;
        const { clientX, clientY } = event instanceof MouseEvent ? event : event.touches[0];
        initialPosition = { x: clientX, y: clientY };
        parentRect = node.parentElement?.getBoundingClientRect();
        rect = node.getBoundingClientRect();
        initialRect = {
            width: rect.width,
            height: rect.height
        };
        width = initialRect.width;
        height = initialRect.height;
        window.addEventListener('mousemove', onMove);
        window.addEventListener('mouseup', onMouseUp);
        window.addEventListener('touchmove', onMove);
        window.addEventListener('touchend', onMouseUp);
        node.dispatchEvent(new CustomEvent('resizestart', {
            detail: { width, height }
        }));
    }
    function onMouseUp(event) {
        event.stopPropagation();
        window.removeEventListener('mousemove', onMove);
        window.removeEventListener('mouseup', onMouseUp);
        window.removeEventListener('touchmove', onMove);
        window.removeEventListener('touchend', onMouseUp);
        node.dispatchEvent(new CustomEvent('resizeend', {
            detail: { width, height }
        }));
    }
    function onMove(event) {
        const { clientX, clientY } = event instanceof MouseEvent ? event : event.touches[0];
        width = initialRect.width + clientX - initialPosition.x;
        height = initialRect.height + clientY - initialPosition.y;
        if (bounds && parentRect) {
            if (width + rect.left > parentRect.width) {
                width = parentRect.width - rect.left;
            }
            if (height + rect.top > parentRect.height) {
                height = parentRect.height - rect.top;
            }
        }
        if (min) {
            width = Math.max(width, min.width);
            height = Math.max(height, min.height);
        }
        if (max) {
            width = Math.min(width, max.width);
            height = Math.min(height, max.height);
        }
        node.style.width = `${width}px`;
        node.style.height = `${height}px`;
        node.dispatchEvent(new CustomEvent('resizing', {
            detail: { width, height }
        }));
    }
    return {
        destroy() {
            window.removeEventListener('mousemove', onMove);
            window.removeEventListener('mouseup', onMouseUp);
            window.removeEventListener('touchmove', onMove);
            window.removeEventListener('touchend', onMouseUp);
            node.removeChild(bottomRight);
        }
    };
}
