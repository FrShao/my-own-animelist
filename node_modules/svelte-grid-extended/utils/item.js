export function coordinate2position(coordinate, cellSize, gap) {
    return coordinate * cellSize + (coordinate + 1) * gap;
}
export function coordinate2size(coordinate, cellSize, gap) {
    return coordinate * cellSize + (coordinate - 1) * gap;
}
export function position2coordinate(position, cellSize, gap) {
    return Math.round(position / (cellSize + gap));
}
export function size2coordinate(size, cellSize, gap) {
    return position2coordinate(size + gap * 2, cellSize, gap);
}
export function snapOnMove(left, top, item, gridParams) {
    const { itemSize, gap } = gridParams;
    const { w, h } = item;
    let x = position2coordinate(left, itemSize.width, gap);
    let y = position2coordinate(top, itemSize.height, gap);
    x = clamp(x, 0, gridParams.maxCols - w);
    y = clamp(y, 0, gridParams.maxRows - h);
    return { x, y };
}
export function snapOnResize(width, height, item, gridParams) {
    const { itemSize, gap } = gridParams;
    const { x, y } = item;
    let w = position2coordinate(width + gap * 2, itemSize.width, gap);
    let h = position2coordinate(height + gap * 2, itemSize.height, gap);
    w = clamp(w, 0, gridParams.maxCols - x);
    h = clamp(h, 0, gridParams.maxRows - y);
    return { w, h };
}
export function calcPosition(item, options) {
    const { itemSize, gap } = options;
    return {
        left: coordinate2position(item.x, itemSize.width, gap),
        top: coordinate2position(item.y, itemSize.height, gap),
        width: coordinate2size(item.w, itemSize.width, gap),
        height: coordinate2size(item.h, itemSize.height, gap)
    };
}
export function clamp(num, min, max) {
    return Math.max(Math.min(num, max), min);
}
