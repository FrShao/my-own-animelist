import { SvelteComponentTyped } from "svelte";
declare const __propDef: {
    props: {
        class?: string;
        increment?: () => void;
        decrement?: () => void;
        value?: number;
        defaultValue?: number;
        invalid?: boolean;
        decimalSeparator?: string;
        max?: number;
        min?: number;
        step?: number;
        stepHoldDelay?: number;
        stepHoldInterval?: number | ((step: number) => number);
        hideControls?: boolean;
        overrideControls?: import("../..").CSS;
        precision?: number;
        noClampOnBlur?: boolean;
        formatter?: import("./NumberInput.styles").Formatter;
        parser?: import("./NumberInput.styles").Parser;
        error?: string | boolean;
        size?: import("../..").SvelteUISize;
        element?: HTMLElement;
        icon?: HTMLOrSVGElement | typeof import("svelte").SvelteComponent;
        p?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        pt?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        pr?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        pb?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        pl?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        px?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        py?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        m?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        mt?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        mr?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        mb?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        ml?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        mx?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        my?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        radius?: import("../..").SvelteUINumberSize;
        variant?: import("..").InputVariant;
        className?: string;
        override?: import("../..").CSS;
        use?: import("../../internal/utils/forwarding/forward-actions").ActionArray;
        root?: typeof import("svelte").SvelteComponent | keyof HTMLElementTagNameMap;
        id?: string;
        disabled?: boolean;
        label?: string;
        iconProps?: {
            size: number;
            color: string;
        };
        wrapperProps?: Record<string, unknown>;
        description?: string;
        required?: boolean;
        labelProps?: Record<string, unknown>;
        descriptionProps?: Record<string, unknown>;
        errorProps?: Record<string, unknown>;
        labelElement?: "div" | "label";
        placeholder?: string;
        iconWidth?: number;
        showRightSection?: boolean;
        rightSectionWidth?: number;
        rightSectionProps?: Record<string, unknown>;
        multiline?: boolean;
        autocomplete?: string;
        overrideInput?: import("../..").CSS;
    };
    events: {
        change: CustomEvent<any>;
    } & {
        [evt: string]: CustomEvent<any>;
    };
    slots: {};
};
export declare type NumberInputProps = typeof __propDef.props;
export declare type NumberInputEvents = typeof __propDef.events;
export declare type NumberInputSlots = typeof __propDef.slots;
/**
 * **UNSTABLE**: new API, yet to be vetted.
 *
 * Number input component that allows inputting numbers and incremeting/decrementing them, as well as set steps, minimum and maximum
 * values and add custom parsers and formatters.
 *
 * @see https://svelteui.org/core/number-input
 * @example
 *    ```svelte
 *    <NumberInput defaultValue={2} />
 * <NumberInput max={10} min={0} step={0.5} precision={1} />
 * <NumberInput defaultValue={0} step={0.2} precision={2} decimalSeparator="," />
 * <NumberInput label='Your age' required defaultValue={0} />
 *    ```
 */
export default class NumberInput extends SvelteComponentTyped<NumberInputProps, NumberInputEvents, NumberInputSlots> {
    get increment(): () => void;
    get decrement(): () => void;
}
export {};
