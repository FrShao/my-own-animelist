import { SvelteComponentTyped } from "svelte";
declare const __propDef: {
    props: {
        class?: string;
        variant?: import("./Button.styles").ButtonVariant;
        color?: import("../..").SvelteUIColor;
        size?: import("../..").SvelteUINumberSize;
        radius?: number | import("../..").SvelteUINumberSize;
        gradient?: import("../..").SvelteUIGradient;
        loaderPosition?: "left" | "right";
        loaderProps?: import("./Button.styles").LoaderProps;
        href?: string;
        external?: boolean;
        disabled?: boolean;
        compact?: boolean;
        loading?: boolean;
        uppercase?: boolean;
        fullSize?: boolean;
        ripple?: boolean;
        className?: string;
        override?: import("../..").CSS;
        element?: HTMLButtonElement | HTMLAnchorElement;
        use?: import("../../internal/utils/forwarding/forward-actions").ActionArray;
        m?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        my?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        mx?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        mt?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        mb?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        ml?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        mr?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        p?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        py?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        px?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        pt?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        pb?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        pl?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        pr?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
    };
    events: {
        [evt: string]: CustomEvent<any>;
    };
    slots: {
        leftIcon: {};
        default: {};
        rightIcon: {};
    };
};
export declare type ButtonProps = typeof __propDef.props;
export declare type ButtonEvents = typeof __propDef.events;
export declare type ButtonSlots = typeof __propDef.slots;
/**
 * A user can perform an immediate action by pressing a button. It's frequently used to start an action, but it can also be used to link to other pages.
 *
 * @see https://svelteui.org/core/button
 * @example
 * ```tsx
 * <Button>Click</Button> // standard button
 * <Button variant='gradient' gradient={{from: 'blue', to: 'red', deg: 45}}>Click Me</Button> // gradient button
 * ```
 */
export default class Button extends SvelteComponentTyped<ButtonProps, ButtonEvents, ButtonSlots> {
}
export {};
