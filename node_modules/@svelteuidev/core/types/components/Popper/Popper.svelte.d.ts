import { SvelteComponentTyped } from "svelte";
declare const __propDef: {
    props: {
        class?: string;
        position?: "bottom" | "left" | "right" | "top";
        placement?: "center" | "end" | "start";
        gutter?: number;
        arrowSize?: number;
        arrowDistance?: number;
        arrowClassName?: string;
        withArrow?: boolean;
        zIndex?: number;
        transition?: import("./Popper.styles").Transition;
        transitionOptions?: import("../../internal").TransitionOptions;
        exitTransition?: import("./Popper.styles").Transition;
        exitTransitionOptions?: import("../../internal").TransitionOptions;
        mounted?: boolean;
        reference?: HTMLElement;
        withinPortal?: boolean;
        className?: string;
        override?: import("../..").CSS;
        element?: HTMLElement;
        use?: import("../../internal/utils/forwarding/forward-actions").ActionArray;
        m?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        my?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        mx?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        mt?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        mb?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        ml?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        mr?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        p?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        py?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        px?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        pt?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        pb?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        pl?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        pr?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
    };
    events: {
        [evt: string]: CustomEvent<any>;
    };
    slots: {
        default: {};
    };
};
export declare type PopperProps = typeof __propDef.props;
export declare type PopperEvents = typeof __propDef.events;
export declare type PopperSlots = typeof __propDef.slots;
/**
 * **UNSTABLE**: new API, yet to be vetted.
 *
 * Shows content that is positioned based on the reference element provided as well as the psitioning
 * and placement options.
 *
 * @see https://svelteui.org/core/overlay
 * @example
 *    ```svelte
 * <Button bind:element={ref} on:click={() => mounted = !mounted }>Click here</Button>
 * <Popper
 * 	reference={ref}
 * 	placement="center"
 * 	position="bottom"
 * 	{mounted}
 * 	withArrow={true}
 * 	override={{ '& .arrow': { backgroundColor: '$gray100' } }}
 * >
 * 	<Box css={{ backgroundColor: '$gray100', borderRadius: 5, padding: '30px' }}>
 * 		<Center css={{ width: 100 }}>
 * 			<Text>This is a very long text</Text>
 * 		</Center>
 * 	</Box>
 * </Popper>
 *    ```
 */
export default class Popper extends SvelteComponentTyped<PopperProps, PopperEvents, PopperSlots> {
}
export {};
