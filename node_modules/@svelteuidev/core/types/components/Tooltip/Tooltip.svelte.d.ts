import { SvelteComponentTyped } from "svelte";
import type { CSS } from '../../styles';
declare const __propDef: {
    props: {
        class?: string;
        label: any;
        opened?: boolean;
        openDelay?: number;
        closeDelay?: number;
        color?: import("../../styles").SvelteUIColor;
        radius?: import("../../styles").SvelteUINumberSize;
        disabled?: boolean;
        arrowSize?: number;
        width?: number | "auto";
        wrapLines?: boolean;
        allowPointerEvents?: boolean;
        tooltipRef?: any;
        tooltipId?: string;
        position?: "bottom" | "left" | "right" | "top";
        placement?: "center" | "end" | "start";
        gutter?: number;
        arrowDistance?: number;
        arrowClassName?: string;
        withArrow?: boolean;
        zIndex?: number;
        transition?: import("../Popper").Transition;
        transitionOptions?: import("../..").TransitionOptions;
        exitTransition?: import("../Popper").Transition;
        exitTransitionOptions?: import("../..").TransitionOptions;
        mounted?: boolean;
        reference?: HTMLElement;
        withinPortal?: boolean;
        className?: string;
        override?: CSS;
        element?: HTMLElement;
        use?: import("../../internal/utils/forwarding/forward-actions").ActionArray;
        m?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        my?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        mx?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        mt?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        mb?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        ml?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        mr?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        p?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        py?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        px?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        pt?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        pb?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        pl?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        pr?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
    };
    events: {
        mouseenter: CustomEvent<any>;
        mouseleave: CustomEvent<any>;
    } & {
        [evt: string]: CustomEvent<any>;
    };
    slots: {
        label: {};
        default: {};
    };
};
export declare type TooltipProps = typeof __propDef.props;
export declare type TooltipEvents = typeof __propDef.events;
export declare type TooltipSlots = typeof __propDef.slots;
export default class Tooltip extends SvelteComponentTyped<TooltipProps, TooltipEvents, TooltipSlots> {
}
export {};
