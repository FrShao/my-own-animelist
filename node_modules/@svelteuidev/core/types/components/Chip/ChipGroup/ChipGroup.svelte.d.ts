import { SvelteComponentTyped } from "svelte";
declare const __propDef: {
    props: {
        class?: string;
        color?: import("../../..").SvelteUIColor;
        items?: {
            label: string;
            value: string;
        }[];
        value?: string[];
        label?: string;
        multiple?: boolean;
        disabled?: boolean;
        variant?: "outline" | "filled";
        size?: import("../../..").SvelteUISize;
        radius?: import("../../..").SvelteUINumberSize;
        position?: import("../..").GroupPosition;
        direction?: "column" | "row";
        align?: import("@stitches/core/types/css").Property.AlignItems | import("@stitches/core/types/css").Globals | import("@stitches/core/types/theme").ScaleValue | import("@stitches/core/types/util").Index;
        spacing?: import("../../..").SvelteUINumberSize;
        wrapperProps?: Record<string, any>;
        className?: string;
        override?: import("../../..").CSS;
        element?: HTMLElement;
        use?: import("../../../internal/utils/forwarding/forward-actions").ActionArray;
        m?: import("../../..").SvelteUINumberSize | (string & Record<never, never>);
        my?: import("../../..").SvelteUINumberSize | (string & Record<never, never>);
        mx?: import("../../..").SvelteUINumberSize | (string & Record<never, never>);
        mt?: import("../../..").SvelteUINumberSize | (string & Record<never, never>);
        mb?: import("../../..").SvelteUINumberSize | (string & Record<never, never>);
        ml?: import("../../..").SvelteUINumberSize | (string & Record<never, never>);
        mr?: import("../../..").SvelteUINumberSize | (string & Record<never, never>);
        p?: import("../../..").SvelteUINumberSize | (string & Record<never, never>);
        py?: import("../../..").SvelteUINumberSize | (string & Record<never, never>);
        px?: import("../../..").SvelteUINumberSize | (string & Record<never, never>);
        pt?: import("../../..").SvelteUINumberSize | (string & Record<never, never>);
        pb?: import("../../..").SvelteUINumberSize | (string & Record<never, never>);
        pl?: import("../../..").SvelteUINumberSize | (string & Record<never, never>);
        pr?: import("../../..").SvelteUINumberSize | (string & Record<never, never>);
    };
    events: {
        [evt: string]: CustomEvent<any>;
    };
    slots: {};
};
export declare type ChipGroupProps = typeof __propDef.props;
export declare type ChipGroupEvents = typeof __propDef.events;
export declare type ChipGroupSlots = typeof __propDef.slots;
/**
 * A chip group component is a container for Chips.
 *
 * @see https://svelteui.org/core/chip
 * @example
 * ```svelte
 * <ChipGroup bind:value items={items} />
 * <ChipGroup label={"Choose your favorite framework"} description={"Choose carefuly"} bind:value={value} items={items} />
 * <ChipGroup bind:value={value} items={items} direction={'column'}/>
 * <ChipGroup bind:value items={[{label: 'One', value: 1}, {label: 'Two', value: 2}, {label: 'Three', value: 3}]} />
 * ```
 */
export default class ChipGroup extends SvelteComponentTyped<ChipGroupProps, ChipGroupEvents, ChipGroupSlots> {
}
export {};
