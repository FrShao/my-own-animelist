import { SvelteComponentTyped } from "svelte";
declare const __propDef: {
    props: {
        class?: string;
        color?: import("../../styles").SvelteUIColor;
        id?: string;
        checked?: boolean;
        disabled?: boolean;
        value?: string;
        label?: string | typeof import("svelte").SvelteComponent;
        radius?: number | import("../../styles").SvelteUINumberSize;
        size?: import("../../styles").SvelteUISize;
        type?: "checkbox" | "radio";
        variant?: "outline" | "filled";
        transitionDuration?: number;
        wrapperProps?: {
            [key: string]: any;
        };
        className?: string;
        override?: import("../../styles").CSS;
        element?: HTMLElement;
        use?: import("../../internal/utils/forwarding/forward-actions.js").ActionArray;
        m?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        my?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        mx?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        mt?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        mb?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        ml?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        mr?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        p?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        py?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        px?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        pt?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        pb?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        pl?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        pr?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
    };
    events: {
        [evt: string]: CustomEvent<any>;
    };
    slots: {
        default: {};
    };
};
export declare type ChipProps = typeof __propDef.props;
export declare type ChipEvents = typeof __propDef.events;
export declare type ChipSlots = typeof __propDef.slots;
/**
 * A picker for one or more options.
 *
 * @see https://svelteui.org/core/chip
 * @example
 * ```svelte
 * <Chip>Chips</Chip>
 * <Chip size={'lg'}>Big Chip</Chip>
 * <Chip>Another one</Chip>
 * <Chip checked disabled>Disabled</Chip>
 * ```
 */
export default class Chip extends SvelteComponentTyped<ChipProps, ChipEvents, ChipSlots> {
}
export {};
