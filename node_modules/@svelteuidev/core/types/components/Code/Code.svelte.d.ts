import { SvelteComponentTyped } from "svelte";
declare const __propDef: {
    props: {
        class?: string;
        color?: import("../..").SvelteUIColor;
        block?: boolean;
        width?: number;
        copy?: boolean;
        message?: string;
        noMono?: boolean;
        className?: string;
        override?: import("../..").CSS;
        element?: HTMLPreElement | Partial<HTMLElement>;
        use?: import("../../internal/utils/forwarding/forward-actions").ActionArray;
        m?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        my?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        mx?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        mt?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        mb?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        ml?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        mr?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        p?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        py?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        px?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        pt?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        pb?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        pl?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        pr?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
    };
    events: {
        [evt: string]: CustomEvent<any>;
    };
    slots: {
        default: {};
    };
};
export declare type CodeProps = typeof __propDef.props;
export declare type CodeEvents = typeof __propDef.events;
export declare type CodeSlots = typeof __propDef.slots;
/**
 * Inline or block code without syntax highlighting
 *
 * @see https://svelteui.org/core/code
 * @example
 * ```tsx
 * <Code color='green' size='lg' variant='bars' /> // standard code component
 * <Code color='blue' block copy message={codeToCopy} /> // code with block and copy props
 * ```
 */
export default class Code extends SvelteComponentTyped<CodeProps, CodeEvents, CodeSlots> {
}
export {};
