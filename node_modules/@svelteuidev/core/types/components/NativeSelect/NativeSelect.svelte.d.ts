import { SvelteComponentTyped } from "svelte";
declare const __propDef: {
    props: {
        class?: string;
        id?: string;
        placeholder?: string;
        data?: (string | import("./NativeSelect.styles").SelectItem)[];
        inputStyle?: import("../../styles").CSS;
        wrapperProps?: Record<string, unknown>;
        size?: import("../../styles").SvelteUISize;
        rightSection?: HTMLElement | typeof import("svelte").SvelteComponent;
        className?: string;
        override?: import("../../styles").CSS;
        element?: HTMLElement;
        use?: import("../../internal/utils/forwarding/forward-actions").ActionArray;
        m?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        my?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        mx?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        mt?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        mb?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        ml?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        mr?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        p?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        py?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        px?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        pt?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        pb?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        pl?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        pr?: import("../../styles").SvelteUINumberSize | (string & Record<never, never>);
        icon?: HTMLOrSVGElement | typeof import("svelte").SvelteComponent;
        iconWidth?: number;
        iconProps?: {
            size: number;
            color: string;
        };
        showRightSection?: boolean;
        rightSectionWidth?: number;
        rightSectionProps?: Record<string, unknown>;
        required?: boolean;
        radius?: import("../../styles").SvelteUINumberSize;
        variant?: import("..").InputVariant;
        disabled?: boolean;
        root?: typeof import("svelte").SvelteComponent | keyof HTMLElementTagNameMap;
        value?: string;
        label?: string;
        description?: string;
        error?: string | boolean;
        labelProps?: Record<string, unknown>;
        descriptionProps?: Record<string, unknown>;
        errorProps?: Record<string, unknown>;
    };
    events: {
        [evt: string]: CustomEvent<any>;
    };
    slots: {};
};
export declare type NativeSelectProps = typeof __propDef.props;
export declare type NativeSelectEvents = typeof __propDef.events;
export declare type NativeSelectSlots = typeof __propDef.slots;
/**
 * Capture user feedback limited to large set of options
 *
 * @see https://svelteui.org/core/native-select
 * @example
 * ```svelte
 * <NativeSelect
 *   data={['React', 'Vue', 'Angular', 'Svelte']}
 *   placeholder="Pick one"
 *   label="Select your favorite framework/library"
 *   description="This is anonymous"
 *   required
 * />
 * ```
 */
export default class NativeSelect extends SvelteComponentTyped<NativeSelectProps, NativeSelectEvents, NativeSelectSlots> {
}
export {};
