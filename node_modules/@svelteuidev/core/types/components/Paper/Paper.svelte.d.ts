import { SvelteComponentTyped } from "svelte";
declare const __propDef: {
    props: {
        class?: string;
        p?: "xs" | "sm" | "md" | "lg" | "xl" | (number & Record<never, never>) | (string & Record<never, never>);
        shadow?: import("../..").SvelteUIShadow;
        radius?: import("../..").SvelteUINumberSize;
        withBorder?: boolean;
        padding?: import("../..").SvelteUINumberSize;
        className?: string;
        override?: import("../..").CSS;
        element?: HTMLElement;
        use?: import("../../internal/utils/forwarding/forward-actions").ActionArray;
        m?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        my?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        mx?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        mt?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        mb?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        ml?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        mr?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        py?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        px?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        pt?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        pb?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        pl?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        pr?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
    };
    events: {
        [evt: string]: CustomEvent<any>;
    };
    slots: {
        default: {};
    };
};
export declare type PaperProps = typeof __propDef.props;
export declare type PaperEvents = typeof __propDef.events;
export declare type PaperSlots = typeof __propDef.slots;
export default class Paper extends SvelteComponentTyped<PaperProps, PaperEvents, PaperSlots> {
}
export {};
