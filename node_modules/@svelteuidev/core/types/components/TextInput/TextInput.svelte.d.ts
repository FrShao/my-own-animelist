import { SvelteComponentTyped } from "svelte";
declare const __propDef: {
    props: {
        class?: string;
        overrideInput?: import("../..").CSS;
        invalid?: boolean;
        multiline?: boolean;
        autocomplete?: string;
        icon?: HTMLOrSVGElement | typeof import("svelte").SvelteComponent;
        iconWidth?: number;
        iconProps?: {
            size: number;
            color: string;
        };
        showRightSection?: boolean;
        rightSectionWidth?: number;
        rightSectionProps?: Record<string, unknown>;
        wrapperProps?: Record<string, unknown>;
        placeholder?: string;
        id?: string;
        required?: boolean;
        radius?: import("../..").SvelteUINumberSize;
        variant?: import("../Input").InputVariant;
        disabled?: boolean;
        size?: import("../..").SvelteUISize;
        root?: typeof import("svelte").SvelteComponent | keyof HTMLElementTagNameMap;
        value?: string;
        className?: string;
        override?: import("../..").CSS;
        element?: HTMLElement;
        use?: import("../../internal/utils/forwarding/forward-actions").ActionArray;
        m?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        my?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        mx?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        mt?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        mb?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        ml?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        mr?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        p?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        py?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        px?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        pt?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        pb?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        pl?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        pr?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        labelElement?: "div" | "label";
        label?: string;
        description?: string;
        error?: string | boolean;
        labelProps?: Record<string, unknown>;
        descriptionProps?: Record<string, unknown>;
        errorProps?: Record<string, unknown>;
    };
    events: {
        [evt: string]: CustomEvent<any>;
    };
    slots: {
        rightSection: {
            slot: string;
        };
    };
};
export declare type TextInputProps = typeof __propDef.props;
export declare type TextInputEvents = typeof __propDef.events;
export declare type TextInputSlots = typeof __propDef.slots;
/**
 * Input for text that also uses labels for the input
 *
 * @see https://svelteui.org/core/text
 * @example
 * ```tsx
 * <TextInput
 *     placeholder='Your name'
 *     description="Don't forget to add your full name"
 *     label='Full name'
 *     required
 * />
 * <TextInput
 *     placeholder='Your name'
 *     label='Full name'
 *     size='lg'
 *     on:change={onChange}
 * />
 * ```
 */
export default class TextInput extends SvelteComponentTyped<TextInputProps, TextInputEvents, TextInputSlots> {
}
export {};
