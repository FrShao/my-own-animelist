import type { DefaultProps, SvelteUIColor, SvelteUINumberSize } from '../../styles';
import type { TextProps } from '../Text/Text.styles';
export interface DividerProps extends DefaultProps {
    color?: SvelteUIColor;
    orientation?: 'horizontal' | 'vertical';
    size?: SvelteUINumberSize;
    label?: string;
    labelPosition?: 'left' | 'center' | 'right';
    labelProps?: TextProps;
    variant?: DividerVariant;
}
export interface DividerStyleParams {
    color?: SvelteUIColor;
    size?: SvelteUINumberSize;
    variant?: DividerVariant;
}
export declare type DividerVariant = 'solid' | 'dashed' | 'dotted';
export declare const sizes: {
    xs: number;
    sm: number;
    md: number;
    lg: number;
    xl: number;
};
declare const _default: (params?: DividerStyleParams, options?: import("../../styles/engine/create-styles").UseStylesOptions<"root" | "label">) => {
    cx: (...args: import("../../styles/engine/css").ArgumentArray) => string;
    theme: import("../../styles").SvelteUITheme;
    classes: Record<"root" | "label", string>;
    getStyles: import("@stitches/core/types/styled-component").CssComponent<never, {}, {
        xs: "(min-width: 576px)";
        sm: "(min-width: 768px)";
        md: "(min-width: 992px)";
        lg: "(min-width: 1200px)";
        xl: "(min-width: 1400px)";
    }, import("@stitches/core/types/css-util").CSS<{
        xs: "(min-width: 576px)";
        sm: "(min-width: 768px)";
        md: "(min-width: 992px)";
        lg: "(min-width: 1200px)";
        xl: "(min-width: 1400px)";
    }, {
        colors: {
            dark50: any;
            dark100: any;
            dark200: any;
            dark300: any;
            dark400: any;
            dark500: any;
            dark600: any;
            dark700: any;
            dark800: any;
            dark900: any;
            gray50: any;
            gray100: any;
            gray200: any;
            gray300: any;
            gray400: any;
            gray500: any;
            gray600: any;
            gray700: any;
            gray800: any;
            gray900: any;
            red50: any;
            red100: any;
            red200: any;
            red300: any;
            red400: any;
            red500: any;
            red600: any;
            red700: any;
            red800: any;
            red900: any;
            pink50: any;
            pink100: any;
            pink200: any;
            pink300: any;
            pink400: any;
            pink500: any;
            pink600: any;
            pink700: any;
            pink800: any;
            pink900: any;
            grape50: any;
            grape100: any;
            grape200: any;
            grape300: any;
            grape400: any;
            grape500: any;
            grape600: any;
            grape700: any;
            grape800: any;
            grape900: any;
            violet50: any;
            violet100: any;
            violet200: any;
            violet300: any;
            violet400: any;
            violet500: any;
            violet600: any;
            violet700: any;
            violet800: any;
            violet900: any;
            indigo50: any;
            indigo100: any;
            indigo200: any;
            indigo300: any;
            indigo400: any;
            indigo500: any;
            indigo600: any;
            indigo700: any;
            indigo800: any;
            indigo900: any;
            blue50: any;
            blue100: any;
            blue200: any;
            blue300: any;
            blue400: any;
            blue500: any;
            blue600: any;
            blue700: any;
            blue800: any;
            blue900: any;
            cyan50: any;
            cyan100: any;
            cyan200: any;
            cyan300: any;
            cyan400: any;
            cyan500: any;
            cyan600: any;
            cyan700: any;
            cyan800: any;
            cyan900: any;
            teal50: any;
            teal100: any;
            teal200: any;
            teal300: any;
            teal400: any;
            teal500: any;
            teal600: any;
            teal700: any;
            teal800: any;
            teal900: any;
            green50: any;
            green100: any;
            green200: any;
            green300: any;
            green400: any;
            green500: any;
            green600: any;
            green700: any;
            green800: any;
            green900: any;
            lime50: any;
            lime100: any;
            lime200: any;
            lime300: any;
            lime400: any;
            lime500: any;
            lime600: any;
            lime700: any;
            lime800: any;
            lime900: any;
            yellow50: any;
            yellow100: any;
            yellow200: any;
            yellow300: any;
            yellow400: any;
            yellow500: any;
            yellow600: any;
            yellow700: any;
            yellow800: any;
            yellow900: any;
            orange50: any;
            orange100: any;
            orange200: any;
            orange300: any;
            orange400: any;
            orange500: any;
            orange600: any;
            orange700: any;
            orange800: any;
            orange900: any;
            primary: any;
            white: any;
            black: any;
        };
        space: {
            0: string;
            xs: number;
            sm: number;
            md: number;
            lg: number;
            xl: number;
            xsPX: string;
            smPX: string;
            mdPX: string;
            lgPX: string;
            xlPX: string;
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
            13: string;
            14: string;
            15: string;
            16: string;
            17: string;
            18: string;
            20: string;
            24: string;
            28: string;
            32: string;
            36: string;
            40: string;
            44: string;
            48: string;
            52: string;
            56: string;
            60: string;
            64: string;
            72: string;
            80: string;
            96: string;
        };
        fontSizes: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
        fonts: {
            standard: string;
            mono: string;
            fallback: string;
        };
        fontWeights: {
            thin: number;
            extralight: number;
            light: number;
            normal: number;
            medium: number;
            semibold: number;
            bold: number;
            extrabold: number;
        };
        lineHeights: {
            xs: number;
            sm: number;
            md: number;
            lg: number;
            xl: number;
        };
        letterSpacings: {
            tighter: string;
            tight: string;
            normal: string;
            wide: string;
            wider: string;
            widest: string;
        };
        sizes: unknown;
        radii: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            squared: string;
            rounded: string;
            pill: string;
        };
        shadows: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
        zIndices: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            10: string;
            max: string;
        };
        borderWidths: {
            light: string;
            normal: string;
            bold: string;
            extrabold: string;
            black: string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
        breakpoints: {
            xs: number;
            sm: number;
            md: number;
            lg: number;
            xl: number;
        };
        borderStyles: unknown;
        transitions: unknown;
    }, {
        width: "space";
        height: "space";
        minWidth: "space";
        maxWidth: "space";
        minHeight: "space";
        maxHeight: "space";
        flexBasis: "space";
        gridTemplateColumns: "space";
        gridTemplateRows: "space";
        blockSize: "space";
        minBlockSize: "space";
        maxBlockSize: "space";
        inlineSize: "space";
        minInlineSize: "space";
        maxInlineSize: "space";
        borderWidth: "borderWeights";
        gap: "space";
        gridGap: "space";
        columnGap: "space";
        gridColumnGap: "space";
        rowGap: "space";
        gridRowGap: "space";
        inset: "space";
        insetBlock: "space";
        insetBlockEnd: "space";
        insetBlockStart: "space";
        insetInline: "space";
        insetInlineEnd: "space";
        insetInlineStart: "space";
        margin: "space";
        marginTop: "space";
        marginRight: "space";
        marginBottom: "space";
        marginLeft: "space";
        marginBlock: "space";
        marginBlockEnd: "space";
        marginBlockStart: "space";
        marginInline: "space";
        marginInlineEnd: "space";
        marginInlineStart: "space";
        padding: "space";
        paddingTop: "space";
        paddingRight: "space";
        paddingBottom: "space";
        paddingLeft: "space";
        paddingBlock: "space";
        paddingBlockEnd: "space";
        paddingBlockStart: "space";
        paddingInline: "space";
        paddingInlineEnd: "space";
        paddingInlineStart: "space";
        scrollMargin: "space";
        scrollMarginTop: "space";
        scrollMarginRight: "space";
        scrollMarginBottom: "space";
        scrollMarginLeft: "space";
        scrollMarginBlock: "space";
        scrollMarginBlockEnd: "space";
        scrollMarginBlockStart: "space";
        scrollMarginInline: "space";
        scrollMarginInlineEnd: "space";
        scrollMarginInlineStart: "space";
        scrollPadding: "space";
        scrollPaddingTop: "space";
        scrollPaddingRight: "space";
        scrollPaddingBottom: "space";
        scrollPaddingLeft: "space";
        scrollPaddingBlock: "space";
        scrollPaddingBlockEnd: "space";
        scrollPaddingBlockStart: "space";
        scrollPaddingInline: "space";
        scrollPaddingInlineEnd: "space";
        scrollPaddingInlineStart: "space";
        top: "space";
        right: "space";
        bottom: "space";
        left: "space";
        fontSize: "fontSizes";
        background: "colors";
        backgroundColor: "colors";
        backgroundImage: "colors";
        borderImage: "colors";
        border: "colors";
        borderBlock: "colors";
        borderBlockEnd: "colors";
        borderBlockStart: "colors";
        borderBottom: "colors";
        borderBottomColor: "colors";
        borderColor: "colors";
        borderInline: "colors";
        borderInlineEnd: "colors";
        borderInlineStart: "colors";
        borderLeft: "colors";
        borderLeftColor: "colors";
        borderRight: "colors";
        borderRightColor: "colors";
        borderTop: "colors";
        borderTopColor: "colors";
        caretColor: "colors";
        color: "colors";
        columnRuleColor: "colors";
        outline: "colors";
        outlineColor: "colors";
        fill: "colors";
        stroke: "colors";
        textDecorationColor: "colors";
        fontFamily: "fonts";
        fontWeight: "fontWeights";
        lineHeight: "lineHeights";
        letterSpacing: "letterSpacings";
        borderTopWidth: "borderWidths";
        borderLeftWidth: "borderWidths";
        borderRightWidth: "borderWidths";
        borderBottomWidth: "borderWidths";
        borderStyle: "borderStyles";
        borderTopStyle: "borderStyles";
        borderLeftStyle: "borderStyles";
        borderRightStyle: "borderStyles";
        borderBottomStyle: "borderStyles";
        borderRadius: "radii";
        borderTopLeftRadius: "radii";
        borderTopRightRadius: "radii";
        borderBottomRightRadius: "radii";
        borderBottomLeftRadius: "radii";
        boxShadow: "shadows";
        textShadow: "shadows";
        transition: "transitions";
        zIndex: "zIndices";
    }, {
        focusRing: (value: "auto" | "always" | "never") => {
            WebkitTapHighlightColor: string;
            '&:focus': {
                outlineOffset: number;
                outline: string;
            };
            '&:focus:not(:focus-visible)': {
                outline: string;
            };
        };
        p: (value: {
            readonly [$$ScaleValue]: "space";
        }) => {
            padding: {
                readonly [$$ScaleValue]: "space";
            };
        };
        pt: (value: import("../..").LiteralUnion<{
            readonly [$$ScaleValue]: "space";
        }, string | number>) => {
            paddingTop: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
        };
        pr: (value: import("../..").LiteralUnion<{
            readonly [$$ScaleValue]: "space";
        }, string | number>) => {
            paddingRight: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
        };
        pb: (value: import("../..").LiteralUnion<{
            readonly [$$ScaleValue]: "space";
        }, string | number>) => {
            paddingBottom: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
        };
        pl: (value: import("../..").LiteralUnion<{
            readonly [$$ScaleValue]: "space";
        }, string | number>) => {
            paddingLeft: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
        };
        px: (value: import("../..").LiteralUnion<{
            readonly [$$ScaleValue]: "space";
        }, string | number>) => {
            paddingLeft: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
            paddingRight: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
        };
        py: (value: import("../..").LiteralUnion<{
            readonly [$$ScaleValue]: "space";
        }, string | number>) => {
            paddingTop: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
            paddingBottom: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
        };
        m: (value: import("../..").LiteralUnion<{
            readonly [$$ScaleValue]: "space";
        }, string | number>) => {
            margin: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
        };
        mt: (value: import("../..").LiteralUnion<{
            readonly [$$ScaleValue]: "space";
        }, string | number>) => {
            marginTop: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
        };
        mr: (value: import("../..").LiteralUnion<{
            readonly [$$ScaleValue]: "space";
        }, string | number>) => {
            marginRight: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
        };
        mb: (value: import("../..").LiteralUnion<{
            readonly [$$ScaleValue]: "space";
        }, string | number>) => {
            marginBottom: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
        };
        ml: (value: import("../..").LiteralUnion<{
            readonly [$$ScaleValue]: "space";
        }, string | number>) => {
            marginLeft: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
        };
        mx: (value: import("../..").LiteralUnion<{
            readonly [$$ScaleValue]: "space";
        }, string | number>) => {
            marginLeft: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
            marginRight: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
        };
        my: (value: import("../..").LiteralUnion<{
            readonly [$$ScaleValue]: "space";
        }, string | number>) => {
            marginTop: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
            marginBottom: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
        };
        ta: (value: {
            readonly [$$PropertyValue]: "textAlign";
        }) => {
            textAlign: {
                readonly [$$PropertyValue]: "textAlign";
            };
        };
        tt: (value: {
            readonly [$$PropertyValue]: "textTransform";
        }) => {
            textTransform: {
                readonly [$$PropertyValue]: "textTransform";
            };
        };
        to: (value: {
            readonly [$$PropertyValue]: "textOverflow";
        }) => {
            textOverflow: {
                readonly [$$PropertyValue]: "textOverflow";
            };
        };
        d: (value: {
            readonly [$$PropertyValue]: "display";
        }) => {
            display: {
                readonly [$$PropertyValue]: "display";
            };
        };
        dflex: (value: {
            readonly [$$PropertyValue]: "alignItems" | "justifyContent";
        }) => {
            display: string;
            alignItems: {
                readonly [$$PropertyValue]: "alignItems" | "justifyContent";
            };
            justifyContent: {
                readonly [$$PropertyValue]: "alignItems" | "justifyContent";
            };
        };
        fd: (value: {
            readonly [$$PropertyValue]: "flexDirection";
        }) => {
            flexDirection: {
                readonly [$$PropertyValue]: "flexDirection";
            };
        };
        fw: (value: {
            readonly [$$PropertyValue]: "flexWrap";
        }) => {
            flexWrap: {
                readonly [$$PropertyValue]: "flexWrap";
            };
        };
        ai: (value: {
            readonly [$$PropertyValue]: "alignItems";
        }) => {
            alignItems: {
                readonly [$$PropertyValue]: "alignItems";
            };
        };
        ac: (value: {
            readonly [$$PropertyValue]: "alignContent";
        }) => {
            alignContent: {
                readonly [$$PropertyValue]: "alignContent";
            };
        };
        jc: (value: {
            readonly [$$PropertyValue]: "justifyContent";
        }) => {
            justifyContent: {
                readonly [$$PropertyValue]: "justifyContent";
            };
        };
        as: (value: {
            readonly [$$PropertyValue]: "alignSelf";
        }) => {
            alignSelf: {
                readonly [$$PropertyValue]: "alignSelf";
            };
        };
        fg: (value: {
            readonly [$$PropertyValue]: "flexGrow";
        }) => {
            flexGrow: {
                readonly [$$PropertyValue]: "flexGrow";
            };
        };
        fs: (value: {
            readonly [$$PropertyValue]: "fontSize";
        }) => {
            fontSize: {
                readonly [$$PropertyValue]: "fontSize";
            };
        };
        fb: (value: {
            readonly [$$PropertyValue]: "flexBasis";
        }) => {
            flexBasis: {
                readonly [$$PropertyValue]: "flexBasis";
            };
        };
        bc: (value: {
            readonly [$$PropertyValue]: "backgroundColor";
        }) => {
            backgroundColor: {
                readonly [$$PropertyValue]: "backgroundColor";
            };
        };
        bf: (value: {
            readonly [$$PropertyValue]: "backdropFilter";
        }) => {
            backdropFilter: {
                readonly [$$PropertyValue]: "backdropFilter";
            };
        };
        bg: (value: {
            readonly [$$PropertyValue]: "background";
        }) => {
            background: {
                readonly [$$PropertyValue]: "background";
            };
        };
        bgBlur: (value: {
            readonly [$$PropertyValue]: "background";
        }) => {
            bf: string;
            bg: {
                readonly [$$PropertyValue]: "background";
            };
        };
        bgColor: (value: {
            readonly [$$PropertyValue]: "backgroundColor";
        }) => {
            backgroundColor: {
                readonly [$$PropertyValue]: "backgroundColor";
            };
        };
        backgroundClip: (value: {
            readonly [$$PropertyValue]: "backgroundClip";
        }) => {
            WebkitBackgroundClip: {
                readonly [$$PropertyValue]: "backgroundClip";
            };
            backgroundClip: {
                readonly [$$PropertyValue]: "backgroundClip";
            };
        };
        bgClip: (value: {
            readonly [$$PropertyValue]: "backgroundClip";
        }) => {
            WebkitBackgroundClip: {
                readonly [$$PropertyValue]: "backgroundClip";
            };
            backgroundClip: {
                readonly [$$PropertyValue]: "backgroundClip";
            };
        };
        br: (value: {
            readonly [$$PropertyValue]: "borderRadius";
        }) => {
            borderRadius: {
                readonly [$$PropertyValue]: "borderRadius";
            };
        };
        bw: (value: {
            readonly [$$PropertyValue]: "borderWidth";
        }) => {
            borderWidth: {
                readonly [$$PropertyValue]: "borderWidth";
            };
        };
        btrr: (value: {
            readonly [$$PropertyValue]: "borderTopRightRadius";
        }) => {
            borderTopRightRadius: {
                readonly [$$PropertyValue]: "borderTopRightRadius";
            };
        };
        bbrr: (value: {
            readonly [$$PropertyValue]: "borderBottomRightRadius";
        }) => {
            borderBottomRightRadius: {
                readonly [$$PropertyValue]: "borderBottomRightRadius";
            };
        };
        bblr: (value: {
            readonly [$$PropertyValue]: "borderBottomLeftRadius";
        }) => {
            borderBottomLeftRadius: {
                readonly [$$PropertyValue]: "borderBottomLeftRadius";
            };
        };
        btlr: (value: {
            readonly [$$PropertyValue]: "borderTopLeftRadius";
        }) => {
            borderTopLeftRadius: {
                readonly [$$PropertyValue]: "borderTopLeftRadius";
            };
        };
        bs: (value: {
            readonly [$$PropertyValue]: "boxShadow";
        }) => {
            boxShadow: {
                readonly [$$PropertyValue]: "boxShadow";
            };
        };
        normalShadow: (value: import("../../styles/theme/default-colors").Color) => {
            boxShadow: string;
        };
        lh: (value: {
            readonly [$$PropertyValue]: "lineHeight";
        }) => {
            lineHeight: {
                readonly [$$PropertyValue]: "lineHeight";
            };
        };
        ov: (value: {
            readonly [$$PropertyValue]: "overflow";
        }) => {
            overflow: {
                readonly [$$PropertyValue]: "overflow";
            };
        };
        ox: (value: {
            readonly [$$PropertyValue]: "overflowX";
        }) => {
            overflowX: {
                readonly [$$PropertyValue]: "overflowX";
            };
        };
        oy: (value: {
            readonly [$$PropertyValue]: "overflowY";
        }) => {
            overflowY: {
                readonly [$$PropertyValue]: "overflowY";
            };
        };
        pe: (value: {
            readonly [$$PropertyValue]: "pointerEvents";
        }) => {
            pointerEvents: {
                readonly [$$PropertyValue]: "pointerEvents";
            };
        };
        events: (value: {
            readonly [$$PropertyValue]: "pointerEvents";
        }) => {
            pointerEvents: {
                readonly [$$PropertyValue]: "pointerEvents";
            };
        };
        us: (value: {
            readonly [$$PropertyValue]: "userSelect";
        }) => {
            WebkitUserSelect: {
                readonly [$$PropertyValue]: "userSelect";
            };
            userSelect: {
                readonly [$$PropertyValue]: "userSelect";
            };
        };
        userSelect: (value: {
            readonly [$$PropertyValue]: "userSelect";
        }) => {
            WebkitUserSelect: {
                readonly [$$PropertyValue]: "userSelect";
            };
            userSelect: {
                readonly [$$PropertyValue]: "userSelect";
            };
        };
        w: (value: import("../..").LiteralUnion<{
            readonly [$$ScaleValue]: "space";
        }, string | number>) => {
            width: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
        };
        h: (value: import("../..").LiteralUnion<{
            readonly [$$ScaleValue]: "space";
        }, string | number>) => {
            height: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
        };
        minW: (value: import("../..").LiteralUnion<{
            readonly [$$ScaleValue]: "space";
        }, string | number>) => {
            minWidth: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
        };
        minH: (value: import("../..").LiteralUnion<{
            readonly [$$ScaleValue]: "space";
        }, string | number>) => {
            minWidth: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
        };
        mw: (value: import("../..").LiteralUnion<{
            readonly [$$ScaleValue]: "space";
        }, string | number>) => {
            maxWidth: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
        };
        maxW: (value: import("../..").LiteralUnion<{
            readonly [$$ScaleValue]: "space";
        }, string | number>) => {
            maxWidth: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
        };
        mh: (value: import("../..").LiteralUnion<{
            readonly [$$ScaleValue]: "space";
        }, string | number>) => {
            maxHeight: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
        };
        maxH: (value: import("../..").LiteralUnion<{
            readonly [$$ScaleValue]: "space";
        }, string | number>) => {
            maxHeight: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
        };
        size: (value: import("../..").LiteralUnion<{
            readonly [$$ScaleValue]: "space";
        }, string | number>) => {
            width: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
            height: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
        };
        minSize: (value: import("../..").LiteralUnion<{
            readonly [$$ScaleValue]: "space";
        }, string | number>) => {
            minWidth: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
            minHeight: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
            width: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
            height: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
        };
        sizeMin: (value: import("../..").LiteralUnion<{
            readonly [$$ScaleValue]: "space";
        }, string | number>) => {
            minWidth: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
            minHeight: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
            width: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
            height: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
        };
        maxSize: (value: import("../..").LiteralUnion<{
            readonly [$$ScaleValue]: "space";
        }, string | number>) => {
            maxWidth: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
            maxHeight: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
        };
        sizeMax: (value: import("../..").LiteralUnion<{
            readonly [$$ScaleValue]: "space";
        }, string | number>) => {
            maxWidth: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
            maxHeight: import("../..").LiteralUnion<{
                readonly [$$ScaleValue]: "space";
            }, string | number>;
        };
        appearance: (value: {
            readonly [$$PropertyValue]: "appearance";
        }) => {
            WebkitAppearance: {
                readonly [$$PropertyValue]: "appearance";
            };
            appearance: {
                readonly [$$PropertyValue]: "appearance";
            };
        };
        scale: (value: string) => {
            transform: string;
        };
        linearGradient: (value: string) => {
            backgroundImage: string;
        };
        tdl: (value: {
            readonly [$$PropertyValue]: "textDecorationLine";
        }) => {
            textDecorationLine: {
                readonly [$$PropertyValue]: "textDecorationLine";
            };
        };
        textGradient: (value: string) => {
            backgroundImage: string;
            WebkitBackgroundClip: string;
            WebkitTextFillColor: string;
        };
    }>>;
};
export default _default;
