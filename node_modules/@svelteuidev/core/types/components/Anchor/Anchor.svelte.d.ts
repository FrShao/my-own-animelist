import { SvelteComponentTyped } from "svelte";
declare const __propDef: {
    props: {
        class?: string;
        root: import("../..").LiteralUnion<typeof import("svelte").SvelteComponent | keyof HTMLElementTagNameMap, string>;
        external: boolean;
        className?: string;
        override?: import("../..").CSS;
        align?: import("../..").SvelteUITextAlignment;
        color?: import("..").TextColors;
        transform?: import("../..").SvelteUITextTransform;
        variant?: import("..").TextVariant;
        size?: import("../..").SvelteUINumberSize;
        weight?: import("../..").SvelteUINumberFontSize;
        gradient?: import("../..").SvelteUIGradient;
        inline?: boolean;
        lineClamp?: number;
        underline?: boolean;
        inherit?: boolean;
        href?: string;
        tracking?: import("..").Tracking;
        element?: HTMLElement;
        use?: import("../../internal/utils/forwarding/forward-actions").ActionArray;
        m?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        my?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        mx?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        mt?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        mb?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        ml?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        mr?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        p?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        py?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        px?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        pt?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        pb?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        pl?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        pr?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
    };
    events: {
        [evt: string]: CustomEvent<any>;
    };
    slots: {
        default: {};
    };
};
export declare type AnchorProps = typeof __propDef.props;
export declare type AnchorEvents = typeof __propDef.events;
export declare type AnchorSlots = typeof __propDef.slots;
/**
 * **UNSTABLE:** new API, yet to be vetted.
 *
 * Display an anchor text that is a wrapper around `Text` component using an `a` as the default
 * root.
 *
 * @see https://svelteui.org/core/anchor
 * @example
 * ```svelte
 * <Anchor href="https://svelteui.org/">Main Page</Anchor>
 * <Anchor root={ Button } href="https://svelteui.org/" target="_blank">Documentation</Anchor>
 * <Anchor root={ Link } to="/home" color='violet' size='lg'>Click here</Anchor>
 * ```
 */
export default class Anchor extends SvelteComponentTyped<AnchorProps, AnchorEvents, AnchorSlots> {
}
export {};
