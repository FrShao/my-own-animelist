import { SvelteComponentTyped } from "svelte";
import type { TitleProps } from './Title.styles';
declare const __propDef: {
    props: {
        class?: string;
        order?: import("./Title.styles").TitleOrder;
        className?: string;
        override?: import("../..").CSS;
        align?: import("../..").SvelteUITextAlignment;
        color?: import("../Text").TextColors;
        root?: import("../..").LiteralUnion<typeof import("svelte").SvelteComponent | keyof HTMLElementTagNameMap, string>;
        transform?: import("../..").SvelteUITextTransform;
        variant?: import("../Text").TextVariant;
        size?: import("../..").SvelteUINumberSize;
        weight?: import("../..").SvelteUINumberFontSize;
        gradient?: import("../..").SvelteUIGradient;
        inline?: boolean;
        lineClamp?: number;
        underline?: boolean;
        inherit?: boolean;
        href?: string;
        tracking?: import("../Text").Tracking;
        element?: HTMLElement;
        use?: import("../../internal/utils/forwarding/forward-actions").ActionArray;
        m?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        my?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        mx?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        mt?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        mb?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        ml?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        mr?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        p?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        py?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        px?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        pt?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        pb?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        pl?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
        pr?: import("../..").SvelteUINumberSize | (string & Record<never, never>);
    };
    events: {
        [evt: string]: CustomEvent<any>;
    };
    slots: {
        default: {};
    };
};
export declare type TitleProps = typeof __propDef.props;
export declare type TitleEvents = typeof __propDef.events;
export declare type TitleSlots = typeof __propDef.slots;
/**
 * Display text that uses title styling and title HTML tags.
 *
 * @see https://svelteui.org/core/title
 * @example
 *    ```tsx
 *    <Title>This is a title</Title> // standard title component
 *    <Title order={3}>This is a title</Title> // title component with order 2
 *    <Title order={1} override={{ fontSize: '90px' }}>This is a bigger title</Title> // title component with override style
 *    ```
 */
export default class Title extends SvelteComponentTyped<TitleProps, TitleEvents, TitleSlots> {
}
export {};
