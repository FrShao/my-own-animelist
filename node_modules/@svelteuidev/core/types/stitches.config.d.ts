import { colors } from './styles';
import type { LiteralUnion } from './internal';
import type * as Stitches from '@stitches/core';
export declare const css: <Composers extends (string | import("@stitches/core/types/util").Function | {
    [name: string]: unknown;
})[], CSS = import("@stitches/core/types/css-util").CSS<{
    xs: "(min-width: 576px)";
    sm: "(min-width: 768px)";
    md: "(min-width: 992px)";
    lg: "(min-width: 1200px)";
    xl: "(min-width: 1400px)";
}, {
    colors: {
        dark50: any;
        dark100: any;
        dark200: any;
        dark300: any;
        dark400: any;
        dark500: any;
        dark600: any;
        dark700: any;
        dark800: any;
        dark900: any;
        gray50: any;
        gray100: any;
        gray200: any;
        gray300: any;
        gray400: any;
        gray500: any;
        gray600: any;
        gray700: any;
        gray800: any;
        gray900: any;
        red50: any;
        red100: any;
        red200: any;
        red300: any;
        red400: any;
        red500: any;
        red600: any;
        red700: any;
        red800: any;
        red900: any;
        pink50: any;
        pink100: any;
        pink200: any;
        pink300: any;
        pink400: any;
        pink500: any;
        pink600: any;
        pink700: any;
        pink800: any;
        pink900: any;
        grape50: any;
        grape100: any;
        grape200: any;
        grape300: any;
        grape400: any;
        grape500: any;
        grape600: any;
        grape700: any;
        grape800: any;
        grape900: any;
        violet50: any;
        violet100: any;
        violet200: any;
        violet300: any;
        violet400: any;
        violet500: any;
        violet600: any;
        violet700: any;
        violet800: any;
        violet900: any;
        indigo50: any;
        indigo100: any;
        indigo200: any;
        indigo300: any;
        indigo400: any;
        indigo500: any;
        indigo600: any;
        indigo700: any;
        indigo800: any;
        indigo900: any;
        blue50: any;
        blue100: any;
        blue200: any;
        blue300: any;
        blue400: any;
        blue500: any;
        blue600: any;
        blue700: any;
        blue800: any;
        blue900: any;
        cyan50: any;
        cyan100: any;
        cyan200: any;
        cyan300: any;
        cyan400: any;
        cyan500: any;
        cyan600: any;
        cyan700: any;
        cyan800: any;
        cyan900: any;
        teal50: any;
        teal100: any;
        teal200: any;
        teal300: any;
        teal400: any;
        teal500: any;
        teal600: any;
        teal700: any;
        teal800: any;
        teal900: any;
        green50: any;
        green100: any;
        green200: any;
        green300: any;
        green400: any;
        green500: any;
        green600: any;
        green700: any;
        green800: any;
        green900: any;
        lime50: any;
        lime100: any;
        lime200: any;
        lime300: any;
        lime400: any;
        lime500: any;
        lime600: any;
        lime700: any;
        lime800: any;
        lime900: any;
        yellow50: any;
        yellow100: any;
        yellow200: any;
        yellow300: any;
        yellow400: any;
        yellow500: any;
        yellow600: any;
        yellow700: any;
        yellow800: any;
        yellow900: any;
        orange50: any;
        orange100: any;
        orange200: any;
        orange300: any;
        orange400: any;
        orange500: any;
        orange600: any;
        orange700: any;
        orange800: any;
        orange900: any;
        primary: any;
        white: any;
        black: any;
    };
    space: {
        0: string;
        xs: number;
        sm: number;
        md: number;
        lg: number;
        xl: number;
        xsPX: string;
        smPX: string;
        mdPX: string;
        lgPX: string;
        xlPX: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    fontSizes: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    fonts: {
        standard: string;
        mono: string;
        fallback: string;
    };
    fontWeights: {
        thin: number;
        extralight: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
        extrabold: number;
    };
    lineHeights: {
        xs: number;
        sm: number;
        md: number;
        lg: number;
        xl: number;
    };
    letterSpacings: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
        wider: string;
        widest: string;
    };
    sizes: unknown;
    radii: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        squared: string;
        rounded: string;
        pill: string;
    };
    shadows: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    zIndices: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        10: string;
        max: string;
    };
    borderWidths: {
        light: string;
        normal: string;
        bold: string;
        extrabold: string;
        black: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    breakpoints: {
        xs: number;
        sm: number;
        md: number;
        lg: number;
        xl: number;
    };
    borderStyles: unknown;
    transitions: unknown;
}, {
    width: "space";
    height: "space";
    minWidth: "space";
    maxWidth: "space";
    minHeight: "space";
    maxHeight: "space";
    flexBasis: "space";
    gridTemplateColumns: "space";
    gridTemplateRows: "space";
    blockSize: "space";
    minBlockSize: "space";
    maxBlockSize: "space";
    inlineSize: "space";
    minInlineSize: "space";
    maxInlineSize: "space";
    borderWidth: "borderWeights";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {
    focusRing: (value: 'auto' | 'always' | 'never') => {
        WebkitTapHighlightColor: string;
        '&:focus': {
            outlineOffset: number;
            outline: string;
        };
        '&:focus:not(:focus-visible)': {
            outline: string;
        };
    };
    p: (value: Stitches.ScaleValue<'space'>) => {
        padding: {
            readonly [Stitches.$$ScaleValue]: "space";
        };
    };
    pt: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        paddingTop: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    pr: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        paddingRight: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    pb: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        paddingBottom: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    pl: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        paddingLeft: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    px: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        paddingLeft: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
        paddingRight: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    py: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        paddingTop: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
        paddingBottom: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    m: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        margin: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    mt: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        marginTop: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    mr: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        marginRight: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    mb: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        marginBottom: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    ml: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        marginLeft: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    mx: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        marginLeft: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
        marginRight: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    my: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        marginTop: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
        marginBottom: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    ta: (value: Stitches.PropertyValue<'textAlign'>) => {
        textAlign: {
            readonly [Stitches.$$PropertyValue]: "textAlign";
        };
    };
    tt: (value: Stitches.PropertyValue<'textTransform'>) => {
        textTransform: {
            readonly [Stitches.$$PropertyValue]: "textTransform";
        };
    };
    to: (value: Stitches.PropertyValue<'textOverflow'>) => {
        textOverflow: {
            readonly [Stitches.$$PropertyValue]: "textOverflow";
        };
    };
    d: (value: Stitches.PropertyValue<'display'>) => {
        display: {
            readonly [Stitches.$$PropertyValue]: "display";
        };
    };
    dflex: (value: Stitches.PropertyValue<'alignItems' | 'justifyContent'>) => {
        display: string;
        alignItems: {
            readonly [Stitches.$$PropertyValue]: "alignItems" | "justifyContent";
        };
        justifyContent: {
            readonly [Stitches.$$PropertyValue]: "alignItems" | "justifyContent";
        };
    };
    fd: (value: Stitches.PropertyValue<'flexDirection'>) => {
        flexDirection: {
            readonly [Stitches.$$PropertyValue]: "flexDirection";
        };
    };
    fw: (value: Stitches.PropertyValue<'flexWrap'>) => {
        flexWrap: {
            readonly [Stitches.$$PropertyValue]: "flexWrap";
        };
    };
    ai: (value: Stitches.PropertyValue<'alignItems'>) => {
        alignItems: {
            readonly [Stitches.$$PropertyValue]: "alignItems";
        };
    };
    ac: (value: Stitches.PropertyValue<'alignContent'>) => {
        alignContent: {
            readonly [Stitches.$$PropertyValue]: "alignContent";
        };
    };
    jc: (value: Stitches.PropertyValue<'justifyContent'>) => {
        justifyContent: {
            readonly [Stitches.$$PropertyValue]: "justifyContent";
        };
    };
    as: (value: Stitches.PropertyValue<'alignSelf'>) => {
        alignSelf: {
            readonly [Stitches.$$PropertyValue]: "alignSelf";
        };
    };
    fg: (value: Stitches.PropertyValue<'flexGrow'>) => {
        flexGrow: {
            readonly [Stitches.$$PropertyValue]: "flexGrow";
        };
    };
    fs: (value: Stitches.PropertyValue<'fontSize'>) => {
        fontSize: {
            readonly [Stitches.$$PropertyValue]: "fontSize";
        };
    };
    fb: (value: Stitches.PropertyValue<'flexBasis'>) => {
        flexBasis: {
            readonly [Stitches.$$PropertyValue]: "flexBasis";
        };
    };
    bc: (value: Stitches.PropertyValue<'backgroundColor'>) => {
        backgroundColor: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        };
    };
    bf: (value: Stitches.PropertyValue<'backdropFilter'>) => {
        backdropFilter: {
            readonly [Stitches.$$PropertyValue]: "backdropFilter";
        };
    };
    bg: (value: Stitches.PropertyValue<'background'>) => {
        background: {
            readonly [Stitches.$$PropertyValue]: "background";
        };
    };
    bgBlur: (value: Stitches.PropertyValue<'background'>) => {
        bf: string;
        bg: {
            readonly [Stitches.$$PropertyValue]: "background";
        };
    };
    bgColor: (value: Stitches.PropertyValue<'backgroundColor'>) => {
        backgroundColor: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        };
    };
    backgroundClip: (value: Stitches.PropertyValue<'backgroundClip'>) => {
        WebkitBackgroundClip: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        };
        backgroundClip: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        };
    };
    bgClip: (value: Stitches.PropertyValue<'backgroundClip'>) => {
        WebkitBackgroundClip: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        };
        backgroundClip: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        };
    };
    br: (value: Stitches.PropertyValue<'borderRadius'>) => {
        borderRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
    };
    bw: (value: Stitches.PropertyValue<'borderWidth'>) => {
        borderWidth: {
            readonly [Stitches.$$PropertyValue]: "borderWidth";
        };
    };
    btrr: (value: Stitches.PropertyValue<'borderTopRightRadius'>) => {
        borderTopRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderTopRightRadius";
        };
    };
    bbrr: (value: Stitches.PropertyValue<'borderBottomRightRadius'>) => {
        borderBottomRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderBottomRightRadius";
        };
    };
    bblr: (value: Stitches.PropertyValue<'borderBottomLeftRadius'>) => {
        borderBottomLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderBottomLeftRadius";
        };
    };
    btlr: (value: Stitches.PropertyValue<'borderTopLeftRadius'>) => {
        borderTopLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderTopLeftRadius";
        };
    };
    bs: (value: Stitches.PropertyValue<'boxShadow'>) => {
        boxShadow: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        };
    };
    normalShadow: (value: keyof typeof colors) => {
        boxShadow: string;
    };
    lh: (value: Stitches.PropertyValue<'lineHeight'>) => {
        lineHeight: {
            readonly [Stitches.$$PropertyValue]: "lineHeight";
        };
    };
    ov: (value: Stitches.PropertyValue<'overflow'>) => {
        overflow: {
            readonly [Stitches.$$PropertyValue]: "overflow";
        };
    };
    ox: (value: Stitches.PropertyValue<'overflowX'>) => {
        overflowX: {
            readonly [Stitches.$$PropertyValue]: "overflowX";
        };
    };
    oy: (value: Stitches.PropertyValue<'overflowY'>) => {
        overflowY: {
            readonly [Stitches.$$PropertyValue]: "overflowY";
        };
    };
    pe: (value: Stitches.PropertyValue<'pointerEvents'>) => {
        pointerEvents: {
            readonly [Stitches.$$PropertyValue]: "pointerEvents";
        };
    };
    events: (value: Stitches.PropertyValue<'pointerEvents'>) => {
        pointerEvents: {
            readonly [Stitches.$$PropertyValue]: "pointerEvents";
        };
    };
    us: (value: Stitches.PropertyValue<'userSelect'>) => {
        WebkitUserSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
    };
    userSelect: (value: Stitches.PropertyValue<'userSelect'>) => {
        WebkitUserSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
    };
    w: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        width: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    h: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        height: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    minW: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        minWidth: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    minH: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        minWidth: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    mw: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        maxWidth: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    maxW: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        maxWidth: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    mh: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        maxHeight: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    maxH: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        maxHeight: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    size: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        width: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
        height: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    minSize: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        minWidth: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
        minHeight: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
        width: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
        height: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    sizeMin: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        minWidth: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
        minHeight: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
        width: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
        height: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    maxSize: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        maxWidth: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
        maxHeight: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    sizeMax: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        maxWidth: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
        maxHeight: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    appearance: (value: Stitches.PropertyValue<'appearance'>) => {
        WebkitAppearance: {
            readonly [Stitches.$$PropertyValue]: "appearance";
        };
        appearance: {
            readonly [Stitches.$$PropertyValue]: "appearance";
        };
    };
    scale: (value: string) => {
        transform: string;
    };
    linearGradient: (value: string) => {
        backgroundImage: string;
    };
    tdl: (value: Stitches.PropertyValue<'textDecorationLine'>) => {
        textDecorationLine: {
            readonly [Stitches.$$PropertyValue]: "textDecorationLine";
        };
    };
    textGradient: (value: string) => {
        backgroundImage: string;
        WebkitBackgroundClip: string;
        WebkitTextFillColor: string;
    };
}>>(...composers: { [K in keyof Composers]: string extends Composers[K] ? Composers[K] : Composers[K] extends string | import("@stitches/core/types/util").Function ? Composers[K] : import("@stitches/core/types/stitches").RemoveIndex<CSS> & {
    variants?: {
        [x: string]: {
            [x: string]: CSS;
            [x: number]: CSS;
        };
    };
    compoundVariants?: (("variants" extends keyof Composers[K] ? Composers[K][keyof Composers[K] & "variants"] extends infer T ? { [Name in keyof T]?: import("@stitches/core/types/util").String | import("@stitches/core/types/util").Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name]>; } : never : import("@stitches/core/types/util").WideObject) & {
        css: CSS;
    })[];
    defaultVariants?: "variants" extends keyof Composers[K] ? Composers[K][keyof Composers[K] & "variants"] extends infer T_1 ? { [Name_1 in keyof T_1]?: import("@stitches/core/types/util").String | import("@stitches/core/types/util").Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name_1]>; } : never : import("@stitches/core/types/util").WideObject;
} & CSS & (Composers[K] extends infer T_2 ? { [K2 in keyof T_2]: K2 extends "compoundVariants" | "defaultVariants" | "variants" ? unknown : K2 extends keyof CSS ? CSS[K2] : unknown; } : never); }) => import("@stitches/core/types/styled-component").CssComponent<import("@stitches/core/types/styled-component").StyledComponentType<Composers>, import("@stitches/core/types/styled-component").StyledComponentProps<Composers>, {
    xs: "(min-width: 576px)";
    sm: "(min-width: 768px)";
    md: "(min-width: 992px)";
    lg: "(min-width: 1200px)";
    xl: "(min-width: 1400px)";
}, CSS>, globalCss: <Styles extends {
    [K: string]: any;
}>(...styles: ({
    '@import'?: unknown;
    '@font-face'?: unknown;
} & { [K in keyof Styles]: K extends "@import" ? string | string[] : K extends "@font-face" ? import("@stitches/core/types/css").AtRule.FontFace | import("@stitches/core/types/css").AtRule.FontFace[] : K extends `@keyframes ${string}` ? {
    [x: string]: import("@stitches/core/types/css-util").CSS<{
        xs: "(min-width: 576px)";
        sm: "(min-width: 768px)";
        md: "(min-width: 992px)";
        lg: "(min-width: 1200px)";
        xl: "(min-width: 1400px)";
    }, {
        colors: {
            dark50: any;
            dark100: any;
            dark200: any;
            dark300: any;
            dark400: any;
            dark500: any;
            dark600: any;
            dark700: any;
            dark800: any;
            dark900: any;
            gray50: any;
            gray100: any;
            gray200: any;
            gray300: any;
            gray400: any;
            gray500: any;
            gray600: any;
            gray700: any;
            gray800: any;
            gray900: any;
            red50: any;
            red100: any;
            red200: any;
            red300: any;
            red400: any;
            red500: any;
            red600: any;
            red700: any;
            red800: any;
            red900: any;
            pink50: any;
            pink100: any;
            pink200: any;
            pink300: any;
            pink400: any;
            pink500: any;
            pink600: any;
            pink700: any;
            pink800: any;
            pink900: any;
            grape50: any;
            grape100: any;
            grape200: any;
            grape300: any;
            grape400: any;
            grape500: any;
            grape600: any;
            grape700: any;
            grape800: any;
            grape900: any;
            violet50: any;
            violet100: any;
            violet200: any;
            violet300: any;
            violet400: any;
            violet500: any;
            violet600: any;
            violet700: any;
            violet800: any;
            violet900: any;
            indigo50: any;
            indigo100: any;
            indigo200: any;
            indigo300: any;
            indigo400: any;
            indigo500: any;
            indigo600: any;
            indigo700: any;
            indigo800: any;
            indigo900: any;
            blue50: any;
            blue100: any;
            blue200: any;
            blue300: any;
            blue400: any;
            blue500: any;
            blue600: any;
            blue700: any;
            blue800: any;
            blue900: any;
            cyan50: any;
            cyan100: any;
            cyan200: any;
            cyan300: any;
            cyan400: any;
            cyan500: any;
            cyan600: any;
            cyan700: any;
            cyan800: any;
            cyan900: any;
            teal50: any;
            teal100: any;
            teal200: any;
            teal300: any;
            teal400: any;
            teal500: any;
            teal600: any;
            teal700: any;
            teal800: any;
            teal900: any;
            green50: any;
            green100: any;
            green200: any;
            green300: any;
            green400: any;
            green500: any;
            green600: any;
            green700: any;
            green800: any;
            green900: any;
            lime50: any;
            lime100: any;
            lime200: any;
            lime300: any;
            lime400: any;
            lime500: any;
            lime600: any;
            lime700: any;
            lime800: any;
            lime900: any;
            yellow50: any;
            yellow100: any;
            yellow200: any;
            yellow300: any;
            yellow400: any;
            yellow500: any;
            yellow600: any;
            yellow700: any;
            yellow800: any;
            yellow900: any;
            orange50: any;
            orange100: any;
            orange200: any;
            orange300: any;
            orange400: any;
            orange500: any;
            orange600: any;
            orange700: any;
            orange800: any;
            orange900: any;
            primary: any;
            white: any;
            black: any;
        };
        space: {
            0: string;
            xs: number;
            sm: number;
            md: number;
            lg: number;
            xl: number;
            xsPX: string;
            smPX: string;
            mdPX: string;
            lgPX: string;
            xlPX: string;
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
            13: string;
            14: string;
            15: string;
            16: string;
            17: string;
            18: string;
            20: string;
            24: string;
            28: string;
            32: string;
            36: string;
            40: string;
            44: string;
            48: string;
            52: string;
            56: string;
            60: string;
            64: string;
            72: string;
            80: string;
            96: string;
        };
        fontSizes: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
        fonts: {
            standard: string;
            mono: string;
            fallback: string;
        };
        fontWeights: {
            thin: number;
            extralight: number;
            light: number;
            normal: number;
            medium: number;
            semibold: number;
            bold: number;
            extrabold: number;
        };
        lineHeights: {
            xs: number;
            sm: number;
            md: number;
            lg: number;
            xl: number;
        };
        letterSpacings: {
            tighter: string;
            tight: string;
            normal: string;
            wide: string;
            wider: string;
            widest: string;
        };
        sizes: unknown;
        radii: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            squared: string;
            rounded: string;
            pill: string;
        };
        shadows: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
        zIndices: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            10: string;
            max: string;
        };
        borderWidths: {
            light: string;
            normal: string;
            bold: string;
            extrabold: string;
            black: string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
        breakpoints: {
            xs: number;
            sm: number;
            md: number;
            lg: number;
            xl: number;
        };
        borderStyles: unknown;
        transitions: unknown;
    }, {
        width: "space";
        height: "space";
        minWidth: "space";
        maxWidth: "space";
        minHeight: "space";
        maxHeight: "space";
        flexBasis: "space";
        gridTemplateColumns: "space";
        gridTemplateRows: "space";
        blockSize: "space";
        minBlockSize: "space";
        maxBlockSize: "space";
        inlineSize: "space";
        minInlineSize: "space";
        maxInlineSize: "space";
        borderWidth: "borderWeights";
        gap: "space";
        gridGap: "space";
        columnGap: "space";
        gridColumnGap: "space";
        rowGap: "space";
        gridRowGap: "space";
        inset: "space";
        insetBlock: "space";
        insetBlockEnd: "space";
        insetBlockStart: "space";
        insetInline: "space";
        insetInlineEnd: "space";
        insetInlineStart: "space";
        margin: "space";
        marginTop: "space";
        marginRight: "space";
        marginBottom: "space";
        marginLeft: "space";
        marginBlock: "space";
        marginBlockEnd: "space";
        marginBlockStart: "space";
        marginInline: "space";
        marginInlineEnd: "space";
        marginInlineStart: "space";
        padding: "space";
        paddingTop: "space";
        paddingRight: "space";
        paddingBottom: "space";
        paddingLeft: "space";
        paddingBlock: "space";
        paddingBlockEnd: "space";
        paddingBlockStart: "space";
        paddingInline: "space";
        paddingInlineEnd: "space";
        paddingInlineStart: "space";
        scrollMargin: "space";
        scrollMarginTop: "space";
        scrollMarginRight: "space";
        scrollMarginBottom: "space";
        scrollMarginLeft: "space";
        scrollMarginBlock: "space";
        scrollMarginBlockEnd: "space";
        scrollMarginBlockStart: "space";
        scrollMarginInline: "space";
        scrollMarginInlineEnd: "space";
        scrollMarginInlineStart: "space";
        scrollPadding: "space";
        scrollPaddingTop: "space";
        scrollPaddingRight: "space";
        scrollPaddingBottom: "space";
        scrollPaddingLeft: "space";
        scrollPaddingBlock: "space";
        scrollPaddingBlockEnd: "space";
        scrollPaddingBlockStart: "space";
        scrollPaddingInline: "space";
        scrollPaddingInlineEnd: "space";
        scrollPaddingInlineStart: "space";
        top: "space";
        right: "space";
        bottom: "space";
        left: "space";
        fontSize: "fontSizes";
        background: "colors";
        backgroundColor: "colors";
        backgroundImage: "colors";
        borderImage: "colors";
        border: "colors";
        borderBlock: "colors";
        borderBlockEnd: "colors";
        borderBlockStart: "colors";
        borderBottom: "colors";
        borderBottomColor: "colors";
        borderColor: "colors";
        borderInline: "colors";
        borderInlineEnd: "colors";
        borderInlineStart: "colors";
        borderLeft: "colors";
        borderLeftColor: "colors";
        borderRight: "colors";
        borderRightColor: "colors";
        borderTop: "colors";
        borderTopColor: "colors";
        caretColor: "colors";
        color: "colors";
        columnRuleColor: "colors";
        outline: "colors";
        outlineColor: "colors";
        fill: "colors";
        stroke: "colors";
        textDecorationColor: "colors";
        fontFamily: "fonts";
        fontWeight: "fontWeights";
        lineHeight: "lineHeights";
        letterSpacing: "letterSpacings";
        borderTopWidth: "borderWidths";
        borderLeftWidth: "borderWidths";
        borderRightWidth: "borderWidths";
        borderBottomWidth: "borderWidths";
        borderStyle: "borderStyles";
        borderTopStyle: "borderStyles";
        borderLeftStyle: "borderStyles";
        borderRightStyle: "borderStyles";
        borderBottomStyle: "borderStyles";
        borderRadius: "radii";
        borderTopLeftRadius: "radii";
        borderTopRightRadius: "radii";
        borderBottomRightRadius: "radii";
        borderBottomLeftRadius: "radii";
        boxShadow: "shadows";
        textShadow: "shadows";
        transition: "transitions";
        zIndex: "zIndices";
    }, {
        focusRing: (value: 'auto' | 'always' | 'never') => {
            WebkitTapHighlightColor: string;
            '&:focus': {
                outlineOffset: number;
                outline: string;
            };
            '&:focus:not(:focus-visible)': {
                outline: string;
            };
        };
        p: (value: Stitches.ScaleValue<'space'>) => {
            padding: {
                readonly [Stitches.$$ScaleValue]: "space";
            };
        };
        pt: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            paddingTop: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        pr: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            paddingRight: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        pb: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            paddingBottom: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        pl: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            paddingLeft: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        px: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            paddingLeft: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            paddingRight: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        py: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            paddingTop: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            paddingBottom: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        m: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            margin: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        mt: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            marginTop: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        mr: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            marginRight: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        mb: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            marginBottom: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        ml: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            marginLeft: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        mx: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            marginLeft: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            marginRight: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        my: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            marginTop: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            marginBottom: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        ta: (value: Stitches.PropertyValue<'textAlign'>) => {
            textAlign: {
                readonly [Stitches.$$PropertyValue]: "textAlign";
            };
        };
        tt: (value: Stitches.PropertyValue<'textTransform'>) => {
            textTransform: {
                readonly [Stitches.$$PropertyValue]: "textTransform";
            };
        };
        to: (value: Stitches.PropertyValue<'textOverflow'>) => {
            textOverflow: {
                readonly [Stitches.$$PropertyValue]: "textOverflow";
            };
        };
        d: (value: Stitches.PropertyValue<'display'>) => {
            display: {
                readonly [Stitches.$$PropertyValue]: "display";
            };
        };
        dflex: (value: Stitches.PropertyValue<'alignItems' | 'justifyContent'>) => {
            display: string;
            alignItems: {
                readonly [Stitches.$$PropertyValue]: "alignItems" | "justifyContent";
            };
            justifyContent: {
                readonly [Stitches.$$PropertyValue]: "alignItems" | "justifyContent";
            };
        };
        fd: (value: Stitches.PropertyValue<'flexDirection'>) => {
            flexDirection: {
                readonly [Stitches.$$PropertyValue]: "flexDirection";
            };
        };
        fw: (value: Stitches.PropertyValue<'flexWrap'>) => {
            flexWrap: {
                readonly [Stitches.$$PropertyValue]: "flexWrap";
            };
        };
        ai: (value: Stitches.PropertyValue<'alignItems'>) => {
            alignItems: {
                readonly [Stitches.$$PropertyValue]: "alignItems";
            };
        };
        ac: (value: Stitches.PropertyValue<'alignContent'>) => {
            alignContent: {
                readonly [Stitches.$$PropertyValue]: "alignContent";
            };
        };
        jc: (value: Stitches.PropertyValue<'justifyContent'>) => {
            justifyContent: {
                readonly [Stitches.$$PropertyValue]: "justifyContent";
            };
        };
        as: (value: Stitches.PropertyValue<'alignSelf'>) => {
            alignSelf: {
                readonly [Stitches.$$PropertyValue]: "alignSelf";
            };
        };
        fg: (value: Stitches.PropertyValue<'flexGrow'>) => {
            flexGrow: {
                readonly [Stitches.$$PropertyValue]: "flexGrow";
            };
        };
        fs: (value: Stitches.PropertyValue<'fontSize'>) => {
            fontSize: {
                readonly [Stitches.$$PropertyValue]: "fontSize";
            };
        };
        fb: (value: Stitches.PropertyValue<'flexBasis'>) => {
            flexBasis: {
                readonly [Stitches.$$PropertyValue]: "flexBasis";
            };
        };
        bc: (value: Stitches.PropertyValue<'backgroundColor'>) => {
            backgroundColor: {
                readonly [Stitches.$$PropertyValue]: "backgroundColor";
            };
        };
        bf: (value: Stitches.PropertyValue<'backdropFilter'>) => {
            backdropFilter: {
                readonly [Stitches.$$PropertyValue]: "backdropFilter";
            };
        };
        bg: (value: Stitches.PropertyValue<'background'>) => {
            background: {
                readonly [Stitches.$$PropertyValue]: "background";
            };
        };
        bgBlur: (value: Stitches.PropertyValue<'background'>) => {
            bf: string;
            bg: {
                readonly [Stitches.$$PropertyValue]: "background";
            };
        };
        bgColor: (value: Stitches.PropertyValue<'backgroundColor'>) => {
            backgroundColor: {
                readonly [Stitches.$$PropertyValue]: "backgroundColor";
            };
        };
        backgroundClip: (value: Stitches.PropertyValue<'backgroundClip'>) => {
            WebkitBackgroundClip: {
                readonly [Stitches.$$PropertyValue]: "backgroundClip";
            };
            backgroundClip: {
                readonly [Stitches.$$PropertyValue]: "backgroundClip";
            };
        };
        bgClip: (value: Stitches.PropertyValue<'backgroundClip'>) => {
            WebkitBackgroundClip: {
                readonly [Stitches.$$PropertyValue]: "backgroundClip";
            };
            backgroundClip: {
                readonly [Stitches.$$PropertyValue]: "backgroundClip";
            };
        };
        br: (value: Stitches.PropertyValue<'borderRadius'>) => {
            borderRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
        };
        bw: (value: Stitches.PropertyValue<'borderWidth'>) => {
            borderWidth: {
                readonly [Stitches.$$PropertyValue]: "borderWidth";
            };
        };
        btrr: (value: Stitches.PropertyValue<'borderTopRightRadius'>) => {
            borderTopRightRadius: {
                readonly [Stitches.$$PropertyValue]: "borderTopRightRadius";
            };
        };
        bbrr: (value: Stitches.PropertyValue<'borderBottomRightRadius'>) => {
            borderBottomRightRadius: {
                readonly [Stitches.$$PropertyValue]: "borderBottomRightRadius";
            };
        };
        bblr: (value: Stitches.PropertyValue<'borderBottomLeftRadius'>) => {
            borderBottomLeftRadius: {
                readonly [Stitches.$$PropertyValue]: "borderBottomLeftRadius";
            };
        };
        btlr: (value: Stitches.PropertyValue<'borderTopLeftRadius'>) => {
            borderTopLeftRadius: {
                readonly [Stitches.$$PropertyValue]: "borderTopLeftRadius";
            };
        };
        bs: (value: Stitches.PropertyValue<'boxShadow'>) => {
            boxShadow: {
                readonly [Stitches.$$PropertyValue]: "boxShadow";
            };
        };
        normalShadow: (value: keyof typeof colors) => {
            boxShadow: string;
        };
        lh: (value: Stitches.PropertyValue<'lineHeight'>) => {
            lineHeight: {
                readonly [Stitches.$$PropertyValue]: "lineHeight";
            };
        };
        ov: (value: Stitches.PropertyValue<'overflow'>) => {
            overflow: {
                readonly [Stitches.$$PropertyValue]: "overflow";
            };
        };
        ox: (value: Stitches.PropertyValue<'overflowX'>) => {
            overflowX: {
                readonly [Stitches.$$PropertyValue]: "overflowX";
            };
        };
        oy: (value: Stitches.PropertyValue<'overflowY'>) => {
            overflowY: {
                readonly [Stitches.$$PropertyValue]: "overflowY";
            };
        };
        pe: (value: Stitches.PropertyValue<'pointerEvents'>) => {
            pointerEvents: {
                readonly [Stitches.$$PropertyValue]: "pointerEvents";
            };
        };
        events: (value: Stitches.PropertyValue<'pointerEvents'>) => {
            pointerEvents: {
                readonly [Stitches.$$PropertyValue]: "pointerEvents";
            };
        };
        us: (value: Stitches.PropertyValue<'userSelect'>) => {
            WebkitUserSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
            userSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
        };
        userSelect: (value: Stitches.PropertyValue<'userSelect'>) => {
            WebkitUserSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
            userSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
        };
        w: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            width: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        h: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            height: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        minW: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            minWidth: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        minH: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            minWidth: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        mw: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            maxWidth: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        maxW: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            maxWidth: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        mh: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            maxHeight: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        maxH: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            maxHeight: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        size: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            width: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            height: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        minSize: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            minWidth: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            minHeight: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            width: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            height: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        sizeMin: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            minWidth: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            minHeight: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            width: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            height: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        maxSize: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            maxWidth: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            maxHeight: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        sizeMax: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            maxWidth: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            maxHeight: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        appearance: (value: Stitches.PropertyValue<'appearance'>) => {
            WebkitAppearance: {
                readonly [Stitches.$$PropertyValue]: "appearance";
            };
            appearance: {
                readonly [Stitches.$$PropertyValue]: "appearance";
            };
        };
        scale: (value: string) => {
            transform: string;
        };
        linearGradient: (value: string) => {
            backgroundImage: string;
        };
        tdl: (value: Stitches.PropertyValue<'textDecorationLine'>) => {
            textDecorationLine: {
                readonly [Stitches.$$PropertyValue]: "textDecorationLine";
            };
        };
        textGradient: (value: string) => {
            backgroundImage: string;
            WebkitBackgroundClip: string;
            WebkitTextFillColor: string;
        };
    }>;
} : K extends `@property ${string}` ? import("@stitches/core/types/css").AtRule.Property : import("@stitches/core/types/css-util").CSS<{
    xs: "(min-width: 576px)";
    sm: "(min-width: 768px)";
    md: "(min-width: 992px)";
    lg: "(min-width: 1200px)";
    xl: "(min-width: 1400px)";
}, {
    colors: {
        dark50: any;
        dark100: any;
        dark200: any;
        dark300: any;
        dark400: any;
        dark500: any;
        dark600: any;
        dark700: any;
        dark800: any;
        dark900: any;
        gray50: any;
        gray100: any;
        gray200: any;
        gray300: any;
        gray400: any;
        gray500: any;
        gray600: any;
        gray700: any;
        gray800: any;
        gray900: any;
        red50: any;
        red100: any;
        red200: any;
        red300: any;
        red400: any;
        red500: any;
        red600: any;
        red700: any;
        red800: any;
        red900: any;
        pink50: any;
        pink100: any;
        pink200: any;
        pink300: any;
        pink400: any;
        pink500: any;
        pink600: any;
        pink700: any;
        pink800: any;
        pink900: any;
        grape50: any;
        grape100: any;
        grape200: any;
        grape300: any;
        grape400: any;
        grape500: any;
        grape600: any;
        grape700: any;
        grape800: any;
        grape900: any;
        violet50: any;
        violet100: any;
        violet200: any;
        violet300: any;
        violet400: any;
        violet500: any;
        violet600: any;
        violet700: any;
        violet800: any;
        violet900: any;
        indigo50: any;
        indigo100: any;
        indigo200: any;
        indigo300: any;
        indigo400: any;
        indigo500: any;
        indigo600: any;
        indigo700: any;
        indigo800: any;
        indigo900: any;
        blue50: any;
        blue100: any;
        blue200: any;
        blue300: any;
        blue400: any;
        blue500: any;
        blue600: any;
        blue700: any;
        blue800: any;
        blue900: any;
        cyan50: any;
        cyan100: any;
        cyan200: any;
        cyan300: any;
        cyan400: any;
        cyan500: any;
        cyan600: any;
        cyan700: any;
        cyan800: any;
        cyan900: any;
        teal50: any;
        teal100: any;
        teal200: any;
        teal300: any;
        teal400: any;
        teal500: any;
        teal600: any;
        teal700: any;
        teal800: any;
        teal900: any;
        green50: any;
        green100: any;
        green200: any;
        green300: any;
        green400: any;
        green500: any;
        green600: any;
        green700: any;
        green800: any;
        green900: any;
        lime50: any;
        lime100: any;
        lime200: any;
        lime300: any;
        lime400: any;
        lime500: any;
        lime600: any;
        lime700: any;
        lime800: any;
        lime900: any;
        yellow50: any;
        yellow100: any;
        yellow200: any;
        yellow300: any;
        yellow400: any;
        yellow500: any;
        yellow600: any;
        yellow700: any;
        yellow800: any;
        yellow900: any;
        orange50: any;
        orange100: any;
        orange200: any;
        orange300: any;
        orange400: any;
        orange500: any;
        orange600: any;
        orange700: any;
        orange800: any;
        orange900: any;
        primary: any;
        white: any;
        black: any;
    };
    space: {
        0: string;
        xs: number;
        sm: number;
        md: number;
        lg: number;
        xl: number;
        xsPX: string;
        smPX: string;
        mdPX: string;
        lgPX: string;
        xlPX: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    fontSizes: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    fonts: {
        standard: string;
        mono: string;
        fallback: string;
    };
    fontWeights: {
        thin: number;
        extralight: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
        extrabold: number;
    };
    lineHeights: {
        xs: number;
        sm: number;
        md: number;
        lg: number;
        xl: number;
    };
    letterSpacings: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
        wider: string;
        widest: string;
    };
    sizes: unknown;
    radii: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        squared: string;
        rounded: string;
        pill: string;
    };
    shadows: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    zIndices: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        10: string;
        max: string;
    };
    borderWidths: {
        light: string;
        normal: string;
        bold: string;
        extrabold: string;
        black: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    breakpoints: {
        xs: number;
        sm: number;
        md: number;
        lg: number;
        xl: number;
    };
    borderStyles: unknown;
    transitions: unknown;
}, {
    width: "space";
    height: "space";
    minWidth: "space";
    maxWidth: "space";
    minHeight: "space";
    maxHeight: "space";
    flexBasis: "space";
    gridTemplateColumns: "space";
    gridTemplateRows: "space";
    blockSize: "space";
    minBlockSize: "space";
    maxBlockSize: "space";
    inlineSize: "space";
    minInlineSize: "space";
    maxInlineSize: "space";
    borderWidth: "borderWeights";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {
    focusRing: (value: 'auto' | 'always' | 'never') => {
        WebkitTapHighlightColor: string;
        '&:focus': {
            outlineOffset: number;
            outline: string;
        };
        '&:focus:not(:focus-visible)': {
            outline: string;
        };
    };
    p: (value: Stitches.ScaleValue<'space'>) => {
        padding: {
            readonly [Stitches.$$ScaleValue]: "space";
        };
    };
    pt: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        paddingTop: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    pr: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        paddingRight: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    pb: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        paddingBottom: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    pl: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        paddingLeft: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    px: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        paddingLeft: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
        paddingRight: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    py: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        paddingTop: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
        paddingBottom: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    m: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        margin: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    mt: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        marginTop: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    mr: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        marginRight: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    mb: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        marginBottom: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    ml: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        marginLeft: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    mx: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        marginLeft: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
        marginRight: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    my: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        marginTop: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
        marginBottom: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    ta: (value: Stitches.PropertyValue<'textAlign'>) => {
        textAlign: {
            readonly [Stitches.$$PropertyValue]: "textAlign";
        };
    };
    tt: (value: Stitches.PropertyValue<'textTransform'>) => {
        textTransform: {
            readonly [Stitches.$$PropertyValue]: "textTransform";
        };
    };
    to: (value: Stitches.PropertyValue<'textOverflow'>) => {
        textOverflow: {
            readonly [Stitches.$$PropertyValue]: "textOverflow";
        };
    };
    d: (value: Stitches.PropertyValue<'display'>) => {
        display: {
            readonly [Stitches.$$PropertyValue]: "display";
        };
    };
    dflex: (value: Stitches.PropertyValue<'alignItems' | 'justifyContent'>) => {
        display: string;
        alignItems: {
            readonly [Stitches.$$PropertyValue]: "alignItems" | "justifyContent";
        };
        justifyContent: {
            readonly [Stitches.$$PropertyValue]: "alignItems" | "justifyContent";
        };
    };
    fd: (value: Stitches.PropertyValue<'flexDirection'>) => {
        flexDirection: {
            readonly [Stitches.$$PropertyValue]: "flexDirection";
        };
    };
    fw: (value: Stitches.PropertyValue<'flexWrap'>) => {
        flexWrap: {
            readonly [Stitches.$$PropertyValue]: "flexWrap";
        };
    };
    ai: (value: Stitches.PropertyValue<'alignItems'>) => {
        alignItems: {
            readonly [Stitches.$$PropertyValue]: "alignItems";
        };
    };
    ac: (value: Stitches.PropertyValue<'alignContent'>) => {
        alignContent: {
            readonly [Stitches.$$PropertyValue]: "alignContent";
        };
    };
    jc: (value: Stitches.PropertyValue<'justifyContent'>) => {
        justifyContent: {
            readonly [Stitches.$$PropertyValue]: "justifyContent";
        };
    };
    as: (value: Stitches.PropertyValue<'alignSelf'>) => {
        alignSelf: {
            readonly [Stitches.$$PropertyValue]: "alignSelf";
        };
    };
    fg: (value: Stitches.PropertyValue<'flexGrow'>) => {
        flexGrow: {
            readonly [Stitches.$$PropertyValue]: "flexGrow";
        };
    };
    fs: (value: Stitches.PropertyValue<'fontSize'>) => {
        fontSize: {
            readonly [Stitches.$$PropertyValue]: "fontSize";
        };
    };
    fb: (value: Stitches.PropertyValue<'flexBasis'>) => {
        flexBasis: {
            readonly [Stitches.$$PropertyValue]: "flexBasis";
        };
    };
    bc: (value: Stitches.PropertyValue<'backgroundColor'>) => {
        backgroundColor: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        };
    };
    bf: (value: Stitches.PropertyValue<'backdropFilter'>) => {
        backdropFilter: {
            readonly [Stitches.$$PropertyValue]: "backdropFilter";
        };
    };
    bg: (value: Stitches.PropertyValue<'background'>) => {
        background: {
            readonly [Stitches.$$PropertyValue]: "background";
        };
    };
    bgBlur: (value: Stitches.PropertyValue<'background'>) => {
        bf: string;
        bg: {
            readonly [Stitches.$$PropertyValue]: "background";
        };
    };
    bgColor: (value: Stitches.PropertyValue<'backgroundColor'>) => {
        backgroundColor: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        };
    };
    backgroundClip: (value: Stitches.PropertyValue<'backgroundClip'>) => {
        WebkitBackgroundClip: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        };
        backgroundClip: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        };
    };
    bgClip: (value: Stitches.PropertyValue<'backgroundClip'>) => {
        WebkitBackgroundClip: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        };
        backgroundClip: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        };
    };
    br: (value: Stitches.PropertyValue<'borderRadius'>) => {
        borderRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
    };
    bw: (value: Stitches.PropertyValue<'borderWidth'>) => {
        borderWidth: {
            readonly [Stitches.$$PropertyValue]: "borderWidth";
        };
    };
    btrr: (value: Stitches.PropertyValue<'borderTopRightRadius'>) => {
        borderTopRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderTopRightRadius";
        };
    };
    bbrr: (value: Stitches.PropertyValue<'borderBottomRightRadius'>) => {
        borderBottomRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderBottomRightRadius";
        };
    };
    bblr: (value: Stitches.PropertyValue<'borderBottomLeftRadius'>) => {
        borderBottomLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderBottomLeftRadius";
        };
    };
    btlr: (value: Stitches.PropertyValue<'borderTopLeftRadius'>) => {
        borderTopLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderTopLeftRadius";
        };
    };
    bs: (value: Stitches.PropertyValue<'boxShadow'>) => {
        boxShadow: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        };
    };
    normalShadow: (value: keyof typeof colors) => {
        boxShadow: string;
    };
    lh: (value: Stitches.PropertyValue<'lineHeight'>) => {
        lineHeight: {
            readonly [Stitches.$$PropertyValue]: "lineHeight";
        };
    };
    ov: (value: Stitches.PropertyValue<'overflow'>) => {
        overflow: {
            readonly [Stitches.$$PropertyValue]: "overflow";
        };
    };
    ox: (value: Stitches.PropertyValue<'overflowX'>) => {
        overflowX: {
            readonly [Stitches.$$PropertyValue]: "overflowX";
        };
    };
    oy: (value: Stitches.PropertyValue<'overflowY'>) => {
        overflowY: {
            readonly [Stitches.$$PropertyValue]: "overflowY";
        };
    };
    pe: (value: Stitches.PropertyValue<'pointerEvents'>) => {
        pointerEvents: {
            readonly [Stitches.$$PropertyValue]: "pointerEvents";
        };
    };
    events: (value: Stitches.PropertyValue<'pointerEvents'>) => {
        pointerEvents: {
            readonly [Stitches.$$PropertyValue]: "pointerEvents";
        };
    };
    us: (value: Stitches.PropertyValue<'userSelect'>) => {
        WebkitUserSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
    };
    userSelect: (value: Stitches.PropertyValue<'userSelect'>) => {
        WebkitUserSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
    };
    w: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        width: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    h: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        height: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    minW: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        minWidth: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    minH: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        minWidth: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    mw: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        maxWidth: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    maxW: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        maxWidth: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    mh: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        maxHeight: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    maxH: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        maxHeight: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    size: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        width: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
        height: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    minSize: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        minWidth: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
        minHeight: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
        width: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
        height: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    sizeMin: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        minWidth: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
        minHeight: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
        width: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
        height: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    maxSize: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        maxWidth: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
        maxHeight: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    sizeMax: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
        maxWidth: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
        maxHeight: LiteralUnion<{
            readonly [Stitches.$$ScaleValue]: "space";
        }, string | number>;
    };
    appearance: (value: Stitches.PropertyValue<'appearance'>) => {
        WebkitAppearance: {
            readonly [Stitches.$$PropertyValue]: "appearance";
        };
        appearance: {
            readonly [Stitches.$$PropertyValue]: "appearance";
        };
    };
    scale: (value: string) => {
        transform: string;
    };
    linearGradient: (value: string) => {
        backgroundImage: string;
    };
    tdl: (value: Stitches.PropertyValue<'textDecorationLine'>) => {
        textDecorationLine: {
            readonly [Stitches.$$PropertyValue]: "textDecorationLine";
        };
    };
    textGradient: (value: string) => {
        backgroundImage: string;
        WebkitBackgroundClip: string;
        WebkitTextFillColor: string;
    };
}>; })[]) => () => string, keyframes: (style: {
    [offset: string]: import("@stitches/core/types/css-util").CSS<{
        xs: "(min-width: 576px)";
        sm: "(min-width: 768px)";
        md: "(min-width: 992px)";
        lg: "(min-width: 1200px)";
        xl: "(min-width: 1400px)";
    }, {
        colors: {
            dark50: any;
            dark100: any;
            dark200: any;
            dark300: any;
            dark400: any;
            dark500: any;
            dark600: any;
            dark700: any;
            dark800: any;
            dark900: any;
            gray50: any;
            gray100: any;
            gray200: any;
            gray300: any;
            gray400: any;
            gray500: any;
            gray600: any;
            gray700: any;
            gray800: any;
            gray900: any;
            red50: any;
            red100: any;
            red200: any;
            red300: any;
            red400: any;
            red500: any;
            red600: any;
            red700: any;
            red800: any;
            red900: any;
            pink50: any;
            pink100: any;
            pink200: any;
            pink300: any;
            pink400: any;
            pink500: any;
            pink600: any;
            pink700: any;
            pink800: any;
            pink900: any;
            grape50: any;
            grape100: any;
            grape200: any;
            grape300: any;
            grape400: any;
            grape500: any;
            grape600: any;
            grape700: any;
            grape800: any;
            grape900: any;
            violet50: any;
            violet100: any;
            violet200: any;
            violet300: any;
            violet400: any;
            violet500: any;
            violet600: any;
            violet700: any;
            violet800: any;
            violet900: any;
            indigo50: any;
            indigo100: any;
            indigo200: any;
            indigo300: any;
            indigo400: any;
            indigo500: any;
            indigo600: any;
            indigo700: any;
            indigo800: any;
            indigo900: any;
            blue50: any;
            blue100: any;
            blue200: any;
            blue300: any;
            blue400: any;
            blue500: any;
            blue600: any;
            blue700: any;
            blue800: any;
            blue900: any;
            cyan50: any;
            cyan100: any;
            cyan200: any;
            cyan300: any;
            cyan400: any;
            cyan500: any;
            cyan600: any;
            cyan700: any;
            cyan800: any;
            cyan900: any;
            teal50: any;
            teal100: any;
            teal200: any;
            teal300: any;
            teal400: any;
            teal500: any;
            teal600: any;
            teal700: any;
            teal800: any;
            teal900: any;
            green50: any;
            green100: any;
            green200: any;
            green300: any;
            green400: any;
            green500: any;
            green600: any;
            green700: any;
            green800: any;
            green900: any;
            lime50: any;
            lime100: any;
            lime200: any;
            lime300: any;
            lime400: any;
            lime500: any;
            lime600: any;
            lime700: any;
            lime800: any;
            lime900: any;
            yellow50: any;
            yellow100: any;
            yellow200: any;
            yellow300: any;
            yellow400: any;
            yellow500: any;
            yellow600: any;
            yellow700: any;
            yellow800: any;
            yellow900: any;
            orange50: any;
            orange100: any;
            orange200: any;
            orange300: any;
            orange400: any;
            orange500: any;
            orange600: any;
            orange700: any;
            orange800: any;
            orange900: any;
            primary: any;
            white: any;
            black: any;
        };
        space: {
            0: string;
            xs: number;
            sm: number;
            md: number;
            lg: number;
            xl: number;
            xsPX: string;
            smPX: string;
            mdPX: string;
            lgPX: string;
            xlPX: string;
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
            13: string;
            14: string;
            15: string;
            16: string;
            17: string;
            18: string;
            20: string;
            24: string;
            28: string;
            32: string;
            36: string;
            40: string;
            44: string;
            48: string;
            52: string;
            56: string;
            60: string;
            64: string;
            72: string;
            80: string;
            96: string;
        };
        fontSizes: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
        fonts: {
            standard: string;
            mono: string;
            fallback: string;
        };
        fontWeights: {
            thin: number;
            extralight: number;
            light: number;
            normal: number;
            medium: number;
            semibold: number;
            bold: number;
            extrabold: number;
        };
        lineHeights: {
            xs: number;
            sm: number;
            md: number;
            lg: number;
            xl: number;
        };
        letterSpacings: {
            tighter: string;
            tight: string;
            normal: string;
            wide: string;
            wider: string;
            widest: string;
        };
        sizes: unknown;
        radii: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            squared: string;
            rounded: string;
            pill: string;
        };
        shadows: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
        zIndices: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            10: string;
            max: string;
        };
        borderWidths: {
            light: string;
            normal: string;
            bold: string;
            extrabold: string;
            black: string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
        breakpoints: {
            xs: number;
            sm: number;
            md: number;
            lg: number;
            xl: number;
        };
        borderStyles: unknown;
        transitions: unknown;
    }, {
        width: "space";
        height: "space";
        minWidth: "space";
        maxWidth: "space";
        minHeight: "space";
        maxHeight: "space";
        flexBasis: "space";
        gridTemplateColumns: "space";
        gridTemplateRows: "space";
        blockSize: "space";
        minBlockSize: "space";
        maxBlockSize: "space";
        inlineSize: "space";
        minInlineSize: "space";
        maxInlineSize: "space";
        borderWidth: "borderWeights";
        gap: "space";
        gridGap: "space";
        columnGap: "space";
        gridColumnGap: "space";
        rowGap: "space";
        gridRowGap: "space";
        inset: "space";
        insetBlock: "space";
        insetBlockEnd: "space";
        insetBlockStart: "space";
        insetInline: "space";
        insetInlineEnd: "space";
        insetInlineStart: "space";
        margin: "space";
        marginTop: "space";
        marginRight: "space";
        marginBottom: "space";
        marginLeft: "space";
        marginBlock: "space";
        marginBlockEnd: "space";
        marginBlockStart: "space";
        marginInline: "space";
        marginInlineEnd: "space";
        marginInlineStart: "space";
        padding: "space";
        paddingTop: "space";
        paddingRight: "space";
        paddingBottom: "space";
        paddingLeft: "space";
        paddingBlock: "space";
        paddingBlockEnd: "space";
        paddingBlockStart: "space";
        paddingInline: "space";
        paddingInlineEnd: "space";
        paddingInlineStart: "space";
        scrollMargin: "space";
        scrollMarginTop: "space";
        scrollMarginRight: "space";
        scrollMarginBottom: "space";
        scrollMarginLeft: "space";
        scrollMarginBlock: "space";
        scrollMarginBlockEnd: "space";
        scrollMarginBlockStart: "space";
        scrollMarginInline: "space";
        scrollMarginInlineEnd: "space";
        scrollMarginInlineStart: "space";
        scrollPadding: "space";
        scrollPaddingTop: "space";
        scrollPaddingRight: "space";
        scrollPaddingBottom: "space";
        scrollPaddingLeft: "space";
        scrollPaddingBlock: "space";
        scrollPaddingBlockEnd: "space";
        scrollPaddingBlockStart: "space";
        scrollPaddingInline: "space";
        scrollPaddingInlineEnd: "space";
        scrollPaddingInlineStart: "space";
        top: "space";
        right: "space";
        bottom: "space";
        left: "space";
        fontSize: "fontSizes";
        background: "colors";
        backgroundColor: "colors";
        backgroundImage: "colors";
        borderImage: "colors";
        border: "colors";
        borderBlock: "colors";
        borderBlockEnd: "colors";
        borderBlockStart: "colors";
        borderBottom: "colors";
        borderBottomColor: "colors";
        borderColor: "colors";
        borderInline: "colors";
        borderInlineEnd: "colors";
        borderInlineStart: "colors";
        borderLeft: "colors";
        borderLeftColor: "colors";
        borderRight: "colors";
        borderRightColor: "colors";
        borderTop: "colors";
        borderTopColor: "colors";
        caretColor: "colors";
        color: "colors";
        columnRuleColor: "colors";
        outline: "colors";
        outlineColor: "colors";
        fill: "colors";
        stroke: "colors";
        textDecorationColor: "colors";
        fontFamily: "fonts";
        fontWeight: "fontWeights";
        lineHeight: "lineHeights";
        letterSpacing: "letterSpacings";
        borderTopWidth: "borderWidths";
        borderLeftWidth: "borderWidths";
        borderRightWidth: "borderWidths";
        borderBottomWidth: "borderWidths";
        borderStyle: "borderStyles";
        borderTopStyle: "borderStyles";
        borderLeftStyle: "borderStyles";
        borderRightStyle: "borderStyles";
        borderBottomStyle: "borderStyles";
        borderRadius: "radii";
        borderTopLeftRadius: "radii";
        borderTopRightRadius: "radii";
        borderBottomRightRadius: "radii";
        borderBottomLeftRadius: "radii";
        boxShadow: "shadows";
        textShadow: "shadows";
        transition: "transitions";
        zIndex: "zIndices";
    }, {
        focusRing: (value: 'auto' | 'always' | 'never') => {
            WebkitTapHighlightColor: string;
            '&:focus': {
                outlineOffset: number;
                outline: string;
            };
            '&:focus:not(:focus-visible)': {
                outline: string;
            };
        };
        p: (value: Stitches.ScaleValue<'space'>) => {
            padding: {
                readonly [Stitches.$$ScaleValue]: "space";
            };
        };
        pt: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            paddingTop: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        pr: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            paddingRight: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        pb: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            paddingBottom: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        pl: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            paddingLeft: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        px: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            paddingLeft: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            paddingRight: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        py: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            paddingTop: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            paddingBottom: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        m: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            margin: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        mt: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            marginTop: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        mr: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            marginRight: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        mb: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            marginBottom: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        ml: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            marginLeft: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        mx: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            marginLeft: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            marginRight: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        my: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            marginTop: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            marginBottom: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        ta: (value: Stitches.PropertyValue<'textAlign'>) => {
            textAlign: {
                readonly [Stitches.$$PropertyValue]: "textAlign";
            };
        };
        tt: (value: Stitches.PropertyValue<'textTransform'>) => {
            textTransform: {
                readonly [Stitches.$$PropertyValue]: "textTransform";
            };
        };
        to: (value: Stitches.PropertyValue<'textOverflow'>) => {
            textOverflow: {
                readonly [Stitches.$$PropertyValue]: "textOverflow";
            };
        };
        d: (value: Stitches.PropertyValue<'display'>) => {
            display: {
                readonly [Stitches.$$PropertyValue]: "display";
            };
        };
        dflex: (value: Stitches.PropertyValue<'alignItems' | 'justifyContent'>) => {
            display: string;
            alignItems: {
                readonly [Stitches.$$PropertyValue]: "alignItems" | "justifyContent";
            };
            justifyContent: {
                readonly [Stitches.$$PropertyValue]: "alignItems" | "justifyContent";
            };
        };
        fd: (value: Stitches.PropertyValue<'flexDirection'>) => {
            flexDirection: {
                readonly [Stitches.$$PropertyValue]: "flexDirection";
            };
        };
        fw: (value: Stitches.PropertyValue<'flexWrap'>) => {
            flexWrap: {
                readonly [Stitches.$$PropertyValue]: "flexWrap";
            };
        };
        ai: (value: Stitches.PropertyValue<'alignItems'>) => {
            alignItems: {
                readonly [Stitches.$$PropertyValue]: "alignItems";
            };
        };
        ac: (value: Stitches.PropertyValue<'alignContent'>) => {
            alignContent: {
                readonly [Stitches.$$PropertyValue]: "alignContent";
            };
        };
        jc: (value: Stitches.PropertyValue<'justifyContent'>) => {
            justifyContent: {
                readonly [Stitches.$$PropertyValue]: "justifyContent";
            };
        };
        as: (value: Stitches.PropertyValue<'alignSelf'>) => {
            alignSelf: {
                readonly [Stitches.$$PropertyValue]: "alignSelf";
            };
        };
        fg: (value: Stitches.PropertyValue<'flexGrow'>) => {
            flexGrow: {
                readonly [Stitches.$$PropertyValue]: "flexGrow";
            };
        };
        fs: (value: Stitches.PropertyValue<'fontSize'>) => {
            fontSize: {
                readonly [Stitches.$$PropertyValue]: "fontSize";
            };
        };
        fb: (value: Stitches.PropertyValue<'flexBasis'>) => {
            flexBasis: {
                readonly [Stitches.$$PropertyValue]: "flexBasis";
            };
        };
        bc: (value: Stitches.PropertyValue<'backgroundColor'>) => {
            backgroundColor: {
                readonly [Stitches.$$PropertyValue]: "backgroundColor";
            };
        };
        bf: (value: Stitches.PropertyValue<'backdropFilter'>) => {
            backdropFilter: {
                readonly [Stitches.$$PropertyValue]: "backdropFilter";
            };
        };
        bg: (value: Stitches.PropertyValue<'background'>) => {
            background: {
                readonly [Stitches.$$PropertyValue]: "background";
            };
        };
        bgBlur: (value: Stitches.PropertyValue<'background'>) => {
            bf: string;
            bg: {
                readonly [Stitches.$$PropertyValue]: "background";
            };
        };
        bgColor: (value: Stitches.PropertyValue<'backgroundColor'>) => {
            backgroundColor: {
                readonly [Stitches.$$PropertyValue]: "backgroundColor";
            };
        };
        backgroundClip: (value: Stitches.PropertyValue<'backgroundClip'>) => {
            WebkitBackgroundClip: {
                readonly [Stitches.$$PropertyValue]: "backgroundClip";
            };
            backgroundClip: {
                readonly [Stitches.$$PropertyValue]: "backgroundClip";
            };
        };
        bgClip: (value: Stitches.PropertyValue<'backgroundClip'>) => {
            WebkitBackgroundClip: {
                readonly [Stitches.$$PropertyValue]: "backgroundClip";
            };
            backgroundClip: {
                readonly [Stitches.$$PropertyValue]: "backgroundClip";
            };
        };
        br: (value: Stitches.PropertyValue<'borderRadius'>) => {
            borderRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
        };
        bw: (value: Stitches.PropertyValue<'borderWidth'>) => {
            borderWidth: {
                readonly [Stitches.$$PropertyValue]: "borderWidth";
            };
        };
        btrr: (value: Stitches.PropertyValue<'borderTopRightRadius'>) => {
            borderTopRightRadius: {
                readonly [Stitches.$$PropertyValue]: "borderTopRightRadius";
            };
        };
        bbrr: (value: Stitches.PropertyValue<'borderBottomRightRadius'>) => {
            borderBottomRightRadius: {
                readonly [Stitches.$$PropertyValue]: "borderBottomRightRadius";
            };
        };
        bblr: (value: Stitches.PropertyValue<'borderBottomLeftRadius'>) => {
            borderBottomLeftRadius: {
                readonly [Stitches.$$PropertyValue]: "borderBottomLeftRadius";
            };
        };
        btlr: (value: Stitches.PropertyValue<'borderTopLeftRadius'>) => {
            borderTopLeftRadius: {
                readonly [Stitches.$$PropertyValue]: "borderTopLeftRadius";
            };
        };
        bs: (value: Stitches.PropertyValue<'boxShadow'>) => {
            boxShadow: {
                readonly [Stitches.$$PropertyValue]: "boxShadow";
            };
        };
        normalShadow: (value: keyof typeof colors) => {
            boxShadow: string;
        };
        lh: (value: Stitches.PropertyValue<'lineHeight'>) => {
            lineHeight: {
                readonly [Stitches.$$PropertyValue]: "lineHeight";
            };
        };
        ov: (value: Stitches.PropertyValue<'overflow'>) => {
            overflow: {
                readonly [Stitches.$$PropertyValue]: "overflow";
            };
        };
        ox: (value: Stitches.PropertyValue<'overflowX'>) => {
            overflowX: {
                readonly [Stitches.$$PropertyValue]: "overflowX";
            };
        };
        oy: (value: Stitches.PropertyValue<'overflowY'>) => {
            overflowY: {
                readonly [Stitches.$$PropertyValue]: "overflowY";
            };
        };
        pe: (value: Stitches.PropertyValue<'pointerEvents'>) => {
            pointerEvents: {
                readonly [Stitches.$$PropertyValue]: "pointerEvents";
            };
        };
        events: (value: Stitches.PropertyValue<'pointerEvents'>) => {
            pointerEvents: {
                readonly [Stitches.$$PropertyValue]: "pointerEvents";
            };
        };
        us: (value: Stitches.PropertyValue<'userSelect'>) => {
            WebkitUserSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
            userSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
        };
        userSelect: (value: Stitches.PropertyValue<'userSelect'>) => {
            WebkitUserSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
            userSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
        };
        w: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            width: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        h: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            height: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        minW: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            minWidth: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        minH: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            minWidth: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        mw: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            maxWidth: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        maxW: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            maxWidth: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        mh: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            maxHeight: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        maxH: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            maxHeight: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        size: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            width: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            height: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        minSize: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            minWidth: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            minHeight: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            width: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            height: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        sizeMin: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            minWidth: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            minHeight: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            width: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            height: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        maxSize: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            maxWidth: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            maxHeight: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        sizeMax: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            maxWidth: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            maxHeight: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        appearance: (value: Stitches.PropertyValue<'appearance'>) => {
            WebkitAppearance: {
                readonly [Stitches.$$PropertyValue]: "appearance";
            };
            appearance: {
                readonly [Stitches.$$PropertyValue]: "appearance";
            };
        };
        scale: (value: string) => {
            transform: string;
        };
        linearGradient: (value: string) => {
            backgroundImage: string;
        };
        tdl: (value: Stitches.PropertyValue<'textDecorationLine'>) => {
            textDecorationLine: {
                readonly [Stitches.$$PropertyValue]: "textDecorationLine";
            };
        };
        textGradient: (value: string) => {
            backgroundImage: string;
            WebkitBackgroundClip: string;
            WebkitTextFillColor: string;
        };
    }>;
}) => {
    (): string;
    name: string;
}, getCssText: () => string, theme: string & {
    className: string;
    selector: string;
} & {
    colors: {
        dark50: import("@stitches/core/types/theme").Token<"dark50", string, "colors", "svelteui">;
        dark100: import("@stitches/core/types/theme").Token<"dark100", string, "colors", "svelteui">;
        dark200: import("@stitches/core/types/theme").Token<"dark200", string, "colors", "svelteui">;
        dark300: import("@stitches/core/types/theme").Token<"dark300", string, "colors", "svelteui">;
        dark400: import("@stitches/core/types/theme").Token<"dark400", string, "colors", "svelteui">;
        dark500: import("@stitches/core/types/theme").Token<"dark500", string, "colors", "svelteui">;
        dark600: import("@stitches/core/types/theme").Token<"dark600", string, "colors", "svelteui">;
        dark700: import("@stitches/core/types/theme").Token<"dark700", string, "colors", "svelteui">;
        dark800: import("@stitches/core/types/theme").Token<"dark800", string, "colors", "svelteui">;
        dark900: import("@stitches/core/types/theme").Token<"dark900", string, "colors", "svelteui">;
        gray50: import("@stitches/core/types/theme").Token<"gray50", string, "colors", "svelteui">;
        gray100: import("@stitches/core/types/theme").Token<"gray100", string, "colors", "svelteui">;
        gray200: import("@stitches/core/types/theme").Token<"gray200", string, "colors", "svelteui">;
        gray300: import("@stitches/core/types/theme").Token<"gray300", string, "colors", "svelteui">;
        gray400: import("@stitches/core/types/theme").Token<"gray400", string, "colors", "svelteui">;
        gray500: import("@stitches/core/types/theme").Token<"gray500", string, "colors", "svelteui">;
        gray600: import("@stitches/core/types/theme").Token<"gray600", string, "colors", "svelteui">;
        gray700: import("@stitches/core/types/theme").Token<"gray700", string, "colors", "svelteui">;
        gray800: import("@stitches/core/types/theme").Token<"gray800", string, "colors", "svelteui">;
        gray900: import("@stitches/core/types/theme").Token<"gray900", string, "colors", "svelteui">;
        red50: import("@stitches/core/types/theme").Token<"red50", string, "colors", "svelteui">;
        red100: import("@stitches/core/types/theme").Token<"red100", string, "colors", "svelteui">;
        red200: import("@stitches/core/types/theme").Token<"red200", string, "colors", "svelteui">;
        red300: import("@stitches/core/types/theme").Token<"red300", string, "colors", "svelteui">;
        red400: import("@stitches/core/types/theme").Token<"red400", string, "colors", "svelteui">;
        red500: import("@stitches/core/types/theme").Token<"red500", string, "colors", "svelteui">;
        red600: import("@stitches/core/types/theme").Token<"red600", string, "colors", "svelteui">;
        red700: import("@stitches/core/types/theme").Token<"red700", string, "colors", "svelteui">;
        red800: import("@stitches/core/types/theme").Token<"red800", string, "colors", "svelteui">;
        red900: import("@stitches/core/types/theme").Token<"red900", string, "colors", "svelteui">;
        pink50: import("@stitches/core/types/theme").Token<"pink50", string, "colors", "svelteui">;
        pink100: import("@stitches/core/types/theme").Token<"pink100", string, "colors", "svelteui">;
        pink200: import("@stitches/core/types/theme").Token<"pink200", string, "colors", "svelteui">;
        pink300: import("@stitches/core/types/theme").Token<"pink300", string, "colors", "svelteui">;
        pink400: import("@stitches/core/types/theme").Token<"pink400", string, "colors", "svelteui">;
        pink500: import("@stitches/core/types/theme").Token<"pink500", string, "colors", "svelteui">;
        pink600: import("@stitches/core/types/theme").Token<"pink600", string, "colors", "svelteui">;
        pink700: import("@stitches/core/types/theme").Token<"pink700", string, "colors", "svelteui">;
        pink800: import("@stitches/core/types/theme").Token<"pink800", string, "colors", "svelteui">;
        pink900: import("@stitches/core/types/theme").Token<"pink900", string, "colors", "svelteui">;
        grape50: import("@stitches/core/types/theme").Token<"grape50", string, "colors", "svelteui">;
        grape100: import("@stitches/core/types/theme").Token<"grape100", string, "colors", "svelteui">;
        grape200: import("@stitches/core/types/theme").Token<"grape200", string, "colors", "svelteui">;
        grape300: import("@stitches/core/types/theme").Token<"grape300", string, "colors", "svelteui">;
        grape400: import("@stitches/core/types/theme").Token<"grape400", string, "colors", "svelteui">;
        grape500: import("@stitches/core/types/theme").Token<"grape500", string, "colors", "svelteui">;
        grape600: import("@stitches/core/types/theme").Token<"grape600", string, "colors", "svelteui">;
        grape700: import("@stitches/core/types/theme").Token<"grape700", string, "colors", "svelteui">;
        grape800: import("@stitches/core/types/theme").Token<"grape800", string, "colors", "svelteui">;
        grape900: import("@stitches/core/types/theme").Token<"grape900", string, "colors", "svelteui">;
        violet50: import("@stitches/core/types/theme").Token<"violet50", string, "colors", "svelteui">;
        violet100: import("@stitches/core/types/theme").Token<"violet100", string, "colors", "svelteui">;
        violet200: import("@stitches/core/types/theme").Token<"violet200", string, "colors", "svelteui">;
        violet300: import("@stitches/core/types/theme").Token<"violet300", string, "colors", "svelteui">;
        violet400: import("@stitches/core/types/theme").Token<"violet400", string, "colors", "svelteui">;
        violet500: import("@stitches/core/types/theme").Token<"violet500", string, "colors", "svelteui">;
        violet600: import("@stitches/core/types/theme").Token<"violet600", string, "colors", "svelteui">;
        violet700: import("@stitches/core/types/theme").Token<"violet700", string, "colors", "svelteui">;
        violet800: import("@stitches/core/types/theme").Token<"violet800", string, "colors", "svelteui">;
        violet900: import("@stitches/core/types/theme").Token<"violet900", string, "colors", "svelteui">;
        indigo50: import("@stitches/core/types/theme").Token<"indigo50", string, "colors", "svelteui">;
        indigo100: import("@stitches/core/types/theme").Token<"indigo100", string, "colors", "svelteui">;
        indigo200: import("@stitches/core/types/theme").Token<"indigo200", string, "colors", "svelteui">;
        indigo300: import("@stitches/core/types/theme").Token<"indigo300", string, "colors", "svelteui">;
        indigo400: import("@stitches/core/types/theme").Token<"indigo400", string, "colors", "svelteui">;
        indigo500: import("@stitches/core/types/theme").Token<"indigo500", string, "colors", "svelteui">;
        indigo600: import("@stitches/core/types/theme").Token<"indigo600", string, "colors", "svelteui">;
        indigo700: import("@stitches/core/types/theme").Token<"indigo700", string, "colors", "svelteui">;
        indigo800: import("@stitches/core/types/theme").Token<"indigo800", string, "colors", "svelteui">;
        indigo900: import("@stitches/core/types/theme").Token<"indigo900", string, "colors", "svelteui">;
        blue50: import("@stitches/core/types/theme").Token<"blue50", string, "colors", "svelteui">;
        blue100: import("@stitches/core/types/theme").Token<"blue100", string, "colors", "svelteui">;
        blue200: import("@stitches/core/types/theme").Token<"blue200", string, "colors", "svelteui">;
        blue300: import("@stitches/core/types/theme").Token<"blue300", string, "colors", "svelteui">;
        blue400: import("@stitches/core/types/theme").Token<"blue400", string, "colors", "svelteui">;
        blue500: import("@stitches/core/types/theme").Token<"blue500", string, "colors", "svelteui">;
        blue600: import("@stitches/core/types/theme").Token<"blue600", string, "colors", "svelteui">;
        blue700: import("@stitches/core/types/theme").Token<"blue700", string, "colors", "svelteui">;
        blue800: import("@stitches/core/types/theme").Token<"blue800", string, "colors", "svelteui">;
        blue900: import("@stitches/core/types/theme").Token<"blue900", string, "colors", "svelteui">;
        cyan50: import("@stitches/core/types/theme").Token<"cyan50", string, "colors", "svelteui">;
        cyan100: import("@stitches/core/types/theme").Token<"cyan100", string, "colors", "svelteui">;
        cyan200: import("@stitches/core/types/theme").Token<"cyan200", string, "colors", "svelteui">;
        cyan300: import("@stitches/core/types/theme").Token<"cyan300", string, "colors", "svelteui">;
        cyan400: import("@stitches/core/types/theme").Token<"cyan400", string, "colors", "svelteui">;
        cyan500: import("@stitches/core/types/theme").Token<"cyan500", string, "colors", "svelteui">;
        cyan600: import("@stitches/core/types/theme").Token<"cyan600", string, "colors", "svelteui">;
        cyan700: import("@stitches/core/types/theme").Token<"cyan700", string, "colors", "svelteui">;
        cyan800: import("@stitches/core/types/theme").Token<"cyan800", string, "colors", "svelteui">;
        cyan900: import("@stitches/core/types/theme").Token<"cyan900", string, "colors", "svelteui">;
        teal50: import("@stitches/core/types/theme").Token<"teal50", string, "colors", "svelteui">;
        teal100: import("@stitches/core/types/theme").Token<"teal100", string, "colors", "svelteui">;
        teal200: import("@stitches/core/types/theme").Token<"teal200", string, "colors", "svelteui">;
        teal300: import("@stitches/core/types/theme").Token<"teal300", string, "colors", "svelteui">;
        teal400: import("@stitches/core/types/theme").Token<"teal400", string, "colors", "svelteui">;
        teal500: import("@stitches/core/types/theme").Token<"teal500", string, "colors", "svelteui">;
        teal600: import("@stitches/core/types/theme").Token<"teal600", string, "colors", "svelteui">;
        teal700: import("@stitches/core/types/theme").Token<"teal700", string, "colors", "svelteui">;
        teal800: import("@stitches/core/types/theme").Token<"teal800", string, "colors", "svelteui">;
        teal900: import("@stitches/core/types/theme").Token<"teal900", string, "colors", "svelteui">;
        green50: import("@stitches/core/types/theme").Token<"green50", string, "colors", "svelteui">;
        green100: import("@stitches/core/types/theme").Token<"green100", string, "colors", "svelteui">;
        green200: import("@stitches/core/types/theme").Token<"green200", string, "colors", "svelteui">;
        green300: import("@stitches/core/types/theme").Token<"green300", string, "colors", "svelteui">;
        green400: import("@stitches/core/types/theme").Token<"green400", string, "colors", "svelteui">;
        green500: import("@stitches/core/types/theme").Token<"green500", string, "colors", "svelteui">;
        green600: import("@stitches/core/types/theme").Token<"green600", string, "colors", "svelteui">;
        green700: import("@stitches/core/types/theme").Token<"green700", string, "colors", "svelteui">;
        green800: import("@stitches/core/types/theme").Token<"green800", string, "colors", "svelteui">;
        green900: import("@stitches/core/types/theme").Token<"green900", string, "colors", "svelteui">;
        lime50: import("@stitches/core/types/theme").Token<"lime50", string, "colors", "svelteui">;
        lime100: import("@stitches/core/types/theme").Token<"lime100", string, "colors", "svelteui">;
        lime200: import("@stitches/core/types/theme").Token<"lime200", string, "colors", "svelteui">;
        lime300: import("@stitches/core/types/theme").Token<"lime300", string, "colors", "svelteui">;
        lime400: import("@stitches/core/types/theme").Token<"lime400", string, "colors", "svelteui">;
        lime500: import("@stitches/core/types/theme").Token<"lime500", string, "colors", "svelteui">;
        lime600: import("@stitches/core/types/theme").Token<"lime600", string, "colors", "svelteui">;
        lime700: import("@stitches/core/types/theme").Token<"lime700", string, "colors", "svelteui">;
        lime800: import("@stitches/core/types/theme").Token<"lime800", string, "colors", "svelteui">;
        lime900: import("@stitches/core/types/theme").Token<"lime900", string, "colors", "svelteui">;
        yellow50: import("@stitches/core/types/theme").Token<"yellow50", string, "colors", "svelteui">;
        yellow100: import("@stitches/core/types/theme").Token<"yellow100", string, "colors", "svelteui">;
        yellow200: import("@stitches/core/types/theme").Token<"yellow200", string, "colors", "svelteui">;
        yellow300: import("@stitches/core/types/theme").Token<"yellow300", string, "colors", "svelteui">;
        yellow400: import("@stitches/core/types/theme").Token<"yellow400", string, "colors", "svelteui">;
        yellow500: import("@stitches/core/types/theme").Token<"yellow500", string, "colors", "svelteui">;
        yellow600: import("@stitches/core/types/theme").Token<"yellow600", string, "colors", "svelteui">;
        yellow700: import("@stitches/core/types/theme").Token<"yellow700", string, "colors", "svelteui">;
        yellow800: import("@stitches/core/types/theme").Token<"yellow800", string, "colors", "svelteui">;
        yellow900: import("@stitches/core/types/theme").Token<"yellow900", string, "colors", "svelteui">;
        orange50: import("@stitches/core/types/theme").Token<"orange50", string, "colors", "svelteui">;
        orange100: import("@stitches/core/types/theme").Token<"orange100", string, "colors", "svelteui">;
        orange200: import("@stitches/core/types/theme").Token<"orange200", string, "colors", "svelteui">;
        orange300: import("@stitches/core/types/theme").Token<"orange300", string, "colors", "svelteui">;
        orange400: import("@stitches/core/types/theme").Token<"orange400", string, "colors", "svelteui">;
        orange500: import("@stitches/core/types/theme").Token<"orange500", string, "colors", "svelteui">;
        orange600: import("@stitches/core/types/theme").Token<"orange600", string, "colors", "svelteui">;
        orange700: import("@stitches/core/types/theme").Token<"orange700", string, "colors", "svelteui">;
        orange800: import("@stitches/core/types/theme").Token<"orange800", string, "colors", "svelteui">;
        orange900: import("@stitches/core/types/theme").Token<"orange900", string, "colors", "svelteui">;
        primary: import("@stitches/core/types/theme").Token<"primary", string, "colors", "svelteui">;
        white: import("@stitches/core/types/theme").Token<"white", string, "colors", "svelteui">;
        black: import("@stitches/core/types/theme").Token<"black", string, "colors", "svelteui">;
    };
    space: {
        0: import("@stitches/core/types/theme").Token<"0", string, "space", "svelteui">;
        xs: import("@stitches/core/types/theme").Token<"xs", string, "space", "svelteui">;
        sm: import("@stitches/core/types/theme").Token<"sm", string, "space", "svelteui">;
        md: import("@stitches/core/types/theme").Token<"md", string, "space", "svelteui">;
        lg: import("@stitches/core/types/theme").Token<"lg", string, "space", "svelteui">;
        xl: import("@stitches/core/types/theme").Token<"xl", string, "space", "svelteui">;
        xsPX: import("@stitches/core/types/theme").Token<"xsPX", string, "space", "svelteui">;
        smPX: import("@stitches/core/types/theme").Token<"smPX", string, "space", "svelteui">;
        mdPX: import("@stitches/core/types/theme").Token<"mdPX", string, "space", "svelteui">;
        lgPX: import("@stitches/core/types/theme").Token<"lgPX", string, "space", "svelteui">;
        xlPX: import("@stitches/core/types/theme").Token<"xlPX", string, "space", "svelteui">;
        1: import("@stitches/core/types/theme").Token<"1", string, "space", "svelteui">;
        2: import("@stitches/core/types/theme").Token<"2", string, "space", "svelteui">;
        3: import("@stitches/core/types/theme").Token<"3", string, "space", "svelteui">;
        4: import("@stitches/core/types/theme").Token<"4", string, "space", "svelteui">;
        5: import("@stitches/core/types/theme").Token<"5", string, "space", "svelteui">;
        6: import("@stitches/core/types/theme").Token<"6", string, "space", "svelteui">;
        7: import("@stitches/core/types/theme").Token<"7", string, "space", "svelteui">;
        8: import("@stitches/core/types/theme").Token<"8", string, "space", "svelteui">;
        9: import("@stitches/core/types/theme").Token<"9", string, "space", "svelteui">;
        10: import("@stitches/core/types/theme").Token<"10", string, "space", "svelteui">;
        11: import("@stitches/core/types/theme").Token<"11", string, "space", "svelteui">;
        12: import("@stitches/core/types/theme").Token<"12", string, "space", "svelteui">;
        13: import("@stitches/core/types/theme").Token<"13", string, "space", "svelteui">;
        14: import("@stitches/core/types/theme").Token<"14", string, "space", "svelteui">;
        15: import("@stitches/core/types/theme").Token<"15", string, "space", "svelteui">;
        16: import("@stitches/core/types/theme").Token<"16", string, "space", "svelteui">;
        17: import("@stitches/core/types/theme").Token<"17", string, "space", "svelteui">;
        18: import("@stitches/core/types/theme").Token<"18", string, "space", "svelteui">;
        20: import("@stitches/core/types/theme").Token<"20", string, "space", "svelteui">;
        24: import("@stitches/core/types/theme").Token<"24", string, "space", "svelteui">;
        28: import("@stitches/core/types/theme").Token<"28", string, "space", "svelteui">;
        32: import("@stitches/core/types/theme").Token<"32", string, "space", "svelteui">;
        36: import("@stitches/core/types/theme").Token<"36", string, "space", "svelteui">;
        40: import("@stitches/core/types/theme").Token<"40", string, "space", "svelteui">;
        44: import("@stitches/core/types/theme").Token<"44", string, "space", "svelteui">;
        48: import("@stitches/core/types/theme").Token<"48", string, "space", "svelteui">;
        52: import("@stitches/core/types/theme").Token<"52", string, "space", "svelteui">;
        56: import("@stitches/core/types/theme").Token<"56", string, "space", "svelteui">;
        60: import("@stitches/core/types/theme").Token<"60", string, "space", "svelteui">;
        64: import("@stitches/core/types/theme").Token<"64", string, "space", "svelteui">;
        72: import("@stitches/core/types/theme").Token<"72", string, "space", "svelteui">;
        80: import("@stitches/core/types/theme").Token<"80", string, "space", "svelteui">;
        96: import("@stitches/core/types/theme").Token<"96", string, "space", "svelteui">;
    };
    fontSizes: {
        xs: import("@stitches/core/types/theme").Token<"xs", string, "fontSizes", "svelteui">;
        sm: import("@stitches/core/types/theme").Token<"sm", string, "fontSizes", "svelteui">;
        md: import("@stitches/core/types/theme").Token<"md", string, "fontSizes", "svelteui">;
        lg: import("@stitches/core/types/theme").Token<"lg", string, "fontSizes", "svelteui">;
        xl: import("@stitches/core/types/theme").Token<"xl", string, "fontSizes", "svelteui">;
    };
    fonts: {
        standard: import("@stitches/core/types/theme").Token<"standard", string, "fonts", "svelteui">;
        mono: import("@stitches/core/types/theme").Token<"mono", string, "fonts", "svelteui">;
        fallback: import("@stitches/core/types/theme").Token<"fallback", string, "fonts", "svelteui">;
    };
    fontWeights: {
        thin: import("@stitches/core/types/theme").Token<"thin", string, "fontWeights", "svelteui">;
        extralight: import("@stitches/core/types/theme").Token<"extralight", string, "fontWeights", "svelteui">;
        light: import("@stitches/core/types/theme").Token<"light", string, "fontWeights", "svelteui">;
        normal: import("@stitches/core/types/theme").Token<"normal", string, "fontWeights", "svelteui">;
        medium: import("@stitches/core/types/theme").Token<"medium", string, "fontWeights", "svelteui">;
        semibold: import("@stitches/core/types/theme").Token<"semibold", string, "fontWeights", "svelteui">;
        bold: import("@stitches/core/types/theme").Token<"bold", string, "fontWeights", "svelteui">;
        extrabold: import("@stitches/core/types/theme").Token<"extrabold", string, "fontWeights", "svelteui">;
    };
    lineHeights: {
        xs: import("@stitches/core/types/theme").Token<"xs", string, "lineHeights", "svelteui">;
        sm: import("@stitches/core/types/theme").Token<"sm", string, "lineHeights", "svelteui">;
        md: import("@stitches/core/types/theme").Token<"md", string, "lineHeights", "svelteui">;
        lg: import("@stitches/core/types/theme").Token<"lg", string, "lineHeights", "svelteui">;
        xl: import("@stitches/core/types/theme").Token<"xl", string, "lineHeights", "svelteui">;
    };
    letterSpacings: {
        tighter: import("@stitches/core/types/theme").Token<"tighter", string, "letterSpacings", "svelteui">;
        tight: import("@stitches/core/types/theme").Token<"tight", string, "letterSpacings", "svelteui">;
        normal: import("@stitches/core/types/theme").Token<"normal", string, "letterSpacings", "svelteui">;
        wide: import("@stitches/core/types/theme").Token<"wide", string, "letterSpacings", "svelteui">;
        wider: import("@stitches/core/types/theme").Token<"wider", string, "letterSpacings", "svelteui">;
        widest: import("@stitches/core/types/theme").Token<"widest", string, "letterSpacings", "svelteui">;
    };
    sizes: {};
    radii: {
        xs: import("@stitches/core/types/theme").Token<"xs", string, "radii", "svelteui">;
        sm: import("@stitches/core/types/theme").Token<"sm", string, "radii", "svelteui">;
        md: import("@stitches/core/types/theme").Token<"md", string, "radii", "svelteui">;
        lg: import("@stitches/core/types/theme").Token<"lg", string, "radii", "svelteui">;
        xl: import("@stitches/core/types/theme").Token<"xl", string, "radii", "svelteui">;
        squared: import("@stitches/core/types/theme").Token<"squared", string, "radii", "svelteui">;
        rounded: import("@stitches/core/types/theme").Token<"rounded", string, "radii", "svelteui">;
        pill: import("@stitches/core/types/theme").Token<"pill", string, "radii", "svelteui">;
    };
    shadows: {
        xs: import("@stitches/core/types/theme").Token<"xs", string, "shadows", "svelteui">;
        sm: import("@stitches/core/types/theme").Token<"sm", string, "shadows", "svelteui">;
        md: import("@stitches/core/types/theme").Token<"md", string, "shadows", "svelteui">;
        lg: import("@stitches/core/types/theme").Token<"lg", string, "shadows", "svelteui">;
        xl: import("@stitches/core/types/theme").Token<"xl", string, "shadows", "svelteui">;
    };
    zIndices: {
        1: import("@stitches/core/types/theme").Token<"1", string, "zIndices", "svelteui">;
        2: import("@stitches/core/types/theme").Token<"2", string, "zIndices", "svelteui">;
        3: import("@stitches/core/types/theme").Token<"3", string, "zIndices", "svelteui">;
        4: import("@stitches/core/types/theme").Token<"4", string, "zIndices", "svelteui">;
        5: import("@stitches/core/types/theme").Token<"5", string, "zIndices", "svelteui">;
        10: import("@stitches/core/types/theme").Token<"10", string, "zIndices", "svelteui">;
        max: import("@stitches/core/types/theme").Token<"max", string, "zIndices", "svelteui">;
    };
    borderWidths: {
        light: import("@stitches/core/types/theme").Token<"light", string, "borderWidths", "svelteui">;
        normal: import("@stitches/core/types/theme").Token<"normal", string, "borderWidths", "svelteui">;
        bold: import("@stitches/core/types/theme").Token<"bold", string, "borderWidths", "svelteui">;
        extrabold: import("@stitches/core/types/theme").Token<"extrabold", string, "borderWidths", "svelteui">;
        black: import("@stitches/core/types/theme").Token<"black", string, "borderWidths", "svelteui">;
        xs: import("@stitches/core/types/theme").Token<"xs", string, "borderWidths", "svelteui">;
        sm: import("@stitches/core/types/theme").Token<"sm", string, "borderWidths", "svelteui">;
        md: import("@stitches/core/types/theme").Token<"md", string, "borderWidths", "svelteui">;
        lg: import("@stitches/core/types/theme").Token<"lg", string, "borderWidths", "svelteui">;
        xl: import("@stitches/core/types/theme").Token<"xl", string, "borderWidths", "svelteui">;
    };
    breakpoints: {
        xs: import("@stitches/core/types/theme").Token<"xs", string, "breakpoints", "svelteui">;
        sm: import("@stitches/core/types/theme").Token<"sm", string, "breakpoints", "svelteui">;
        md: import("@stitches/core/types/theme").Token<"md", string, "breakpoints", "svelteui">;
        lg: import("@stitches/core/types/theme").Token<"lg", string, "breakpoints", "svelteui">;
        xl: import("@stitches/core/types/theme").Token<"xl", string, "breakpoints", "svelteui">;
    };
    borderStyles: {};
    transitions: {};
}, createTheme: <Argument0 extends string | ({
    colors?: {
        dark50?: string | number | boolean;
        dark100?: string | number | boolean;
        dark200?: string | number | boolean;
        dark300?: string | number | boolean;
        dark400?: string | number | boolean;
        dark500?: string | number | boolean;
        dark600?: string | number | boolean;
        dark700?: string | number | boolean;
        dark800?: string | number | boolean;
        dark900?: string | number | boolean;
        gray50?: string | number | boolean;
        gray100?: string | number | boolean;
        gray200?: string | number | boolean;
        gray300?: string | number | boolean;
        gray400?: string | number | boolean;
        gray500?: string | number | boolean;
        gray600?: string | number | boolean;
        gray700?: string | number | boolean;
        gray800?: string | number | boolean;
        gray900?: string | number | boolean;
        red50?: string | number | boolean;
        red100?: string | number | boolean;
        red200?: string | number | boolean;
        red300?: string | number | boolean;
        red400?: string | number | boolean;
        red500?: string | number | boolean;
        red600?: string | number | boolean;
        red700?: string | number | boolean;
        red800?: string | number | boolean;
        red900?: string | number | boolean;
        pink50?: string | number | boolean;
        pink100?: string | number | boolean;
        pink200?: string | number | boolean;
        pink300?: string | number | boolean;
        pink400?: string | number | boolean;
        pink500?: string | number | boolean;
        pink600?: string | number | boolean;
        pink700?: string | number | boolean;
        pink800?: string | number | boolean;
        pink900?: string | number | boolean;
        grape50?: string | number | boolean;
        grape100?: string | number | boolean;
        grape200?: string | number | boolean;
        grape300?: string | number | boolean;
        grape400?: string | number | boolean;
        grape500?: string | number | boolean;
        grape600?: string | number | boolean;
        grape700?: string | number | boolean;
        grape800?: string | number | boolean;
        grape900?: string | number | boolean;
        violet50?: string | number | boolean;
        violet100?: string | number | boolean;
        violet200?: string | number | boolean;
        violet300?: string | number | boolean;
        violet400?: string | number | boolean;
        violet500?: string | number | boolean;
        violet600?: string | number | boolean;
        violet700?: string | number | boolean;
        violet800?: string | number | boolean;
        violet900?: string | number | boolean;
        indigo50?: string | number | boolean;
        indigo100?: string | number | boolean;
        indigo200?: string | number | boolean;
        indigo300?: string | number | boolean;
        indigo400?: string | number | boolean;
        indigo500?: string | number | boolean;
        indigo600?: string | number | boolean;
        indigo700?: string | number | boolean;
        indigo800?: string | number | boolean;
        indigo900?: string | number | boolean;
        blue50?: string | number | boolean;
        blue100?: string | number | boolean;
        blue200?: string | number | boolean;
        blue300?: string | number | boolean;
        blue400?: string | number | boolean;
        blue500?: string | number | boolean;
        blue600?: string | number | boolean;
        blue700?: string | number | boolean;
        blue800?: string | number | boolean;
        blue900?: string | number | boolean;
        cyan50?: string | number | boolean;
        cyan100?: string | number | boolean;
        cyan200?: string | number | boolean;
        cyan300?: string | number | boolean;
        cyan400?: string | number | boolean;
        cyan500?: string | number | boolean;
        cyan600?: string | number | boolean;
        cyan700?: string | number | boolean;
        cyan800?: string | number | boolean;
        cyan900?: string | number | boolean;
        teal50?: string | number | boolean;
        teal100?: string | number | boolean;
        teal200?: string | number | boolean;
        teal300?: string | number | boolean;
        teal400?: string | number | boolean;
        teal500?: string | number | boolean;
        teal600?: string | number | boolean;
        teal700?: string | number | boolean;
        teal800?: string | number | boolean;
        teal900?: string | number | boolean;
        green50?: string | number | boolean;
        green100?: string | number | boolean;
        green200?: string | number | boolean;
        green300?: string | number | boolean;
        green400?: string | number | boolean;
        green500?: string | number | boolean;
        green600?: string | number | boolean;
        green700?: string | number | boolean;
        green800?: string | number | boolean;
        green900?: string | number | boolean;
        lime50?: string | number | boolean;
        lime100?: string | number | boolean;
        lime200?: string | number | boolean;
        lime300?: string | number | boolean;
        lime400?: string | number | boolean;
        lime500?: string | number | boolean;
        lime600?: string | number | boolean;
        lime700?: string | number | boolean;
        lime800?: string | number | boolean;
        lime900?: string | number | boolean;
        yellow50?: string | number | boolean;
        yellow100?: string | number | boolean;
        yellow200?: string | number | boolean;
        yellow300?: string | number | boolean;
        yellow400?: string | number | boolean;
        yellow500?: string | number | boolean;
        yellow600?: string | number | boolean;
        yellow700?: string | number | boolean;
        yellow800?: string | number | boolean;
        yellow900?: string | number | boolean;
        orange50?: string | number | boolean;
        orange100?: string | number | boolean;
        orange200?: string | number | boolean;
        orange300?: string | number | boolean;
        orange400?: string | number | boolean;
        orange500?: string | number | boolean;
        orange600?: string | number | boolean;
        orange700?: string | number | boolean;
        orange800?: string | number | boolean;
        orange900?: string | number | boolean;
        primary?: string | number | boolean;
        white?: string | number | boolean;
        black?: string | number | boolean;
    };
    space?: {
        0?: string | number | boolean;
        xs?: string | number | boolean;
        sm?: string | number | boolean;
        md?: string | number | boolean;
        lg?: string | number | boolean;
        xl?: string | number | boolean;
        xsPX?: string | number | boolean;
        smPX?: string | number | boolean;
        mdPX?: string | number | boolean;
        lgPX?: string | number | boolean;
        xlPX?: string | number | boolean;
        1?: string | number | boolean;
        2?: string | number | boolean;
        3?: string | number | boolean;
        4?: string | number | boolean;
        5?: string | number | boolean;
        6?: string | number | boolean;
        7?: string | number | boolean;
        8?: string | number | boolean;
        9?: string | number | boolean;
        10?: string | number | boolean;
        11?: string | number | boolean;
        12?: string | number | boolean;
        13?: string | number | boolean;
        14?: string | number | boolean;
        15?: string | number | boolean;
        16?: string | number | boolean;
        17?: string | number | boolean;
        18?: string | number | boolean;
        20?: string | number | boolean;
        24?: string | number | boolean;
        28?: string | number | boolean;
        32?: string | number | boolean;
        36?: string | number | boolean;
        40?: string | number | boolean;
        44?: string | number | boolean;
        48?: string | number | boolean;
        52?: string | number | boolean;
        56?: string | number | boolean;
        60?: string | number | boolean;
        64?: string | number | boolean;
        72?: string | number | boolean;
        80?: string | number | boolean;
        96?: string | number | boolean;
    };
    fontSizes?: {
        xs?: string | number | boolean;
        sm?: string | number | boolean;
        md?: string | number | boolean;
        lg?: string | number | boolean;
        xl?: string | number | boolean;
    };
    fonts?: {
        standard?: string | number | boolean;
        mono?: string | number | boolean;
        fallback?: string | number | boolean;
    };
    fontWeights?: {
        thin?: string | number | boolean;
        extralight?: string | number | boolean;
        light?: string | number | boolean;
        normal?: string | number | boolean;
        medium?: string | number | boolean;
        semibold?: string | number | boolean;
        bold?: string | number | boolean;
        extrabold?: string | number | boolean;
    };
    lineHeights?: {
        xs?: string | number | boolean;
        sm?: string | number | boolean;
        md?: string | number | boolean;
        lg?: string | number | boolean;
        xl?: string | number | boolean;
    };
    letterSpacings?: {
        tighter?: string | number | boolean;
        tight?: string | number | boolean;
        normal?: string | number | boolean;
        wide?: string | number | boolean;
        wider?: string | number | boolean;
        widest?: string | number | boolean;
    };
    sizes?: {};
    radii?: {
        xs?: string | number | boolean;
        sm?: string | number | boolean;
        md?: string | number | boolean;
        lg?: string | number | boolean;
        xl?: string | number | boolean;
        squared?: string | number | boolean;
        rounded?: string | number | boolean;
        pill?: string | number | boolean;
    };
    shadows?: {
        xs?: string | number | boolean;
        sm?: string | number | boolean;
        md?: string | number | boolean;
        lg?: string | number | boolean;
        xl?: string | number | boolean;
    };
    zIndices?: {
        1?: string | number | boolean;
        2?: string | number | boolean;
        3?: string | number | boolean;
        4?: string | number | boolean;
        5?: string | number | boolean;
        10?: string | number | boolean;
        max?: string | number | boolean;
    };
    borderWidths?: {
        light?: string | number | boolean;
        normal?: string | number | boolean;
        bold?: string | number | boolean;
        extrabold?: string | number | boolean;
        black?: string | number | boolean;
        xs?: string | number | boolean;
        sm?: string | number | boolean;
        md?: string | number | boolean;
        lg?: string | number | boolean;
        xl?: string | number | boolean;
    };
    breakpoints?: {
        xs?: string | number | boolean;
        sm?: string | number | boolean;
        md?: string | number | boolean;
        lg?: string | number | boolean;
        xl?: string | number | boolean;
    };
    borderStyles?: {};
    transitions?: {};
} & {
    [x: string]: {
        [x: string]: string | number | boolean;
        [x: number]: string | number | boolean;
    };
}), Argument1 extends string | ({
    colors?: {
        dark50?: string | number | boolean;
        dark100?: string | number | boolean;
        dark200?: string | number | boolean;
        dark300?: string | number | boolean;
        dark400?: string | number | boolean;
        dark500?: string | number | boolean;
        dark600?: string | number | boolean;
        dark700?: string | number | boolean;
        dark800?: string | number | boolean;
        dark900?: string | number | boolean;
        gray50?: string | number | boolean;
        gray100?: string | number | boolean;
        gray200?: string | number | boolean;
        gray300?: string | number | boolean;
        gray400?: string | number | boolean;
        gray500?: string | number | boolean;
        gray600?: string | number | boolean;
        gray700?: string | number | boolean;
        gray800?: string | number | boolean;
        gray900?: string | number | boolean;
        red50?: string | number | boolean;
        red100?: string | number | boolean;
        red200?: string | number | boolean;
        red300?: string | number | boolean;
        red400?: string | number | boolean;
        red500?: string | number | boolean;
        red600?: string | number | boolean;
        red700?: string | number | boolean;
        red800?: string | number | boolean;
        red900?: string | number | boolean;
        pink50?: string | number | boolean;
        pink100?: string | number | boolean;
        pink200?: string | number | boolean;
        pink300?: string | number | boolean;
        pink400?: string | number | boolean;
        pink500?: string | number | boolean;
        pink600?: string | number | boolean;
        pink700?: string | number | boolean;
        pink800?: string | number | boolean;
        pink900?: string | number | boolean;
        grape50?: string | number | boolean;
        grape100?: string | number | boolean;
        grape200?: string | number | boolean;
        grape300?: string | number | boolean;
        grape400?: string | number | boolean;
        grape500?: string | number | boolean;
        grape600?: string | number | boolean;
        grape700?: string | number | boolean;
        grape800?: string | number | boolean;
        grape900?: string | number | boolean;
        violet50?: string | number | boolean;
        violet100?: string | number | boolean;
        violet200?: string | number | boolean;
        violet300?: string | number | boolean;
        violet400?: string | number | boolean;
        violet500?: string | number | boolean;
        violet600?: string | number | boolean;
        violet700?: string | number | boolean;
        violet800?: string | number | boolean;
        violet900?: string | number | boolean;
        indigo50?: string | number | boolean;
        indigo100?: string | number | boolean;
        indigo200?: string | number | boolean;
        indigo300?: string | number | boolean;
        indigo400?: string | number | boolean;
        indigo500?: string | number | boolean;
        indigo600?: string | number | boolean;
        indigo700?: string | number | boolean;
        indigo800?: string | number | boolean;
        indigo900?: string | number | boolean;
        blue50?: string | number | boolean;
        blue100?: string | number | boolean;
        blue200?: string | number | boolean;
        blue300?: string | number | boolean;
        blue400?: string | number | boolean;
        blue500?: string | number | boolean;
        blue600?: string | number | boolean;
        blue700?: string | number | boolean;
        blue800?: string | number | boolean;
        blue900?: string | number | boolean;
        cyan50?: string | number | boolean;
        cyan100?: string | number | boolean;
        cyan200?: string | number | boolean;
        cyan300?: string | number | boolean;
        cyan400?: string | number | boolean;
        cyan500?: string | number | boolean;
        cyan600?: string | number | boolean;
        cyan700?: string | number | boolean;
        cyan800?: string | number | boolean;
        cyan900?: string | number | boolean;
        teal50?: string | number | boolean;
        teal100?: string | number | boolean;
        teal200?: string | number | boolean;
        teal300?: string | number | boolean;
        teal400?: string | number | boolean;
        teal500?: string | number | boolean;
        teal600?: string | number | boolean;
        teal700?: string | number | boolean;
        teal800?: string | number | boolean;
        teal900?: string | number | boolean;
        green50?: string | number | boolean;
        green100?: string | number | boolean;
        green200?: string | number | boolean;
        green300?: string | number | boolean;
        green400?: string | number | boolean;
        green500?: string | number | boolean;
        green600?: string | number | boolean;
        green700?: string | number | boolean;
        green800?: string | number | boolean;
        green900?: string | number | boolean;
        lime50?: string | number | boolean;
        lime100?: string | number | boolean;
        lime200?: string | number | boolean;
        lime300?: string | number | boolean;
        lime400?: string | number | boolean;
        lime500?: string | number | boolean;
        lime600?: string | number | boolean;
        lime700?: string | number | boolean;
        lime800?: string | number | boolean;
        lime900?: string | number | boolean;
        yellow50?: string | number | boolean;
        yellow100?: string | number | boolean;
        yellow200?: string | number | boolean;
        yellow300?: string | number | boolean;
        yellow400?: string | number | boolean;
        yellow500?: string | number | boolean;
        yellow600?: string | number | boolean;
        yellow700?: string | number | boolean;
        yellow800?: string | number | boolean;
        yellow900?: string | number | boolean;
        orange50?: string | number | boolean;
        orange100?: string | number | boolean;
        orange200?: string | number | boolean;
        orange300?: string | number | boolean;
        orange400?: string | number | boolean;
        orange500?: string | number | boolean;
        orange600?: string | number | boolean;
        orange700?: string | number | boolean;
        orange800?: string | number | boolean;
        orange900?: string | number | boolean;
        primary?: string | number | boolean;
        white?: string | number | boolean;
        black?: string | number | boolean;
    };
    space?: {
        0?: string | number | boolean;
        xs?: string | number | boolean;
        sm?: string | number | boolean;
        md?: string | number | boolean;
        lg?: string | number | boolean;
        xl?: string | number | boolean;
        xsPX?: string | number | boolean;
        smPX?: string | number | boolean;
        mdPX?: string | number | boolean;
        lgPX?: string | number | boolean;
        xlPX?: string | number | boolean;
        1?: string | number | boolean;
        2?: string | number | boolean;
        3?: string | number | boolean;
        4?: string | number | boolean;
        5?: string | number | boolean;
        6?: string | number | boolean;
        7?: string | number | boolean;
        8?: string | number | boolean;
        9?: string | number | boolean;
        10?: string | number | boolean;
        11?: string | number | boolean;
        12?: string | number | boolean;
        13?: string | number | boolean;
        14?: string | number | boolean;
        15?: string | number | boolean;
        16?: string | number | boolean;
        17?: string | number | boolean;
        18?: string | number | boolean;
        20?: string | number | boolean;
        24?: string | number | boolean;
        28?: string | number | boolean;
        32?: string | number | boolean;
        36?: string | number | boolean;
        40?: string | number | boolean;
        44?: string | number | boolean;
        48?: string | number | boolean;
        52?: string | number | boolean;
        56?: string | number | boolean;
        60?: string | number | boolean;
        64?: string | number | boolean;
        72?: string | number | boolean;
        80?: string | number | boolean;
        96?: string | number | boolean;
    };
    fontSizes?: {
        xs?: string | number | boolean;
        sm?: string | number | boolean;
        md?: string | number | boolean;
        lg?: string | number | boolean;
        xl?: string | number | boolean;
    };
    fonts?: {
        standard?: string | number | boolean;
        mono?: string | number | boolean;
        fallback?: string | number | boolean;
    };
    fontWeights?: {
        thin?: string | number | boolean;
        extralight?: string | number | boolean;
        light?: string | number | boolean;
        normal?: string | number | boolean;
        medium?: string | number | boolean;
        semibold?: string | number | boolean;
        bold?: string | number | boolean;
        extrabold?: string | number | boolean;
    };
    lineHeights?: {
        xs?: string | number | boolean;
        sm?: string | number | boolean;
        md?: string | number | boolean;
        lg?: string | number | boolean;
        xl?: string | number | boolean;
    };
    letterSpacings?: {
        tighter?: string | number | boolean;
        tight?: string | number | boolean;
        normal?: string | number | boolean;
        wide?: string | number | boolean;
        wider?: string | number | boolean;
        widest?: string | number | boolean;
    };
    sizes?: {};
    radii?: {
        xs?: string | number | boolean;
        sm?: string | number | boolean;
        md?: string | number | boolean;
        lg?: string | number | boolean;
        xl?: string | number | boolean;
        squared?: string | number | boolean;
        rounded?: string | number | boolean;
        pill?: string | number | boolean;
    };
    shadows?: {
        xs?: string | number | boolean;
        sm?: string | number | boolean;
        md?: string | number | boolean;
        lg?: string | number | boolean;
        xl?: string | number | boolean;
    };
    zIndices?: {
        1?: string | number | boolean;
        2?: string | number | boolean;
        3?: string | number | boolean;
        4?: string | number | boolean;
        5?: string | number | boolean;
        10?: string | number | boolean;
        max?: string | number | boolean;
    };
    borderWidths?: {
        light?: string | number | boolean;
        normal?: string | number | boolean;
        bold?: string | number | boolean;
        extrabold?: string | number | boolean;
        black?: string | number | boolean;
        xs?: string | number | boolean;
        sm?: string | number | boolean;
        md?: string | number | boolean;
        lg?: string | number | boolean;
        xl?: string | number | boolean;
    };
    breakpoints?: {
        xs?: string | number | boolean;
        sm?: string | number | boolean;
        md?: string | number | boolean;
        lg?: string | number | boolean;
        xl?: string | number | boolean;
    };
    borderStyles?: {};
    transitions?: {};
} & {
    [x: string]: {
        [x: string]: string | number | boolean;
        [x: number]: string | number | boolean;
    };
})>(nameOrScalesArg0: Argument0, nameOrScalesArg1?: Argument1) => string & {
    className: string;
    selector: string;
} & (Argument0 extends string ? import("@stitches/core/types/stitches").ThemeTokens<Argument1, "svelteui"> : import("@stitches/core/types/stitches").ThemeTokens<Argument0, "svelteui">), config: {
    prefix: "svelteui";
    media: {
        xs: "(min-width: 576px)";
        sm: "(min-width: 768px)";
        md: "(min-width: 992px)";
        lg: "(min-width: 1200px)";
        xl: "(min-width: 1400px)";
    };
    theme: {
        colors: {
            dark50: any;
            dark100: any;
            dark200: any;
            dark300: any;
            dark400: any;
            dark500: any;
            dark600: any;
            dark700: any;
            dark800: any;
            dark900: any;
            gray50: any;
            gray100: any;
            gray200: any;
            gray300: any;
            gray400: any;
            gray500: any;
            gray600: any;
            gray700: any;
            gray800: any;
            gray900: any;
            red50: any;
            red100: any;
            red200: any;
            red300: any;
            red400: any;
            red500: any;
            red600: any;
            red700: any;
            red800: any;
            red900: any;
            pink50: any;
            pink100: any;
            pink200: any;
            pink300: any;
            pink400: any;
            pink500: any;
            pink600: any;
            pink700: any;
            pink800: any;
            pink900: any;
            grape50: any;
            grape100: any;
            grape200: any;
            grape300: any;
            grape400: any;
            grape500: any;
            grape600: any;
            grape700: any;
            grape800: any;
            grape900: any;
            violet50: any;
            violet100: any;
            violet200: any;
            violet300: any;
            violet400: any;
            violet500: any;
            violet600: any;
            violet700: any;
            violet800: any;
            violet900: any;
            indigo50: any;
            indigo100: any;
            indigo200: any;
            indigo300: any;
            indigo400: any;
            indigo500: any;
            indigo600: any;
            indigo700: any;
            indigo800: any;
            indigo900: any;
            blue50: any;
            blue100: any;
            blue200: any;
            blue300: any;
            blue400: any;
            blue500: any;
            blue600: any;
            blue700: any;
            blue800: any;
            blue900: any;
            cyan50: any;
            cyan100: any;
            cyan200: any;
            cyan300: any;
            cyan400: any;
            cyan500: any;
            cyan600: any;
            cyan700: any;
            cyan800: any;
            cyan900: any;
            teal50: any;
            teal100: any;
            teal200: any;
            teal300: any;
            teal400: any;
            teal500: any;
            teal600: any;
            teal700: any;
            teal800: any;
            teal900: any;
            green50: any;
            green100: any;
            green200: any;
            green300: any;
            green400: any;
            green500: any;
            green600: any;
            green700: any;
            green800: any;
            green900: any;
            lime50: any;
            lime100: any;
            lime200: any;
            lime300: any;
            lime400: any;
            lime500: any;
            lime600: any;
            lime700: any;
            lime800: any;
            lime900: any;
            yellow50: any;
            yellow100: any;
            yellow200: any;
            yellow300: any;
            yellow400: any;
            yellow500: any;
            yellow600: any;
            yellow700: any;
            yellow800: any;
            yellow900: any;
            orange50: any;
            orange100: any;
            orange200: any;
            orange300: any;
            orange400: any;
            orange500: any;
            orange600: any;
            orange700: any;
            orange800: any;
            orange900: any;
            primary: any;
            white: any;
            black: any;
        };
        space: {
            0: string;
            xs: number;
            sm: number;
            md: number;
            lg: number;
            xl: number;
            xsPX: string;
            smPX: string;
            mdPX: string;
            lgPX: string;
            xlPX: string;
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
            13: string;
            14: string;
            15: string;
            16: string;
            17: string;
            18: string;
            20: string;
            24: string;
            28: string;
            32: string;
            36: string;
            40: string;
            44: string;
            48: string;
            52: string;
            56: string;
            60: string;
            64: string;
            72: string;
            80: string;
            96: string;
        };
        fontSizes: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
        fonts: {
            standard: string;
            mono: string;
            fallback: string;
        };
        fontWeights: {
            thin: number;
            extralight: number;
            light: number;
            normal: number;
            medium: number;
            semibold: number;
            bold: number;
            extrabold: number;
        };
        lineHeights: {
            xs: number;
            sm: number;
            md: number;
            lg: number;
            xl: number;
        };
        letterSpacings: {
            tighter: string;
            tight: string;
            normal: string;
            wide: string;
            wider: string;
            widest: string;
        };
        sizes: unknown;
        radii: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            squared: string;
            rounded: string;
            pill: string;
        };
        shadows: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
        zIndices: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            10: string;
            max: string;
        };
        borderWidths: {
            light: string;
            normal: string;
            bold: string;
            extrabold: string;
            black: string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
        breakpoints: {
            xs: number;
            sm: number;
            md: number;
            lg: number;
            xl: number;
        };
        borderStyles: unknown;
        transitions: unknown;
    };
    themeMap: {
        width: "space";
        height: "space";
        minWidth: "space";
        maxWidth: "space";
        minHeight: "space";
        maxHeight: "space";
        flexBasis: "space";
        gridTemplateColumns: "space";
        gridTemplateRows: "space";
        blockSize: "space";
        minBlockSize: "space";
        maxBlockSize: "space";
        inlineSize: "space";
        minInlineSize: "space";
        maxInlineSize: "space";
        borderWidth: "borderWeights";
        gap: "space";
        gridGap: "space";
        columnGap: "space";
        gridColumnGap: "space";
        rowGap: "space";
        gridRowGap: "space";
        inset: "space";
        insetBlock: "space";
        insetBlockEnd: "space";
        insetBlockStart: "space";
        insetInline: "space";
        insetInlineEnd: "space";
        insetInlineStart: "space";
        margin: "space";
        marginTop: "space";
        marginRight: "space";
        marginBottom: "space";
        marginLeft: "space";
        marginBlock: "space";
        marginBlockEnd: "space";
        marginBlockStart: "space";
        marginInline: "space";
        marginInlineEnd: "space";
        marginInlineStart: "space";
        padding: "space";
        paddingTop: "space";
        paddingRight: "space";
        paddingBottom: "space";
        paddingLeft: "space";
        paddingBlock: "space";
        paddingBlockEnd: "space";
        paddingBlockStart: "space";
        paddingInline: "space";
        paddingInlineEnd: "space";
        paddingInlineStart: "space";
        scrollMargin: "space";
        scrollMarginTop: "space";
        scrollMarginRight: "space";
        scrollMarginBottom: "space";
        scrollMarginLeft: "space";
        scrollMarginBlock: "space";
        scrollMarginBlockEnd: "space";
        scrollMarginBlockStart: "space";
        scrollMarginInline: "space";
        scrollMarginInlineEnd: "space";
        scrollMarginInlineStart: "space";
        scrollPadding: "space";
        scrollPaddingTop: "space";
        scrollPaddingRight: "space";
        scrollPaddingBottom: "space";
        scrollPaddingLeft: "space";
        scrollPaddingBlock: "space";
        scrollPaddingBlockEnd: "space";
        scrollPaddingBlockStart: "space";
        scrollPaddingInline: "space";
        scrollPaddingInlineEnd: "space";
        scrollPaddingInlineStart: "space";
        top: "space";
        right: "space";
        bottom: "space";
        left: "space";
        fontSize: "fontSizes";
        background: "colors";
        backgroundColor: "colors";
        backgroundImage: "colors";
        borderImage: "colors";
        border: "colors";
        borderBlock: "colors";
        borderBlockEnd: "colors";
        borderBlockStart: "colors";
        borderBottom: "colors";
        borderBottomColor: "colors";
        borderColor: "colors";
        borderInline: "colors";
        borderInlineEnd: "colors";
        borderInlineStart: "colors";
        borderLeft: "colors";
        borderLeftColor: "colors";
        borderRight: "colors";
        borderRightColor: "colors";
        borderTop: "colors";
        borderTopColor: "colors";
        caretColor: "colors";
        color: "colors";
        columnRuleColor: "colors";
        outline: "colors";
        outlineColor: "colors";
        fill: "colors";
        stroke: "colors";
        textDecorationColor: "colors";
        fontFamily: "fonts";
        fontWeight: "fontWeights";
        lineHeight: "lineHeights";
        letterSpacing: "letterSpacings";
        borderTopWidth: "borderWidths";
        borderLeftWidth: "borderWidths";
        borderRightWidth: "borderWidths";
        borderBottomWidth: "borderWidths";
        borderStyle: "borderStyles";
        borderTopStyle: "borderStyles";
        borderLeftStyle: "borderStyles";
        borderRightStyle: "borderStyles";
        borderBottomStyle: "borderStyles";
        borderRadius: "radii";
        borderTopLeftRadius: "radii";
        borderTopRightRadius: "radii";
        borderBottomRightRadius: "radii";
        borderBottomLeftRadius: "radii";
        boxShadow: "shadows";
        textShadow: "shadows";
        transition: "transitions";
        zIndex: "zIndices";
    };
    utils: {
        focusRing: (value: 'auto' | 'always' | 'never') => {
            WebkitTapHighlightColor: string;
            '&:focus': {
                outlineOffset: number;
                outline: string;
            };
            '&:focus:not(:focus-visible)': {
                outline: string;
            };
        };
        p: (value: Stitches.ScaleValue<'space'>) => {
            padding: {
                readonly [Stitches.$$ScaleValue]: "space";
            };
        };
        pt: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            paddingTop: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        pr: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            paddingRight: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        pb: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            paddingBottom: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        pl: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            paddingLeft: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        px: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            paddingLeft: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            paddingRight: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        py: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            paddingTop: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            paddingBottom: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        m: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            margin: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        mt: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            marginTop: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        mr: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            marginRight: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        mb: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            marginBottom: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        ml: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            marginLeft: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        mx: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            marginLeft: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            marginRight: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        my: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            marginTop: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            marginBottom: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        ta: (value: Stitches.PropertyValue<'textAlign'>) => {
            textAlign: {
                readonly [Stitches.$$PropertyValue]: "textAlign";
            };
        };
        tt: (value: Stitches.PropertyValue<'textTransform'>) => {
            textTransform: {
                readonly [Stitches.$$PropertyValue]: "textTransform";
            };
        };
        to: (value: Stitches.PropertyValue<'textOverflow'>) => {
            textOverflow: {
                readonly [Stitches.$$PropertyValue]: "textOverflow";
            };
        };
        d: (value: Stitches.PropertyValue<'display'>) => {
            display: {
                readonly [Stitches.$$PropertyValue]: "display";
            };
        };
        dflex: (value: Stitches.PropertyValue<'alignItems' | 'justifyContent'>) => {
            display: string;
            alignItems: {
                readonly [Stitches.$$PropertyValue]: "alignItems" | "justifyContent";
            };
            justifyContent: {
                readonly [Stitches.$$PropertyValue]: "alignItems" | "justifyContent";
            };
        };
        fd: (value: Stitches.PropertyValue<'flexDirection'>) => {
            flexDirection: {
                readonly [Stitches.$$PropertyValue]: "flexDirection";
            };
        };
        fw: (value: Stitches.PropertyValue<'flexWrap'>) => {
            flexWrap: {
                readonly [Stitches.$$PropertyValue]: "flexWrap";
            };
        };
        ai: (value: Stitches.PropertyValue<'alignItems'>) => {
            alignItems: {
                readonly [Stitches.$$PropertyValue]: "alignItems";
            };
        };
        ac: (value: Stitches.PropertyValue<'alignContent'>) => {
            alignContent: {
                readonly [Stitches.$$PropertyValue]: "alignContent";
            };
        };
        jc: (value: Stitches.PropertyValue<'justifyContent'>) => {
            justifyContent: {
                readonly [Stitches.$$PropertyValue]: "justifyContent";
            };
        };
        as: (value: Stitches.PropertyValue<'alignSelf'>) => {
            alignSelf: {
                readonly [Stitches.$$PropertyValue]: "alignSelf";
            };
        };
        fg: (value: Stitches.PropertyValue<'flexGrow'>) => {
            flexGrow: {
                readonly [Stitches.$$PropertyValue]: "flexGrow";
            };
        };
        fs: (value: Stitches.PropertyValue<'fontSize'>) => {
            fontSize: {
                readonly [Stitches.$$PropertyValue]: "fontSize";
            };
        };
        fb: (value: Stitches.PropertyValue<'flexBasis'>) => {
            flexBasis: {
                readonly [Stitches.$$PropertyValue]: "flexBasis";
            };
        };
        bc: (value: Stitches.PropertyValue<'backgroundColor'>) => {
            backgroundColor: {
                readonly [Stitches.$$PropertyValue]: "backgroundColor";
            };
        };
        bf: (value: Stitches.PropertyValue<'backdropFilter'>) => {
            backdropFilter: {
                readonly [Stitches.$$PropertyValue]: "backdropFilter";
            };
        };
        bg: (value: Stitches.PropertyValue<'background'>) => {
            background: {
                readonly [Stitches.$$PropertyValue]: "background";
            };
        };
        bgBlur: (value: Stitches.PropertyValue<'background'>) => {
            bf: string;
            bg: {
                readonly [Stitches.$$PropertyValue]: "background";
            };
        };
        bgColor: (value: Stitches.PropertyValue<'backgroundColor'>) => {
            backgroundColor: {
                readonly [Stitches.$$PropertyValue]: "backgroundColor";
            };
        };
        backgroundClip: (value: Stitches.PropertyValue<'backgroundClip'>) => {
            WebkitBackgroundClip: {
                readonly [Stitches.$$PropertyValue]: "backgroundClip";
            };
            backgroundClip: {
                readonly [Stitches.$$PropertyValue]: "backgroundClip";
            };
        };
        bgClip: (value: Stitches.PropertyValue<'backgroundClip'>) => {
            WebkitBackgroundClip: {
                readonly [Stitches.$$PropertyValue]: "backgroundClip";
            };
            backgroundClip: {
                readonly [Stitches.$$PropertyValue]: "backgroundClip";
            };
        };
        br: (value: Stitches.PropertyValue<'borderRadius'>) => {
            borderRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
        };
        bw: (value: Stitches.PropertyValue<'borderWidth'>) => {
            borderWidth: {
                readonly [Stitches.$$PropertyValue]: "borderWidth";
            };
        };
        btrr: (value: Stitches.PropertyValue<'borderTopRightRadius'>) => {
            borderTopRightRadius: {
                readonly [Stitches.$$PropertyValue]: "borderTopRightRadius";
            };
        };
        bbrr: (value: Stitches.PropertyValue<'borderBottomRightRadius'>) => {
            borderBottomRightRadius: {
                readonly [Stitches.$$PropertyValue]: "borderBottomRightRadius";
            };
        };
        bblr: (value: Stitches.PropertyValue<'borderBottomLeftRadius'>) => {
            borderBottomLeftRadius: {
                readonly [Stitches.$$PropertyValue]: "borderBottomLeftRadius";
            };
        };
        btlr: (value: Stitches.PropertyValue<'borderTopLeftRadius'>) => {
            borderTopLeftRadius: {
                readonly [Stitches.$$PropertyValue]: "borderTopLeftRadius";
            };
        };
        bs: (value: Stitches.PropertyValue<'boxShadow'>) => {
            boxShadow: {
                readonly [Stitches.$$PropertyValue]: "boxShadow";
            };
        };
        normalShadow: (value: keyof typeof colors) => {
            boxShadow: string;
        };
        lh: (value: Stitches.PropertyValue<'lineHeight'>) => {
            lineHeight: {
                readonly [Stitches.$$PropertyValue]: "lineHeight";
            };
        };
        ov: (value: Stitches.PropertyValue<'overflow'>) => {
            overflow: {
                readonly [Stitches.$$PropertyValue]: "overflow";
            };
        };
        ox: (value: Stitches.PropertyValue<'overflowX'>) => {
            overflowX: {
                readonly [Stitches.$$PropertyValue]: "overflowX";
            };
        };
        oy: (value: Stitches.PropertyValue<'overflowY'>) => {
            overflowY: {
                readonly [Stitches.$$PropertyValue]: "overflowY";
            };
        };
        pe: (value: Stitches.PropertyValue<'pointerEvents'>) => {
            pointerEvents: {
                readonly [Stitches.$$PropertyValue]: "pointerEvents";
            };
        };
        events: (value: Stitches.PropertyValue<'pointerEvents'>) => {
            pointerEvents: {
                readonly [Stitches.$$PropertyValue]: "pointerEvents";
            };
        };
        us: (value: Stitches.PropertyValue<'userSelect'>) => {
            WebkitUserSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
            userSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
        };
        userSelect: (value: Stitches.PropertyValue<'userSelect'>) => {
            WebkitUserSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
            userSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
        };
        w: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            width: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        h: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            height: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        minW: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            minWidth: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        minH: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            minWidth: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        mw: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            maxWidth: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        maxW: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            maxWidth: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        mh: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            maxHeight: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        maxH: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            maxHeight: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        size: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            width: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            height: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        minSize: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            minWidth: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            minHeight: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            width: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            height: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        sizeMin: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            minWidth: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            minHeight: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            width: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            height: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        maxSize: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            maxWidth: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            maxHeight: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        sizeMax: (value: LiteralUnion<Stitches.ScaleValue<'space'>, number | string>) => {
            maxWidth: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
            maxHeight: LiteralUnion<{
                readonly [Stitches.$$ScaleValue]: "space";
            }, string | number>;
        };
        appearance: (value: Stitches.PropertyValue<'appearance'>) => {
            WebkitAppearance: {
                readonly [Stitches.$$PropertyValue]: "appearance";
            };
            appearance: {
                readonly [Stitches.$$PropertyValue]: "appearance";
            };
        };
        scale: (value: string) => {
            transform: string;
        };
        linearGradient: (value: string) => {
            backgroundImage: string;
        };
        tdl: (value: Stitches.PropertyValue<'textDecorationLine'>) => {
            textDecorationLine: {
                readonly [Stitches.$$PropertyValue]: "textDecorationLine";
            };
        };
        textGradient: (value: string) => {
            backgroundImage: string;
            WebkitBackgroundClip: string;
            WebkitTextFillColor: string;
        };
    };
}, reset: () => void;
/** Function for dark theme */
declare const dark: string & {
    className: string;
    selector: string;
} & import("@stitches/core/types/stitches").ThemeTokens<{
    colors: Record<import("./styles/theme/default-colors").Color, string>;
    shadows: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
}, "svelteui">;
/** Global styles for SvelteUI */
declare const SvelteUIGlobalCSS: () => string;
/** Normalize css function */
declare const NormalizeCSS: () => string;
export { SvelteUIGlobalCSS, NormalizeCSS, dark };
