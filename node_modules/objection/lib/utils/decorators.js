'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.memoize = memoize;
exports.deprecated = deprecated;

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _defineProperty = require('babel-runtime/core-js/object/define-property');

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @ignore
 */
function memoize(target, property, descriptor) {
  var cacheProp = '@memoize_' + property;
  var impl = descriptor.value;

  if (impl.length === 0) {
    descriptor.value = function () {
      if (!(cacheProp in this)) {
        (0, _defineProperty2.default)(this, cacheProp, {
          enumerable: false,
          value: impl.call(this)
        });
      }

      return this[cacheProp];
    };
  } else {
    descriptor.value = function (input) {
      if (!(cacheProp in this)) {
        (0, _defineProperty2.default)(this, cacheProp, {
          enumerable: false,
          value: (0, _create2.default)(null)
        });
      }

      var cache = this[cacheProp];

      if (input in cache) {
        return cache[input];
      } else {
        var value = impl.call(this, input);
        cache[input] = value;
        return value;
      }
    };
  }
}

/**
 * @ignore
 */
function deprecated(opt) {
  return function (target, property, descriptor) {
    var impl = descriptor.value;

    descriptor.value = function () {
      console.warn('method ' + property + ' is deprecated and will be removed in version ' + opt.removedIn + '. Use ' + opt.useInstead + ' instead.');
      return impl.apply(this, arguments);
    };
  };
}