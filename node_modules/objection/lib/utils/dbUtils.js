'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDialect = getDialect;
exports.isPostgres = isPostgres;
exports.isMySql = isMySql;
exports.isSqlite = isSqlite;
exports.isKnexQueryBuilder = isKnexQueryBuilder;
exports.overwriteForDatabase = overwriteForDatabase;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @ignore
 */
function getDialect(knex) {
  return knex.client.dialect;
}

/**
 * @ignore
 */
function isPostgres(knex) {
  return getDialect(knex) === 'postgresql';
}

/**
 * @ignore
 */
function isMySql(knex) {
  return getDialect(knex) === 'mysql';
}

/**
 * @ignore
 */
function isSqlite(knex) {
  return getDialect(knex) === 'sqlite3';
}

/**
 * @ignore
 */
function isKnexQueryBuilder(knexQueryBuilder) {
  return knexQueryBuilder && knexQueryBuilder.client && _lodash2.default.isString(knexQueryBuilder.client.dialect);
}

/**
 * @ignore
 */
function overwriteForDatabase(input) {
  if (!input) {
    input = function input(inst) {
      return inst.knex();
    };
  }

  if (_lodash2.default.isFunction(input)) {
    return overwriteForDatabaseClass(input);
  } else {
    return overwriteForDatabaseMethod(input);
  }
}

/**
 * @ignore
 */
function overwriteForDatabaseClass(input) {
  return function (constructor) {
    var getKnex = input;

    if (constructor['@overwriteForDatabase']) {
      return;
    }

    Object.defineProperty(constructor, '@overwriteForDatabase', {
      enumerable: false,
      writable: false,
      value: { getKnex: getKnex }
    });
  };
}

/**
 * @ignore
 */
function overwriteForDatabaseMethod(input) {
  return function (target, property, descriptor) {
    var methodNameByDialect = input;
    var defaultImpl = descriptor.value;

    descriptor.value = function () {
      var knex = this.constructor['@overwriteForDatabase'].getKnex(this);
      var dialect = getDialect(knex);

      if (dialect in methodNameByDialect) {
        var methodName = methodNameByDialect[dialect];
        return this[methodName].apply(this, arguments);
      } else {
        return defaultImpl.apply(this, arguments);
      }
    };
  };
}