'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _Relation2 = require('./Relation');

var _Relation3 = _interopRequireDefault(_Relation2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @ignore
 * @extends Relation
 */

var OneToManyRelation = function (_Relation) {
  (0, _inherits3.default)(OneToManyRelation, _Relation);

  function OneToManyRelation() {
    (0, _classCallCheck3.default)(this, OneToManyRelation);
    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(OneToManyRelation).apply(this, arguments));
  }

  (0, _createClass3.default)(OneToManyRelation, [{
    key: 'find',

    /**
     * @override
     * @inheritDoc
     */
    value: function find(builder, owners) {
      var _this2 = this;

      builder.onBuild(function (builder) {
        var ids = (0, _lodash2.default)(owners).map(function (owner) {
          return owner.$values(_this2.ownerProp);
        }).unique(function (id) {
          return id.join();
        }).value();

        _this2.findQuery(builder, ids);
      });

      builder.runAfterModelCreate(function (related) {
        var relatedByOwnerId = _lodash2.default.groupBy(related, function (related) {
          return related.$values(_this2.relatedProp);
        });

        _lodash2.default.each(owners, function (owner) {
          var ownerId = owner.$values(_this2.ownerProp);
          owner[_this2.name] = relatedByOwnerId[ownerId] || [];
        });

        return related;
      });
    }

    /**
     * @override
     * @inheritDoc
     */

  }, {
    key: 'insert',
    value: function insert(builder, owner, insertion) {
      var _this3 = this;

      _lodash2.default.each(insertion.models(), function (insert) {
        _lodash2.default.each(_this3.relatedProp, function (relatedProp, idx) {
          insert[relatedProp] = owner[_this3.ownerProp[idx]];
        });
      });

      builder.onBuild(function (builder) {
        builder.$$insert(insertion);
      });

      builder.runAfterModelCreate(function (related) {
        owner[_this3.name] = _this3.mergeModels(owner[_this3.name], related);
        return related;
      });
    }

    /**
     * @override
     * @inheritDoc
     */

  }, {
    key: 'relate',
    value: function relate(builder, owner, ids) {
      var _this4 = this;

      ids = this.normalizeId(ids, this.relatedModelClass.getIdColumnDimension());

      builder.setQueryExecutor(function (builder) {
        var patch = {};

        _lodash2.default.each(_this4.relatedProp, function (relatedProp, idx) {
          patch[relatedProp] = owner[_this4.ownerProp[idx]];
        });

        return _this4.relatedModelClass.query().childQueryOf(builder).patch(patch).copyFrom(builder, /where/i).whereInComposite(_this4.relatedModelClass.getFullIdColumn(), ids).call(_this4.filter).runAfter(_lodash2.default.constant({}));
      });
    }

    /**
     * @override
     * @inheritDoc
     */

  }, {
    key: 'unrelate',
    value: function unrelate(builder, owner) {
      var _this5 = this;

      builder.setQueryExecutor(function (builder) {
        var patch = {};

        _lodash2.default.each(_this5.relatedProp, function (relatedProp) {
          patch[relatedProp] = null;
        });

        return _this5.relatedModelClass.query().childQueryOf(builder).patch(patch).copyFrom(builder, /where/i).whereComposite(_this5.fullRelatedCol(), owner.$values(_this5.ownerProp)).call(_this5.filter).runAfter(_lodash2.default.constant({}));
      });
    }
  }]);
  return OneToManyRelation;
}(_Relation3.default);

exports.default = OneToManyRelation;