'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _Relation2 = require('./Relation');

var _Relation3 = _interopRequireDefault(_Relation2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @ignore
 * @extends Relation
 */

var OneToOneRelation = function (_Relation) {
  (0, _inherits3.default)(OneToOneRelation, _Relation);

  function OneToOneRelation() {
    (0, _classCallCheck3.default)(this, OneToOneRelation);
    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(OneToOneRelation).apply(this, arguments));
  }

  (0, _createClass3.default)(OneToOneRelation, [{
    key: 'find',

    /**
     * @override
     * @inheritDoc
     */
    value: function find(builder, owners) {
      var _this2 = this;

      builder.onBuild(function (builder) {
        var ids = (0, _lodash2.default)(owners).map(function (owner) {
          return owner.$values(_this2.ownerProp);
        }).unique(function (id) {
          return id.join();
        }).value();

        _this2.findQuery(builder, ids);
      });

      builder.runAfterModelCreate(function (related) {
        var relatedByOwnerId = _lodash2.default.indexBy(related, function (related) {
          return related.$values(_this2.relatedProp);
        });

        _lodash2.default.each(owners, function (owner) {
          var ownerId = owner.$values(_this2.ownerProp);
          owner[_this2.name] = relatedByOwnerId[ownerId] || null;
        });

        return related;
      });
    }

    /**
     * @override
     * @inheritDoc
     */

  }, {
    key: 'insert',
    value: function insert(builder, owner, insertion) {
      var _this3 = this;

      if (insertion.models().length > 1) {
        this.throwError('can only insert one model to a OneToOneRelation');
      }

      builder.onBuild(function (builder) {
        builder.$$insert(insertion);
      });

      builder.runAfterModelCreate(function (inserted) {
        owner[_this3.name] = inserted[0];
        var patch = {};

        _lodash2.default.each(_this3.ownerProp, function (ownerProp, idx) {
          var relatedValue = inserted[0][_this3.relatedProp[idx]];
          owner[ownerProp] = relatedValue;
          patch[ownerProp] = relatedValue;
        });

        return _this3.ownerModelClass.query().childQueryOf(builder).patch(patch).whereComposite(_this3.ownerModelClass.getFullIdColumn(), owner.$id()).return(inserted);
      });
    }

    /**
     * @override
     * @inheritDoc
     */

  }, {
    key: 'relate',
    value: function relate(builder, owner, ids) {
      var _this4 = this;

      ids = this.normalizeId(ids, this.relatedProp.length);

      if (ids.length > 1) {
        this.throwError('can only relate one model to a OneToOneRelation');
      }

      builder.setQueryExecutor(function (builder) {
        var patch = {};

        _lodash2.default.each(_this4.ownerProp, function (prop, idx) {
          patch[prop] = ids[0][idx];
          owner[prop] = ids[0][idx];
        });

        return _this4.ownerModelClass.query().childQueryOf(builder).patch(patch).copyFrom(builder, /where/i).whereComposite(_this4.ownerModelClass.getFullIdColumn(), owner.$id()).runAfterModelCreate(_lodash2.default.constant({}));
      });
    }

    /**
     * @override
     * @inheritDoc
     */

  }, {
    key: 'unrelate',
    value: function unrelate(builder, owner) {
      var _this5 = this;

      builder.setQueryExecutor(function (builder) {
        var patch = {};

        _lodash2.default.each(_this5.ownerProp, function (prop) {
          patch[prop] = null;
          owner[prop] = null;
        });

        return _this5.ownerModelClass.query().childQueryOf(builder).patch(patch).copyFrom(builder, /where/i).whereComposite(_this5.ownerModelClass.getFullIdColumn(), owner.$id()).runAfterModelCreate(_lodash2.default.constant({}));
      });
    }
  }]);
  return OneToOneRelation;
}(_Relation3.default);

exports.default = OneToOneRelation;