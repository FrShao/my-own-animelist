'use strict';

var _dec, _dec2, _dec3, _class, _desc, _value, _class2;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _Relation2 = require('./Relation');

var _Relation3 = _interopRequireDefault(_Relation2);

var _inheritModel = require('../model/inheritModel');

var _inheritModel2 = _interopRequireDefault(_inheritModel);

var _dbUtils = require('../utils/dbUtils');

var _classUtils = require('../utils/classUtils');

var _decorators = require('../utils/decorators');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

var ownerJoinColumnAliasPrefix = 'objectiontmpjoin';
var sqliteBuiltInRowId = '_rowid_';

/**
 * @ignore
 * @extends Relation
 */
var ManyToManyRelation = (_dec = (0, _dbUtils.overwriteForDatabase)(), _dec2 = (0, _dbUtils.overwriteForDatabase)({
  sqlite3: 'unrelate_sqlite3'
}), _dec3 = (0, _dbUtils.overwriteForDatabase)({
  sqlite3: '_selectForModify_sqlite3'
}), _dec(_class = (_class2 = function (_Relation) {
  (0, _inherits3.default)(ManyToManyRelation, _Relation);

  function ManyToManyRelation() {
    var _Object$getPrototypeO;

    (0, _classCallCheck3.default)(this, ManyToManyRelation);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    /**
     * The join table.
     *
     * @type {string}
     */

    var _this = (0, _possibleConstructorReturn3.default)(this, (_Object$getPrototypeO = (0, _getPrototypeOf2.default)(ManyToManyRelation)).call.apply(_Object$getPrototypeO, [this].concat(args)));

    _this.joinTable = null;

    /**
     * The relation column in the join table that points to the owner table.
     *
     * @type {Array.<string>}
     */
    _this.joinTableOwnerCol = null;

    /**
     * The relation property in the join model that points to the owner table.
     *
     * @type {Array.<string>}
     */
    _this.joinTableOwnerProp = null;

    /**
     * The relation column in the join table that points to the related table.
     *
     * @type {Array.<string>}
     */
    _this.joinTableRelatedCol = null;

    /**
     * The relation property in the join model that points to the related table.
     *
     * @type {Array.<string>}
     */
    _this.joinTableRelatedProp = null;

    /**
     * The join table model class.
     *
     * This can be optionally given using the `join.through.modelClass` property,
     * otherwise an anonymous model class is created in `setMapping` method.
     *
     * @type {Class.<Model>}
     */
    _this.joinTableModelClass = null;
    return _this;
  }

  /**
   * @override
   * @inheritDoc
   */

  (0, _createClass3.default)(ManyToManyRelation, [{
    key: 'setMapping',
    value: function setMapping(mapping) {
      var retVal = (0, _get3.default)((0, _getPrototypeOf2.default)(ManyToManyRelation.prototype), 'setMapping', this).call(this, mapping);

      // Avoid require loop and import here.
      var Model = require(__dirname + '/../model/Model').default;

      if (!_lodash2.default.isObject(mapping.join.through)) {
        this.throwError('join must have the `through` that describes the join table.');
      }

      if (!mapping.join.through.from || !mapping.join.through.to) {
        this.throwError('join.through must be an object that describes the join table. For example: {from: "JoinTable.someId", to: "JoinTable.someOtherId"}');
      }

      var joinFrom = this.parseReference(mapping.join.from);
      var joinTableFrom = this.parseReference(mapping.join.through.from);
      var joinTableTo = this.parseReference(mapping.join.through.to);

      if (!joinTableFrom.table || _lodash2.default.isEmpty(joinTableFrom.columns)) {
        this.throwError('join.through.from must have format JoinTable.columnName. For example "JoinTable.someId" or in case of composite key ["JoinTable.a", "JoinTable.b"].');
      }

      if (!joinTableTo.table || _lodash2.default.isEmpty(joinTableTo.columns)) {
        this.throwError('join.through.to must have format JoinTable.columnName. For example "JoinTable.someId" or in case of composite key ["JoinTable.a", "JoinTable.b"].');
      }

      if (joinTableFrom.table !== joinTableTo.table) {
        this.throwError('join.through `from` and `to` must point to the same join table.');
      }

      this.joinTable = joinTableFrom.table;

      if (joinFrom.table === this.ownerModelClass.tableName) {
        this.joinTableOwnerCol = joinTableFrom.columns;
        this.joinTableRelatedCol = joinTableTo.columns;
      } else {
        this.joinTableRelatedCol = joinTableFrom.columns;
        this.joinTableOwnerCol = joinTableTo.columns;
      }

      if (mapping.join.through.modelClass) {
        var modelClass = mapping.join.through.modelClass;

        try {
          if (_lodash2.default.isString(modelClass)) {
            modelClass = require(modelClass);

            // Compatibility with babel `export default`.
            if (!(0, _classUtils.isSubclassOf)(modelClass, Model) && (0, _classUtils.isSubclassOf)(modelClass.default, Model)) {
              modelClass = modelClass.default;
            }
          }
        } catch (err) {
          // Do nothing.
        }

        if (!(0, _classUtils.isSubclassOf)(modelClass, Model)) {
          this.throwError('Join table model class is not a subclass of Model');
        }

        this.joinTableModelClass = modelClass;
      } else {
        this.joinTableModelClass = (0, _inheritModel2.default)(Model);
        this.joinTableModelClass.tableName = this.joinTable;
        // We cannot know if the join table has a primary key. Therefore we set some
        // known column as the idColumn so that inserts will work.
        this.joinTableModelClass.idColumn = this.joinTableRelatedCol;
      }

      this.joinTableOwnerProp = this.propertyName(this.joinTableOwnerCol, this.joinTableModelClass);
      this.joinTableRelatedProp = this.propertyName(this.joinTableRelatedCol, this.joinTableModelClass);

      return retVal;
    }

    /**
     * Reference to the column in the join table that refers to `fullOwnerCol()`.
     *
     * For example: [`Person_Movie.actorId`].
     *
     * @returns {Array.<string>}
     */

  }, {
    key: 'fullJoinTableOwnerCol',
    value: function fullJoinTableOwnerCol() {
      var _this2 = this;

      return _lodash2.default.map(this.joinTableOwnerCol, function (col) {
        return _this2.joinTable + '.' + col;
      });
    }

    /**
     * Reference to the column in the join table that refers to `fullRelatedCol()`.
     *
     * For example: [`Person_Movie.movieId`].
     *
     * @returns {Array.<string>}
     */

  }, {
    key: 'fullJoinTableRelatedCol',
    value: function fullJoinTableRelatedCol() {
      var _this3 = this;

      return _lodash2.default.map(this.joinTableRelatedCol, function (col) {
        return _this3.joinTable + '.' + col;
      });
    }

    /**
     * Alias to use for the join table when joining with the owner table.
     *
     * For example: `Person_Movie_rel_movies`.
     *
     * @returns {string}
     */

  }, {
    key: 'joinTableAlias',
    value: function joinTableAlias() {
      return this.joinTable + '_rel_' + this.name;
    }

    /**
     * @inheritDoc
     * @override
     */

  }, {
    key: 'clone',
    value: function clone() {
      var relation = (0, _get3.default)((0, _getPrototypeOf2.default)(ManyToManyRelation.prototype), 'clone', this).call(this);

      relation.joinTable = this.joinTable;
      relation.joinTableOwnerCol = this.joinTableOwnerCol;
      relation.joinTableOwnerProp = this.joinTableOwnerProp;
      relation.joinTableRelatedCol = this.joinTableRelatedCol;
      relation.joinTableRelatedProp = this.joinTableRelatedProp;
      relation.joinTableModelClass = this.joinTableModelClass;

      return relation;
    }

    /**
     * @inheritDoc
     * @override
     */

  }, {
    key: 'bindKnex',
    value: function bindKnex(knex) {
      var bound = (0, _get3.default)((0, _getPrototypeOf2.default)(ManyToManyRelation.prototype), 'bindKnex', this).call(this, knex);
      bound.joinTableModelClass = this.joinTableModelClass.bindKnex(knex);
      return bound;
    }

    /**
     * @override
     * @inheritDoc
     * @returns {QueryBuilder}
     */

  }, {
    key: 'findQuery',
    value: function findQuery(builder, ownerIds, isColumnRef) {
      var _this4 = this;

      var fullRelatedCol = this.fullRelatedCol();

      builder.join(this.joinTable, function (join) {
        _lodash2.default.each(_this4.fullJoinTableRelatedCol(), function (joinTableRelatedCol, idx) {
          join.on(joinTableRelatedCol, fullRelatedCol[idx]);
        });
      });

      if (isColumnRef) {
        _lodash2.default.each(this.fullJoinTableOwnerCol(), function (joinTableOwnerCol, idx) {
          builder.whereRef(joinTableOwnerCol, ownerIds[idx]);
        });
      } else {
        if ((0, _lodash2.default)(ownerIds).flatten().all(function (id) {
          return _lodash2.default.isNull(id) || _lodash2.default.isUndefined(id);
        })) {
          // Nothing to fetch.
          builder.resolve([]);
        } else {
          builder.whereInComposite(this.fullJoinTableOwnerCol(), ownerIds);
        }
      }

      return builder.call(this.filter);
    }

    /**
     * @override
     * @inheritDoc
     * @returns {QueryBuilder}
     */

  }, {
    key: 'join',
    value: function join(builder, joinMethod) {
      joinMethod = joinMethod || 'join';

      var joinTable = this.joinTable;
      var relatedTable = this.relatedModelClass.tableName;

      var joinTableAlias = this.joinTableAlias();
      var relatedTableAlias = this.relatedTableAlias();

      var joinTableAsAlias = joinTable + ' as ' + joinTableAlias;
      var relatedTableAsAlias = relatedTable + ' as ' + relatedTableAlias;

      var joinTableOwnerCol = _lodash2.default.map(this.joinTableOwnerCol, function (col) {
        return joinTableAlias + '.' + col;
      });
      var joinTableRelatedCol = _lodash2.default.map(this.joinTableRelatedCol, function (col) {
        return joinTableAlias + '.' + col;
      });

      var ownerCol = this.fullOwnerCol();
      var relatedCol = _lodash2.default.map(this.relatedCol, function (col) {
        return relatedTableAlias + '.' + col;
      });

      return builder[joinMethod](joinTableAsAlias, function (join) {
        _lodash2.default.each(joinTableOwnerCol, function (joinTableOwnerCol, idx) {
          join.on(joinTableOwnerCol, ownerCol[idx]);
        });
      })[joinMethod](relatedTableAsAlias, function (join) {
        _lodash2.default.each(joinTableRelatedCol, function (joinTableRelatedCol, idx) {
          join.on(joinTableRelatedCol, relatedCol[idx]);
        });
      }).call(this.filter);
    }

    /**
     * @override
     * @inheritDoc
     */

  }, {
    key: 'find',
    value: function find(builder, owners) {
      var _this5 = this;

      var ownerJoinColumnAlias = _lodash2.default.times(this.joinTableOwnerCol.length, function (idx) {
        return ownerJoinColumnAliasPrefix + idx;
      });
      var ownerJoinPropertyAlias = _lodash2.default.map(ownerJoinColumnAlias, function (alias) {
        return _this5.relatedModelClass.columnNameToPropertyName(alias);
      });

      builder.onBuild(function (builder) {
        var ids = (0, _lodash2.default)(owners).map(function (owner) {
          return owner.$values(_this5.ownerProp);
        }).unique(function (id) {
          return id.join();
        }).value();

        if (!builder.has(/select/)) {
          // If the user hasn't specified a select clause, select the related model's columns.
          // If we don't do this we also get the join table's columns.
          builder.select(_this5.relatedModelClass.tableName + '.*');
        }

        _this5.findQuery(builder, ids);

        // We must select the owner join columns so that we know for which owner model the related
        // models belong to after the requests.
        _lodash2.default.each(_this5.fullJoinTableOwnerCol(), function (fullJoinTableOwnerCol, idx) {
          builder.select(fullJoinTableOwnerCol + ' as ' + ownerJoinColumnAlias[idx]);
        });
      });

      builder.runAfterModelCreate(function (related) {
        var relatedByOwnerId = _lodash2.default.groupBy(related, function (related) {
          return related.$values(ownerJoinPropertyAlias);
        });

        _lodash2.default.each(owners, function (owner) {
          owner[_this5.name] = relatedByOwnerId[owner.$values(_this5.ownerProp)] || [];
        });

        // Delete the temporary join aliases.
        _lodash2.default.each(related, function (rel) {
          _lodash2.default.each(ownerJoinPropertyAlias, function (alias) {
            delete rel[alias];
          });
        });

        return related;
      });
    }

    /**
     * @override
     * @inheritDoc
     */

  }, {
    key: 'insert',
    value: function insert(builder, owner, insertion) {
      var _this6 = this;

      builder.onBuild(function (builder) {
        builder.$$insert(insertion);
      });

      builder.runAfterModelCreate(function (related) {
        var ownerId = owner.$values(_this6.ownerProp);
        var relatedIds = _lodash2.default.map(related, function (related) {
          return related.$values(_this6.relatedProp);
        });
        var joinModels = _this6._createJoinModels(ownerId, relatedIds);

        owner[_this6.name] = _this6.mergeModels(owner[_this6.name], related);

        // Insert the join rows to the join table.
        return _this6.joinTableModelClass.bindKnex(builder.knex()).query().childQueryOf(builder).insert(joinModels).return(related);
      });
    }

    /**
     * @override
     * @inheritDoc
     */

  }, {
    key: 'update',
    value: function update(builder, owner, _update) {
      var _this7 = this;

      builder.onBuild(function (builder) {
        _this7._selectForModify(builder, owner).$$update(_update).call(_this7.filter);
      });
    }

    /**
     * @override
     * @inheritDoc
     */

  }, {
    key: 'delete',
    value: function _delete(builder, owner) {
      var _this8 = this;

      builder.onBuild(function (builder) {
        _this8._selectForModify(builder, owner).$$delete().call(_this8.filter);
      });
    }

    /**
     * @override
     * @inheritDoc
     */

  }, {
    key: 'relate',
    value: function relate(builder, owner, ids) {
      var _this9 = this;

      ids = this.normalizeId(ids, this.relatedProp.length);

      builder.setQueryExecutor(function (builder) {
        var joinModels = _this9._createJoinModels(owner.$values(_this9.ownerProp), ids);

        return _this9.joinTableModelClass.bindKnex(builder.knex()).query().childQueryOf(builder).insert(joinModels).runAfter(_lodash2.default.constant({}));
      });
    }

    /**
     * @override
     * @inheritDoc
     */

  }, {
    key: 'unrelate',
    value: function unrelate(builder, owner) {
      var _this10 = this;

      builder.setQueryExecutor(function (builder) {
        var selectRelatedColQuery = _this10.relatedModelClass.query().childQueryOf(builder).copyFrom(builder, /where/i).select(_this10.fullRelatedCol()).call(_this10.filter);

        return _this10.joinTableModelClass.bindKnex(builder.knex()).query().childQueryOf(builder).delete().whereComposite(_this10.fullJoinTableOwnerCol(), owner.$values(_this10.ownerProp)).whereInComposite(_this10.fullJoinTableRelatedCol(), selectRelatedColQuery).runAfter(_lodash2.default.constant({}));
      });
    }

    /**
     * Special unrelate implementation for sqlite3. sqlite3 doesn't support multi-value
     * where-in clauses. We need to use the built-in _rowid_ instead.
     *
     * @private
     */

  }, {
    key: 'unrelate_sqlite3',
    value: function unrelate_sqlite3(builder, owner) {
      var _this11 = this;

      builder.setQueryExecutor(function (builder) {
        var joinTableAlias = _this11.joinTableAlias();
        var joinTableAsAlias = _this11.joinTable + ' as ' + joinTableAlias;
        var joinTableAliasRowId = joinTableAlias + '.' + sqliteBuiltInRowId;
        var joinTableRowId = _this11.joinTable + '.' + sqliteBuiltInRowId;

        var ownerId = owner.$values(_this11.ownerProp);
        var fullRelatedCol = _this11.fullRelatedCol();

        var selectRelatedQuery = _this11.relatedModelClass.query().childQueryOf(builder).copyFrom(builder, /where/i).select(joinTableAliasRowId).call(_this11.filter).whereComposite(_this11.fullJoinTableOwnerCol(), ownerId).join(joinTableAsAlias, function (join) {
          _lodash2.default.each(_this11.fullJoinTableRelatedCol(), function (joinTableRelatedCol, idx) {
            join.on(joinTableRelatedCol, fullRelatedCol[idx]);
          });
        });

        return _this11.joinTableModelClass.bindKnex(builder.knex()).query().childQueryOf(builder).delete().whereIn(joinTableRowId, selectRelatedQuery).runAfter(_lodash2.default.constant({}));
      });
    }

    /**
     * @private
     */

  }, {
    key: '_selectForModify',
    value: function _selectForModify(builder, owner) {
      var ownerId = owner.$values(this.ownerProp);

      var idQuery = this.joinTableModelClass.bindKnex(builder.knex()).query().childQueryOf(builder).select(this.fullJoinTableRelatedCol()).whereComposite(this.fullJoinTableOwnerCol(), ownerId);

      return builder.whereInComposite(this.fullRelatedCol(), idQuery);
    }

    /**
     * Special _selectForModify implementation for sqlite3. sqlite3 doesn't support multi-value
     * where-in clauses. We need to use the built-in _rowid_ instead.
     *
     * @private
     */

  }, {
    key: '_selectForModify_sqlite3',
    value: function _selectForModify_sqlite3(builder, owner) {
      var _this12 = this;

      var relatedTable = this.relatedModelClass.tableName;
      var relatedTableAlias = this.relatedTableAlias();
      var relatedTableAsAlias = relatedTable + ' as ' + relatedTableAlias;
      var relatedTableAliasRowId = relatedTableAlias + '.' + sqliteBuiltInRowId;
      var relatedTableRowId = relatedTable + '.' + sqliteBuiltInRowId;

      var fullRelatedCol = this.fullRelatedCol();
      var ownerId = owner.$values(this.ownerProp);

      var selectRelatedQuery = this.joinTableModelClass.bindKnex(builder.knex()).query().childQueryOf(builder).select(relatedTableAliasRowId).whereComposite(this.fullJoinTableOwnerCol(), ownerId).join(relatedTableAsAlias, function (join) {
        _lodash2.default.each(_this12.fullJoinTableRelatedCol(), function (joinTableRelatedCol, idx) {
          join.on(joinTableRelatedCol, fullRelatedCol[idx]);
        });
      });

      return builder.whereInComposite(relatedTableRowId, selectRelatedQuery);
    }

    /**
     * @private
     */

  }, {
    key: '_createJoinModels',
    value: function _createJoinModels(ownerId, relatedIds) {
      var _this13 = this;

      return _lodash2.default.map(relatedIds, function (relatedId) {
        var joinModel = {};

        _lodash2.default.each(_this13.joinTableOwnerProp, function (joinTableOwnerProp, idx) {
          joinModel[joinTableOwnerProp] = ownerId[idx];
        });

        _lodash2.default.each(_this13.joinTableRelatedProp, function (joinTableRelatedProp, idx) {
          joinModel[joinTableRelatedProp] = relatedId[idx];
        });

        return joinModel;
      });
    }
  }]);
  return ManyToManyRelation;
}(_Relation3.default), (_applyDecoratedDescriptor(_class2.prototype, 'fullJoinTableOwnerCol', [_decorators.memoize], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, 'fullJoinTableOwnerCol'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'fullJoinTableRelatedCol', [_decorators.memoize], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, 'fullJoinTableRelatedCol'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'unrelate', [_dec2], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, 'unrelate'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, '_selectForModify', [_dec3], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, '_selectForModify'), _class2.prototype)), _class2)) || _class);
exports.default = ManyToManyRelation;