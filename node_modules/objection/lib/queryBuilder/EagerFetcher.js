'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _ValidationError = require('../ValidationError');

var _ValidationError2 = _interopRequireDefault(_ValidationError);

var _RelationExpression = require('./RelationExpression');

var _RelationExpression2 = _interopRequireDefault(_RelationExpression);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @ignore
 */

var EagerFetcher = function () {
  function EagerFetcher(_ref) {
    var modelClass = _ref.modelClass;
    var models = _ref.models;
    var eager = _ref.eager;
    var filters = _ref.filters;
    var parent = _ref.parent;
    var rootQuery = _ref.rootQuery;
    (0, _classCallCheck3.default)(this, EagerFetcher);

    this.modelClass = modelClass;
    this.models = models;
    this.eager = eager;
    this.filters = filters || {};
    this.parent = parent || null;
    this.rootQuery = rootQuery || null;
    this.children = (0, _create2.default)(null);
    this.promise = null;
  }

  (0, _createClass3.default)(EagerFetcher, [{
    key: 'fetch',
    value: function fetch() {
      var _this = this;

      if (this.promise) {
        return this.promise;
      }

      if (_lodash2.default.isEmpty(this.models)) {
        this.promise = _bluebird2.default.resolve([]);
        return this.promise;
      }

      var promises = [];

      this.eager.forEachChild(function (child) {
        var relation = _this.modelClass.getRelations()[child.name];

        if (!relation) {
          throw new _ValidationError2.default({ eager: 'unknown relation "' + child.name + '" in an eager expression' });
        }
      });

      _lodash2.default.each(this.modelClass.getRelations(), function (relation) {
        var nextEager = _this.eager.childExpression(relation.name);

        if (nextEager) {
          promises.push(_this._fetchRelation(relation, nextEager));
        }
      });

      this.promise = _bluebird2.default.all(promises).return(this.models);
      return this.promise;
    }
  }, {
    key: '_fetchRelation',
    value: function _fetchRelation(relation, nextEager) {
      var _this2 = this;

      var ModelClass = relation.relatedModelClass;
      var queryBuilder = ModelClass.RelatedQueryBuilder.forClass(ModelClass).childQueryOf(this.rootQuery);

      relation.find(queryBuilder, this.models);

      _lodash2.default.each(nextEager.args, function (filterName) {
        var filter = _this2.filters[filterName];

        if (!_lodash2.default.isFunction(filter)) {
          throw new _ValidationError2.default({ eager: 'could not find filter "' + filterName + '" for relation "' + relation.name + '"' });
        }

        filter(queryBuilder);
      });

      return queryBuilder.then(function (related) {
        return _this2._fetchNextEager(relation, related, nextEager);
      });
    }
  }, {
    key: '_fetchNextEager',
    value: function _fetchNextEager(relation, related, eager) {
      this.children[relation.name] = new EagerFetcher({
        modelClass: relation.relatedModelClass,
        models: related,
        eager: eager,
        filters: this.filters,
        parent: this,
        rootQuery: this.rootQuery
      });

      return this.children[relation.name].fetch();
    }
  }]);
  return EagerFetcher;
}();

exports.default = EagerFetcher;