
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: string
  username: string
  passwordHash: string
  userAuthToken: string
  createdAt: Date
  updatedAt: Date
  roleId: number
  profilePictureId: string
}

/**
 * Model Roles
 * 
 */
export type Roles = {
  id: number
  name: string
  color: string
}

/**
 * Model List
 * 
 */
export type List = {
  id: string
  createdAt: Date
  updatedAt: Date
  userId: string
  typeListId: number
  animeId: string
  score: number
}

/**
 * Model Anime
 * 
 */
export type Anime = {
  id: string
  name: string
  year: string
  nbrEpisode: number
  imageUrl: string
}

/**
 * Model TypeLists
 * 
 */
export type TypeLists = {
  id: number
  name: string
}

/**
 * Model ProfilePicture
 * 
 */
export type ProfilePicture = {
  id: string
  publicId: string
  url: string
  format: string
  version: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

  $transaction<R>(fn: (prisma: Prisma.TransactionClient) => Promise<R>, options?: {maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel}): Promise<R>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.roles`: Exposes CRUD operations for the **Roles** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.roles.findMany()
    * ```
    */
  get roles(): Prisma.RolesDelegate<GlobalReject>;

  /**
   * `prisma.list`: Exposes CRUD operations for the **List** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lists
    * const lists = await prisma.list.findMany()
    * ```
    */
  get list(): Prisma.ListDelegate<GlobalReject>;

  /**
   * `prisma.anime`: Exposes CRUD operations for the **Anime** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Anime
    * const anime = await prisma.anime.findMany()
    * ```
    */
  get anime(): Prisma.AnimeDelegate<GlobalReject>;

  /**
   * `prisma.typeLists`: Exposes CRUD operations for the **TypeLists** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TypeLists
    * const typeLists = await prisma.typeLists.findMany()
    * ```
    */
  get typeLists(): Prisma.TypeListsDelegate<GlobalReject>;

  /**
   * `prisma.profilePicture`: Exposes CRUD operations for the **ProfilePicture** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProfilePictures
    * const profilePictures = await prisma.profilePicture.findMany()
    * ```
    */
  get profilePicture(): Prisma.ProfilePictureDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.7.1
   * Query Engine version: d6e67a83f971b175a593ccc12e15c4a757f93ffe
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Roles: 'Roles',
    List: 'List',
    Anime: 'Anime',
    TypeLists: 'TypeLists',
    ProfilePicture: 'ProfilePicture'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<PrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    Lists: number
  }

  export type UserCountOutputTypeSelect = {
    Lists?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type RolesCountOutputType
   */


  export type RolesCountOutputType = {
    Users: number
  }

  export type RolesCountOutputTypeSelect = {
    Users?: boolean
  }

  export type RolesCountOutputTypeGetPayload<S extends boolean | null | undefined | RolesCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? RolesCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (RolesCountOutputTypeArgs)
    ? RolesCountOutputType 
    : S extends { select: any } & (RolesCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof RolesCountOutputType ? RolesCountOutputType[P] : never
  } 
      : RolesCountOutputType




  // Custom InputTypes

  /**
   * RolesCountOutputType without action
   */
  export type RolesCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the RolesCountOutputType
     * 
    **/
    select?: RolesCountOutputTypeSelect | null
  }



  /**
   * Count Type AnimeCountOutputType
   */


  export type AnimeCountOutputType = {
    Lists: number
  }

  export type AnimeCountOutputTypeSelect = {
    Lists?: boolean
  }

  export type AnimeCountOutputTypeGetPayload<S extends boolean | null | undefined | AnimeCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? AnimeCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (AnimeCountOutputTypeArgs)
    ? AnimeCountOutputType 
    : S extends { select: any } & (AnimeCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof AnimeCountOutputType ? AnimeCountOutputType[P] : never
  } 
      : AnimeCountOutputType




  // Custom InputTypes

  /**
   * AnimeCountOutputType without action
   */
  export type AnimeCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the AnimeCountOutputType
     * 
    **/
    select?: AnimeCountOutputTypeSelect | null
  }



  /**
   * Count Type TypeListsCountOutputType
   */


  export type TypeListsCountOutputType = {
    Lists: number
  }

  export type TypeListsCountOutputTypeSelect = {
    Lists?: boolean
  }

  export type TypeListsCountOutputTypeGetPayload<S extends boolean | null | undefined | TypeListsCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TypeListsCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TypeListsCountOutputTypeArgs)
    ? TypeListsCountOutputType 
    : S extends { select: any } & (TypeListsCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TypeListsCountOutputType ? TypeListsCountOutputType[P] : never
  } 
      : TypeListsCountOutputType




  // Custom InputTypes

  /**
   * TypeListsCountOutputType without action
   */
  export type TypeListsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TypeListsCountOutputType
     * 
    **/
    select?: TypeListsCountOutputTypeSelect | null
  }



  /**
   * Count Type ProfilePictureCountOutputType
   */


  export type ProfilePictureCountOutputType = {
    Users: number
  }

  export type ProfilePictureCountOutputTypeSelect = {
    Users?: boolean
  }

  export type ProfilePictureCountOutputTypeGetPayload<S extends boolean | null | undefined | ProfilePictureCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ProfilePictureCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ProfilePictureCountOutputTypeArgs)
    ? ProfilePictureCountOutputType 
    : S extends { select: any } & (ProfilePictureCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ProfilePictureCountOutputType ? ProfilePictureCountOutputType[P] : never
  } 
      : ProfilePictureCountOutputType




  // Custom InputTypes

  /**
   * ProfilePictureCountOutputType without action
   */
  export type ProfilePictureCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProfilePictureCountOutputType
     * 
    **/
    select?: ProfilePictureCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    roleId: number | null
  }

  export type UserSumAggregateOutputType = {
    roleId: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    username: string | null
    passwordHash: string | null
    userAuthToken: string | null
    createdAt: Date | null
    updatedAt: Date | null
    roleId: number | null
    profilePictureId: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    username: string | null
    passwordHash: string | null
    userAuthToken: string | null
    createdAt: Date | null
    updatedAt: Date | null
    roleId: number | null
    profilePictureId: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    passwordHash: number
    userAuthToken: number
    createdAt: number
    updatedAt: number
    roleId: number
    profilePictureId: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    roleId?: true
  }

  export type UserSumAggregateInputType = {
    roleId?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    passwordHash?: true
    userAuthToken?: true
    createdAt?: true
    updatedAt?: true
    roleId?: true
    profilePictureId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    passwordHash?: true
    userAuthToken?: true
    createdAt?: true
    updatedAt?: true
    roleId?: true
    profilePictureId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    passwordHash?: true
    userAuthToken?: true
    createdAt?: true
    updatedAt?: true
    roleId?: true
    profilePictureId?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    username: string
    passwordHash: string
    userAuthToken: string
    createdAt: Date
    updatedAt: Date
    roleId: number
    profilePictureId: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    username?: boolean
    passwordHash?: boolean
    userAuthToken?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    role?: boolean | RolesArgs
    roleId?: boolean
    Lists?: boolean | ListFindManyArgs
    profilePicture?: boolean | ProfilePictureArgs
    profilePictureId?: boolean
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    role?: boolean | RolesArgs
    Lists?: boolean | ListFindManyArgs
    profilePicture?: boolean | ProfilePictureArgs
    _count?: boolean | UserCountOutputTypeArgs
  } 

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'role' ? RolesGetPayload<S['include'][P]> :
        P extends 'Lists' ? Array < ListGetPayload<S['include'][P]>>  :
        P extends 'profilePicture' ? ProfilePictureGetPayload<S['include'][P]> :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'role' ? RolesGetPayload<S['select'][P]> :
        P extends 'Lists' ? Array < ListGetPayload<S['select'][P]>>  :
        P extends 'profilePicture' ? ProfilePictureGetPayload<S['select'][P]> :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    role<T extends RolesArgs= {}>(args?: Subset<T, RolesArgs>): Prisma__RolesClient<RolesGetPayload<T> | Null>;

    Lists<T extends ListFindManyArgs= {}>(args?: Subset<T, ListFindManyArgs>): PrismaPromise<Array<ListGetPayload<T>>| Null>;

    profilePicture<T extends ProfilePictureArgs= {}>(args?: Subset<T, ProfilePictureArgs>): Prisma__ProfilePictureClient<ProfilePictureGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }

  /**
   * User: findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User: findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Roles
   */


  export type AggregateRoles = {
    _count: RolesCountAggregateOutputType | null
    _avg: RolesAvgAggregateOutputType | null
    _sum: RolesSumAggregateOutputType | null
    _min: RolesMinAggregateOutputType | null
    _max: RolesMaxAggregateOutputType | null
  }

  export type RolesAvgAggregateOutputType = {
    id: number | null
  }

  export type RolesSumAggregateOutputType = {
    id: number | null
  }

  export type RolesMinAggregateOutputType = {
    id: number | null
    name: string | null
    color: string | null
  }

  export type RolesMaxAggregateOutputType = {
    id: number | null
    name: string | null
    color: string | null
  }

  export type RolesCountAggregateOutputType = {
    id: number
    name: number
    color: number
    _all: number
  }


  export type RolesAvgAggregateInputType = {
    id?: true
  }

  export type RolesSumAggregateInputType = {
    id?: true
  }

  export type RolesMinAggregateInputType = {
    id?: true
    name?: true
    color?: true
  }

  export type RolesMaxAggregateInputType = {
    id?: true
    name?: true
    color?: true
  }

  export type RolesCountAggregateInputType = {
    id?: true
    name?: true
    color?: true
    _all?: true
  }

  export type RolesAggregateArgs = {
    /**
     * Filter which Roles to aggregate.
     * 
    **/
    where?: RolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     * 
    **/
    orderBy?: Enumerable<RolesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: RolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RolesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RolesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RolesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RolesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RolesMaxAggregateInputType
  }

  export type GetRolesAggregateType<T extends RolesAggregateArgs> = {
        [P in keyof T & keyof AggregateRoles]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoles[P]>
      : GetScalarType<T[P], AggregateRoles[P]>
  }




  export type RolesGroupByArgs = {
    where?: RolesWhereInput
    orderBy?: Enumerable<RolesOrderByWithAggregationInput>
    by: Array<RolesScalarFieldEnum>
    having?: RolesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RolesCountAggregateInputType | true
    _avg?: RolesAvgAggregateInputType
    _sum?: RolesSumAggregateInputType
    _min?: RolesMinAggregateInputType
    _max?: RolesMaxAggregateInputType
  }


  export type RolesGroupByOutputType = {
    id: number
    name: string
    color: string
    _count: RolesCountAggregateOutputType | null
    _avg: RolesAvgAggregateOutputType | null
    _sum: RolesSumAggregateOutputType | null
    _min: RolesMinAggregateOutputType | null
    _max: RolesMaxAggregateOutputType | null
  }

  type GetRolesGroupByPayload<T extends RolesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<RolesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RolesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RolesGroupByOutputType[P]>
            : GetScalarType<T[P], RolesGroupByOutputType[P]>
        }
      >
    >


  export type RolesSelect = {
    id?: boolean
    name?: boolean
    color?: boolean
    Users?: boolean | UserFindManyArgs
    _count?: boolean | RolesCountOutputTypeArgs
  }


  export type RolesInclude = {
    Users?: boolean | UserFindManyArgs
    _count?: boolean | RolesCountOutputTypeArgs
  } 

  export type RolesGetPayload<S extends boolean | null | undefined | RolesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Roles :
    S extends undefined ? never :
    S extends { include: any } & (RolesArgs | RolesFindManyArgs)
    ? Roles  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Users' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends '_count' ? RolesCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (RolesArgs | RolesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Users' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends '_count' ? RolesCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Roles ? Roles[P] : never
  } 
      : Roles


  type RolesCountArgs = Merge<
    Omit<RolesFindManyArgs, 'select' | 'include'> & {
      select?: RolesCountAggregateInputType | true
    }
  >

  export interface RolesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Roles that matches the filter.
     * @param {RolesFindUniqueArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RolesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RolesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Roles'> extends True ? Prisma__RolesClient<RolesGetPayload<T>> : Prisma__RolesClient<RolesGetPayload<T> | null, null>

    /**
     * Find one Roles that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RolesFindUniqueOrThrowArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RolesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, RolesFindUniqueOrThrowArgs>
    ): Prisma__RolesClient<RolesGetPayload<T>>

    /**
     * Find the first Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesFindFirstArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RolesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RolesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Roles'> extends True ? Prisma__RolesClient<RolesGetPayload<T>> : Prisma__RolesClient<RolesGetPayload<T> | null, null>

    /**
     * Find the first Roles that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesFindFirstOrThrowArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RolesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, RolesFindFirstOrThrowArgs>
    ): Prisma__RolesClient<RolesGetPayload<T>>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.roles.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.roles.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rolesWithIdOnly = await prisma.roles.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RolesFindManyArgs>(
      args?: SelectSubset<T, RolesFindManyArgs>
    ): PrismaPromise<Array<RolesGetPayload<T>>>

    /**
     * Create a Roles.
     * @param {RolesCreateArgs} args - Arguments to create a Roles.
     * @example
     * // Create one Roles
     * const Roles = await prisma.roles.create({
     *   data: {
     *     // ... data to create a Roles
     *   }
     * })
     * 
    **/
    create<T extends RolesCreateArgs>(
      args: SelectSubset<T, RolesCreateArgs>
    ): Prisma__RolesClient<RolesGetPayload<T>>

    /**
     * Delete a Roles.
     * @param {RolesDeleteArgs} args - Arguments to delete one Roles.
     * @example
     * // Delete one Roles
     * const Roles = await prisma.roles.delete({
     *   where: {
     *     // ... filter to delete one Roles
     *   }
     * })
     * 
    **/
    delete<T extends RolesDeleteArgs>(
      args: SelectSubset<T, RolesDeleteArgs>
    ): Prisma__RolesClient<RolesGetPayload<T>>

    /**
     * Update one Roles.
     * @param {RolesUpdateArgs} args - Arguments to update one Roles.
     * @example
     * // Update one Roles
     * const roles = await prisma.roles.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RolesUpdateArgs>(
      args: SelectSubset<T, RolesUpdateArgs>
    ): Prisma__RolesClient<RolesGetPayload<T>>

    /**
     * Delete zero or more Roles.
     * @param {RolesDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.roles.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RolesDeleteManyArgs>(
      args?: SelectSubset<T, RolesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const roles = await prisma.roles.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RolesUpdateManyArgs>(
      args: SelectSubset<T, RolesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Roles.
     * @param {RolesUpsertArgs} args - Arguments to update or create a Roles.
     * @example
     * // Update or create a Roles
     * const roles = await prisma.roles.upsert({
     *   create: {
     *     // ... data to create a Roles
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Roles we want to update
     *   }
     * })
    **/
    upsert<T extends RolesUpsertArgs>(
      args: SelectSubset<T, RolesUpsertArgs>
    ): Prisma__RolesClient<RolesGetPayload<T>>

    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.roles.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RolesCountArgs>(
      args?: Subset<T, RolesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RolesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RolesAggregateArgs>(args: Subset<T, RolesAggregateArgs>): PrismaPromise<GetRolesAggregateType<T>>

    /**
     * Group by Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RolesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RolesGroupByArgs['orderBy'] }
        : { orderBy?: RolesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RolesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRolesGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Roles.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RolesClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Users<T extends UserFindManyArgs= {}>(args?: Subset<T, UserFindManyArgs>): PrismaPromise<Array<UserGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Roles base type for findUnique actions
   */
  export type RolesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Roles
     * 
    **/
    select?: RolesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RolesInclude | null
    /**
     * Filter, which Roles to fetch.
     * 
    **/
    where: RolesWhereUniqueInput
  }

  /**
   * Roles: findUnique
   */
  export interface RolesFindUniqueArgs extends RolesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Roles findUniqueOrThrow
   */
  export type RolesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Roles
     * 
    **/
    select?: RolesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RolesInclude | null
    /**
     * Filter, which Roles to fetch.
     * 
    **/
    where: RolesWhereUniqueInput
  }


  /**
   * Roles base type for findFirst actions
   */
  export type RolesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Roles
     * 
    **/
    select?: RolesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RolesInclude | null
    /**
     * Filter, which Roles to fetch.
     * 
    **/
    where?: RolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     * 
    **/
    orderBy?: Enumerable<RolesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     * 
    **/
    cursor?: RolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     * 
    **/
    distinct?: Enumerable<RolesScalarFieldEnum>
  }

  /**
   * Roles: findFirst
   */
  export interface RolesFindFirstArgs extends RolesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Roles findFirstOrThrow
   */
  export type RolesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Roles
     * 
    **/
    select?: RolesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RolesInclude | null
    /**
     * Filter, which Roles to fetch.
     * 
    **/
    where?: RolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     * 
    **/
    orderBy?: Enumerable<RolesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     * 
    **/
    cursor?: RolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     * 
    **/
    distinct?: Enumerable<RolesScalarFieldEnum>
  }


  /**
   * Roles findMany
   */
  export type RolesFindManyArgs = {
    /**
     * Select specific fields to fetch from the Roles
     * 
    **/
    select?: RolesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RolesInclude | null
    /**
     * Filter, which Roles to fetch.
     * 
    **/
    where?: RolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     * 
    **/
    orderBy?: Enumerable<RolesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     * 
    **/
    cursor?: RolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RolesScalarFieldEnum>
  }


  /**
   * Roles create
   */
  export type RolesCreateArgs = {
    /**
     * Select specific fields to fetch from the Roles
     * 
    **/
    select?: RolesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RolesInclude | null
    /**
     * The data needed to create a Roles.
     * 
    **/
    data: XOR<RolesCreateInput, RolesUncheckedCreateInput>
  }


  /**
   * Roles update
   */
  export type RolesUpdateArgs = {
    /**
     * Select specific fields to fetch from the Roles
     * 
    **/
    select?: RolesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RolesInclude | null
    /**
     * The data needed to update a Roles.
     * 
    **/
    data: XOR<RolesUpdateInput, RolesUncheckedUpdateInput>
    /**
     * Choose, which Roles to update.
     * 
    **/
    where: RolesWhereUniqueInput
  }


  /**
   * Roles updateMany
   */
  export type RolesUpdateManyArgs = {
    /**
     * The data used to update Roles.
     * 
    **/
    data: XOR<RolesUpdateManyMutationInput, RolesUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     * 
    **/
    where?: RolesWhereInput
  }


  /**
   * Roles upsert
   */
  export type RolesUpsertArgs = {
    /**
     * Select specific fields to fetch from the Roles
     * 
    **/
    select?: RolesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RolesInclude | null
    /**
     * The filter to search for the Roles to update in case it exists.
     * 
    **/
    where: RolesWhereUniqueInput
    /**
     * In case the Roles found by the `where` argument doesn't exist, create a new Roles with this data.
     * 
    **/
    create: XOR<RolesCreateInput, RolesUncheckedCreateInput>
    /**
     * In case the Roles was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<RolesUpdateInput, RolesUncheckedUpdateInput>
  }


  /**
   * Roles delete
   */
  export type RolesDeleteArgs = {
    /**
     * Select specific fields to fetch from the Roles
     * 
    **/
    select?: RolesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RolesInclude | null
    /**
     * Filter which Roles to delete.
     * 
    **/
    where: RolesWhereUniqueInput
  }


  /**
   * Roles deleteMany
   */
  export type RolesDeleteManyArgs = {
    /**
     * Filter which Roles to delete
     * 
    **/
    where?: RolesWhereInput
  }


  /**
   * Roles without action
   */
  export type RolesArgs = {
    /**
     * Select specific fields to fetch from the Roles
     * 
    **/
    select?: RolesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RolesInclude | null
  }



  /**
   * Model List
   */


  export type AggregateList = {
    _count: ListCountAggregateOutputType | null
    _avg: ListAvgAggregateOutputType | null
    _sum: ListSumAggregateOutputType | null
    _min: ListMinAggregateOutputType | null
    _max: ListMaxAggregateOutputType | null
  }

  export type ListAvgAggregateOutputType = {
    typeListId: number | null
    score: number | null
  }

  export type ListSumAggregateOutputType = {
    typeListId: number | null
    score: number | null
  }

  export type ListMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    typeListId: number | null
    animeId: string | null
    score: number | null
  }

  export type ListMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    typeListId: number | null
    animeId: string | null
    score: number | null
  }

  export type ListCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    userId: number
    typeListId: number
    animeId: number
    score: number
    _all: number
  }


  export type ListAvgAggregateInputType = {
    typeListId?: true
    score?: true
  }

  export type ListSumAggregateInputType = {
    typeListId?: true
    score?: true
  }

  export type ListMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    typeListId?: true
    animeId?: true
    score?: true
  }

  export type ListMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    typeListId?: true
    animeId?: true
    score?: true
  }

  export type ListCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    typeListId?: true
    animeId?: true
    score?: true
    _all?: true
  }

  export type ListAggregateArgs = {
    /**
     * Filter which List to aggregate.
     * 
    **/
    where?: ListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lists to fetch.
     * 
    **/
    orderBy?: Enumerable<ListOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Lists
    **/
    _count?: true | ListCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ListAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ListSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ListMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ListMaxAggregateInputType
  }

  export type GetListAggregateType<T extends ListAggregateArgs> = {
        [P in keyof T & keyof AggregateList]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateList[P]>
      : GetScalarType<T[P], AggregateList[P]>
  }




  export type ListGroupByArgs = {
    where?: ListWhereInput
    orderBy?: Enumerable<ListOrderByWithAggregationInput>
    by: Array<ListScalarFieldEnum>
    having?: ListScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ListCountAggregateInputType | true
    _avg?: ListAvgAggregateInputType
    _sum?: ListSumAggregateInputType
    _min?: ListMinAggregateInputType
    _max?: ListMaxAggregateInputType
  }


  export type ListGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    userId: string
    typeListId: number
    animeId: string
    score: number
    _count: ListCountAggregateOutputType | null
    _avg: ListAvgAggregateOutputType | null
    _sum: ListSumAggregateOutputType | null
    _min: ListMinAggregateOutputType | null
    _max: ListMaxAggregateOutputType | null
  }

  type GetListGroupByPayload<T extends ListGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ListGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ListGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ListGroupByOutputType[P]>
            : GetScalarType<T[P], ListGroupByOutputType[P]>
        }
      >
    >


  export type ListSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    typeList?: boolean | TypeListsArgs
    typeListId?: boolean
    anime?: boolean | AnimeArgs
    animeId?: boolean
    score?: boolean
  }


  export type ListInclude = {
    user?: boolean | UserArgs
    typeList?: boolean | TypeListsArgs
    anime?: boolean | AnimeArgs
  } 

  export type ListGetPayload<S extends boolean | null | undefined | ListArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? List :
    S extends undefined ? never :
    S extends { include: any } & (ListArgs | ListFindManyArgs)
    ? List  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'typeList' ? TypeListsGetPayload<S['include'][P]> :
        P extends 'anime' ? AnimeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ListArgs | ListFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'typeList' ? TypeListsGetPayload<S['select'][P]> :
        P extends 'anime' ? AnimeGetPayload<S['select'][P]> :  P extends keyof List ? List[P] : never
  } 
      : List


  type ListCountArgs = Merge<
    Omit<ListFindManyArgs, 'select' | 'include'> & {
      select?: ListCountAggregateInputType | true
    }
  >

  export interface ListDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one List that matches the filter.
     * @param {ListFindUniqueArgs} args - Arguments to find a List
     * @example
     * // Get one List
     * const list = await prisma.list.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ListFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ListFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'List'> extends True ? Prisma__ListClient<ListGetPayload<T>> : Prisma__ListClient<ListGetPayload<T> | null, null>

    /**
     * Find one List that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ListFindUniqueOrThrowArgs} args - Arguments to find a List
     * @example
     * // Get one List
     * const list = await prisma.list.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ListFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ListFindUniqueOrThrowArgs>
    ): Prisma__ListClient<ListGetPayload<T>>

    /**
     * Find the first List that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListFindFirstArgs} args - Arguments to find a List
     * @example
     * // Get one List
     * const list = await prisma.list.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ListFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ListFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'List'> extends True ? Prisma__ListClient<ListGetPayload<T>> : Prisma__ListClient<ListGetPayload<T> | null, null>

    /**
     * Find the first List that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListFindFirstOrThrowArgs} args - Arguments to find a List
     * @example
     * // Get one List
     * const list = await prisma.list.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ListFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ListFindFirstOrThrowArgs>
    ): Prisma__ListClient<ListGetPayload<T>>

    /**
     * Find zero or more Lists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lists
     * const lists = await prisma.list.findMany()
     * 
     * // Get first 10 Lists
     * const lists = await prisma.list.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const listWithIdOnly = await prisma.list.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ListFindManyArgs>(
      args?: SelectSubset<T, ListFindManyArgs>
    ): PrismaPromise<Array<ListGetPayload<T>>>

    /**
     * Create a List.
     * @param {ListCreateArgs} args - Arguments to create a List.
     * @example
     * // Create one List
     * const List = await prisma.list.create({
     *   data: {
     *     // ... data to create a List
     *   }
     * })
     * 
    **/
    create<T extends ListCreateArgs>(
      args: SelectSubset<T, ListCreateArgs>
    ): Prisma__ListClient<ListGetPayload<T>>

    /**
     * Delete a List.
     * @param {ListDeleteArgs} args - Arguments to delete one List.
     * @example
     * // Delete one List
     * const List = await prisma.list.delete({
     *   where: {
     *     // ... filter to delete one List
     *   }
     * })
     * 
    **/
    delete<T extends ListDeleteArgs>(
      args: SelectSubset<T, ListDeleteArgs>
    ): Prisma__ListClient<ListGetPayload<T>>

    /**
     * Update one List.
     * @param {ListUpdateArgs} args - Arguments to update one List.
     * @example
     * // Update one List
     * const list = await prisma.list.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ListUpdateArgs>(
      args: SelectSubset<T, ListUpdateArgs>
    ): Prisma__ListClient<ListGetPayload<T>>

    /**
     * Delete zero or more Lists.
     * @param {ListDeleteManyArgs} args - Arguments to filter Lists to delete.
     * @example
     * // Delete a few Lists
     * const { count } = await prisma.list.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ListDeleteManyArgs>(
      args?: SelectSubset<T, ListDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lists
     * const list = await prisma.list.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ListUpdateManyArgs>(
      args: SelectSubset<T, ListUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one List.
     * @param {ListUpsertArgs} args - Arguments to update or create a List.
     * @example
     * // Update or create a List
     * const list = await prisma.list.upsert({
     *   create: {
     *     // ... data to create a List
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the List we want to update
     *   }
     * })
    **/
    upsert<T extends ListUpsertArgs>(
      args: SelectSubset<T, ListUpsertArgs>
    ): Prisma__ListClient<ListGetPayload<T>>

    /**
     * Count the number of Lists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListCountArgs} args - Arguments to filter Lists to count.
     * @example
     * // Count the number of Lists
     * const count = await prisma.list.count({
     *   where: {
     *     // ... the filter for the Lists we want to count
     *   }
     * })
    **/
    count<T extends ListCountArgs>(
      args?: Subset<T, ListCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ListCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a List.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ListAggregateArgs>(args: Subset<T, ListAggregateArgs>): PrismaPromise<GetListAggregateType<T>>

    /**
     * Group by List.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ListGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ListGroupByArgs['orderBy'] }
        : { orderBy?: ListGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ListGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetListGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for List.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ListClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    typeList<T extends TypeListsArgs= {}>(args?: Subset<T, TypeListsArgs>): Prisma__TypeListsClient<TypeListsGetPayload<T> | Null>;

    anime<T extends AnimeArgs= {}>(args?: Subset<T, AnimeArgs>): Prisma__AnimeClient<AnimeGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * List base type for findUnique actions
   */
  export type ListFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the List
     * 
    **/
    select?: ListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ListInclude | null
    /**
     * Filter, which List to fetch.
     * 
    **/
    where: ListWhereUniqueInput
  }

  /**
   * List: findUnique
   */
  export interface ListFindUniqueArgs extends ListFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * List findUniqueOrThrow
   */
  export type ListFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the List
     * 
    **/
    select?: ListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ListInclude | null
    /**
     * Filter, which List to fetch.
     * 
    **/
    where: ListWhereUniqueInput
  }


  /**
   * List base type for findFirst actions
   */
  export type ListFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the List
     * 
    **/
    select?: ListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ListInclude | null
    /**
     * Filter, which List to fetch.
     * 
    **/
    where?: ListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lists to fetch.
     * 
    **/
    orderBy?: Enumerable<ListOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lists.
     * 
    **/
    cursor?: ListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lists.
     * 
    **/
    distinct?: Enumerable<ListScalarFieldEnum>
  }

  /**
   * List: findFirst
   */
  export interface ListFindFirstArgs extends ListFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * List findFirstOrThrow
   */
  export type ListFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the List
     * 
    **/
    select?: ListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ListInclude | null
    /**
     * Filter, which List to fetch.
     * 
    **/
    where?: ListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lists to fetch.
     * 
    **/
    orderBy?: Enumerable<ListOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lists.
     * 
    **/
    cursor?: ListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lists.
     * 
    **/
    distinct?: Enumerable<ListScalarFieldEnum>
  }


  /**
   * List findMany
   */
  export type ListFindManyArgs = {
    /**
     * Select specific fields to fetch from the List
     * 
    **/
    select?: ListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ListInclude | null
    /**
     * Filter, which Lists to fetch.
     * 
    **/
    where?: ListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lists to fetch.
     * 
    **/
    orderBy?: Enumerable<ListOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Lists.
     * 
    **/
    cursor?: ListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lists.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ListScalarFieldEnum>
  }


  /**
   * List create
   */
  export type ListCreateArgs = {
    /**
     * Select specific fields to fetch from the List
     * 
    **/
    select?: ListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ListInclude | null
    /**
     * The data needed to create a List.
     * 
    **/
    data: XOR<ListCreateInput, ListUncheckedCreateInput>
  }


  /**
   * List update
   */
  export type ListUpdateArgs = {
    /**
     * Select specific fields to fetch from the List
     * 
    **/
    select?: ListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ListInclude | null
    /**
     * The data needed to update a List.
     * 
    **/
    data: XOR<ListUpdateInput, ListUncheckedUpdateInput>
    /**
     * Choose, which List to update.
     * 
    **/
    where: ListWhereUniqueInput
  }


  /**
   * List updateMany
   */
  export type ListUpdateManyArgs = {
    /**
     * The data used to update Lists.
     * 
    **/
    data: XOR<ListUpdateManyMutationInput, ListUncheckedUpdateManyInput>
    /**
     * Filter which Lists to update
     * 
    **/
    where?: ListWhereInput
  }


  /**
   * List upsert
   */
  export type ListUpsertArgs = {
    /**
     * Select specific fields to fetch from the List
     * 
    **/
    select?: ListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ListInclude | null
    /**
     * The filter to search for the List to update in case it exists.
     * 
    **/
    where: ListWhereUniqueInput
    /**
     * In case the List found by the `where` argument doesn't exist, create a new List with this data.
     * 
    **/
    create: XOR<ListCreateInput, ListUncheckedCreateInput>
    /**
     * In case the List was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ListUpdateInput, ListUncheckedUpdateInput>
  }


  /**
   * List delete
   */
  export type ListDeleteArgs = {
    /**
     * Select specific fields to fetch from the List
     * 
    **/
    select?: ListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ListInclude | null
    /**
     * Filter which List to delete.
     * 
    **/
    where: ListWhereUniqueInput
  }


  /**
   * List deleteMany
   */
  export type ListDeleteManyArgs = {
    /**
     * Filter which Lists to delete
     * 
    **/
    where?: ListWhereInput
  }


  /**
   * List without action
   */
  export type ListArgs = {
    /**
     * Select specific fields to fetch from the List
     * 
    **/
    select?: ListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ListInclude | null
  }



  /**
   * Model Anime
   */


  export type AggregateAnime = {
    _count: AnimeCountAggregateOutputType | null
    _avg: AnimeAvgAggregateOutputType | null
    _sum: AnimeSumAggregateOutputType | null
    _min: AnimeMinAggregateOutputType | null
    _max: AnimeMaxAggregateOutputType | null
  }

  export type AnimeAvgAggregateOutputType = {
    nbrEpisode: number | null
  }

  export type AnimeSumAggregateOutputType = {
    nbrEpisode: number | null
  }

  export type AnimeMinAggregateOutputType = {
    id: string | null
    name: string | null
    year: string | null
    nbrEpisode: number | null
    imageUrl: string | null
  }

  export type AnimeMaxAggregateOutputType = {
    id: string | null
    name: string | null
    year: string | null
    nbrEpisode: number | null
    imageUrl: string | null
  }

  export type AnimeCountAggregateOutputType = {
    id: number
    name: number
    year: number
    nbrEpisode: number
    imageUrl: number
    _all: number
  }


  export type AnimeAvgAggregateInputType = {
    nbrEpisode?: true
  }

  export type AnimeSumAggregateInputType = {
    nbrEpisode?: true
  }

  export type AnimeMinAggregateInputType = {
    id?: true
    name?: true
    year?: true
    nbrEpisode?: true
    imageUrl?: true
  }

  export type AnimeMaxAggregateInputType = {
    id?: true
    name?: true
    year?: true
    nbrEpisode?: true
    imageUrl?: true
  }

  export type AnimeCountAggregateInputType = {
    id?: true
    name?: true
    year?: true
    nbrEpisode?: true
    imageUrl?: true
    _all?: true
  }

  export type AnimeAggregateArgs = {
    /**
     * Filter which Anime to aggregate.
     * 
    **/
    where?: AnimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anime to fetch.
     * 
    **/
    orderBy?: Enumerable<AnimeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AnimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anime from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anime.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Anime
    **/
    _count?: true | AnimeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AnimeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AnimeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnimeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnimeMaxAggregateInputType
  }

  export type GetAnimeAggregateType<T extends AnimeAggregateArgs> = {
        [P in keyof T & keyof AggregateAnime]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnime[P]>
      : GetScalarType<T[P], AggregateAnime[P]>
  }




  export type AnimeGroupByArgs = {
    where?: AnimeWhereInput
    orderBy?: Enumerable<AnimeOrderByWithAggregationInput>
    by: Array<AnimeScalarFieldEnum>
    having?: AnimeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnimeCountAggregateInputType | true
    _avg?: AnimeAvgAggregateInputType
    _sum?: AnimeSumAggregateInputType
    _min?: AnimeMinAggregateInputType
    _max?: AnimeMaxAggregateInputType
  }


  export type AnimeGroupByOutputType = {
    id: string
    name: string
    year: string
    nbrEpisode: number
    imageUrl: string
    _count: AnimeCountAggregateOutputType | null
    _avg: AnimeAvgAggregateOutputType | null
    _sum: AnimeSumAggregateOutputType | null
    _min: AnimeMinAggregateOutputType | null
    _max: AnimeMaxAggregateOutputType | null
  }

  type GetAnimeGroupByPayload<T extends AnimeGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AnimeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnimeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnimeGroupByOutputType[P]>
            : GetScalarType<T[P], AnimeGroupByOutputType[P]>
        }
      >
    >


  export type AnimeSelect = {
    id?: boolean
    name?: boolean
    year?: boolean
    nbrEpisode?: boolean
    imageUrl?: boolean
    Lists?: boolean | ListFindManyArgs
    _count?: boolean | AnimeCountOutputTypeArgs
  }


  export type AnimeInclude = {
    Lists?: boolean | ListFindManyArgs
    _count?: boolean | AnimeCountOutputTypeArgs
  } 

  export type AnimeGetPayload<S extends boolean | null | undefined | AnimeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Anime :
    S extends undefined ? never :
    S extends { include: any } & (AnimeArgs | AnimeFindManyArgs)
    ? Anime  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Lists' ? Array < ListGetPayload<S['include'][P]>>  :
        P extends '_count' ? AnimeCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (AnimeArgs | AnimeFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Lists' ? Array < ListGetPayload<S['select'][P]>>  :
        P extends '_count' ? AnimeCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Anime ? Anime[P] : never
  } 
      : Anime


  type AnimeCountArgs = Merge<
    Omit<AnimeFindManyArgs, 'select' | 'include'> & {
      select?: AnimeCountAggregateInputType | true
    }
  >

  export interface AnimeDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Anime that matches the filter.
     * @param {AnimeFindUniqueArgs} args - Arguments to find a Anime
     * @example
     * // Get one Anime
     * const anime = await prisma.anime.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AnimeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AnimeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Anime'> extends True ? Prisma__AnimeClient<AnimeGetPayload<T>> : Prisma__AnimeClient<AnimeGetPayload<T> | null, null>

    /**
     * Find one Anime that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AnimeFindUniqueOrThrowArgs} args - Arguments to find a Anime
     * @example
     * // Get one Anime
     * const anime = await prisma.anime.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AnimeFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AnimeFindUniqueOrThrowArgs>
    ): Prisma__AnimeClient<AnimeGetPayload<T>>

    /**
     * Find the first Anime that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeFindFirstArgs} args - Arguments to find a Anime
     * @example
     * // Get one Anime
     * const anime = await prisma.anime.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AnimeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AnimeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Anime'> extends True ? Prisma__AnimeClient<AnimeGetPayload<T>> : Prisma__AnimeClient<AnimeGetPayload<T> | null, null>

    /**
     * Find the first Anime that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeFindFirstOrThrowArgs} args - Arguments to find a Anime
     * @example
     * // Get one Anime
     * const anime = await prisma.anime.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AnimeFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AnimeFindFirstOrThrowArgs>
    ): Prisma__AnimeClient<AnimeGetPayload<T>>

    /**
     * Find zero or more Anime that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Anime
     * const anime = await prisma.anime.findMany()
     * 
     * // Get first 10 Anime
     * const anime = await prisma.anime.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const animeWithIdOnly = await prisma.anime.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AnimeFindManyArgs>(
      args?: SelectSubset<T, AnimeFindManyArgs>
    ): PrismaPromise<Array<AnimeGetPayload<T>>>

    /**
     * Create a Anime.
     * @param {AnimeCreateArgs} args - Arguments to create a Anime.
     * @example
     * // Create one Anime
     * const Anime = await prisma.anime.create({
     *   data: {
     *     // ... data to create a Anime
     *   }
     * })
     * 
    **/
    create<T extends AnimeCreateArgs>(
      args: SelectSubset<T, AnimeCreateArgs>
    ): Prisma__AnimeClient<AnimeGetPayload<T>>

    /**
     * Delete a Anime.
     * @param {AnimeDeleteArgs} args - Arguments to delete one Anime.
     * @example
     * // Delete one Anime
     * const Anime = await prisma.anime.delete({
     *   where: {
     *     // ... filter to delete one Anime
     *   }
     * })
     * 
    **/
    delete<T extends AnimeDeleteArgs>(
      args: SelectSubset<T, AnimeDeleteArgs>
    ): Prisma__AnimeClient<AnimeGetPayload<T>>

    /**
     * Update one Anime.
     * @param {AnimeUpdateArgs} args - Arguments to update one Anime.
     * @example
     * // Update one Anime
     * const anime = await prisma.anime.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AnimeUpdateArgs>(
      args: SelectSubset<T, AnimeUpdateArgs>
    ): Prisma__AnimeClient<AnimeGetPayload<T>>

    /**
     * Delete zero or more Anime.
     * @param {AnimeDeleteManyArgs} args - Arguments to filter Anime to delete.
     * @example
     * // Delete a few Anime
     * const { count } = await prisma.anime.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AnimeDeleteManyArgs>(
      args?: SelectSubset<T, AnimeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Anime.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Anime
     * const anime = await prisma.anime.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AnimeUpdateManyArgs>(
      args: SelectSubset<T, AnimeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Anime.
     * @param {AnimeUpsertArgs} args - Arguments to update or create a Anime.
     * @example
     * // Update or create a Anime
     * const anime = await prisma.anime.upsert({
     *   create: {
     *     // ... data to create a Anime
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Anime we want to update
     *   }
     * })
    **/
    upsert<T extends AnimeUpsertArgs>(
      args: SelectSubset<T, AnimeUpsertArgs>
    ): Prisma__AnimeClient<AnimeGetPayload<T>>

    /**
     * Count the number of Anime.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeCountArgs} args - Arguments to filter Anime to count.
     * @example
     * // Count the number of Anime
     * const count = await prisma.anime.count({
     *   where: {
     *     // ... the filter for the Anime we want to count
     *   }
     * })
    **/
    count<T extends AnimeCountArgs>(
      args?: Subset<T, AnimeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnimeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Anime.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnimeAggregateArgs>(args: Subset<T, AnimeAggregateArgs>): PrismaPromise<GetAnimeAggregateType<T>>

    /**
     * Group by Anime.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnimeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnimeGroupByArgs['orderBy'] }
        : { orderBy?: AnimeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnimeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnimeGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Anime.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AnimeClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Lists<T extends ListFindManyArgs= {}>(args?: Subset<T, ListFindManyArgs>): PrismaPromise<Array<ListGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Anime base type for findUnique actions
   */
  export type AnimeFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Anime
     * 
    **/
    select?: AnimeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AnimeInclude | null
    /**
     * Filter, which Anime to fetch.
     * 
    **/
    where: AnimeWhereUniqueInput
  }

  /**
   * Anime: findUnique
   */
  export interface AnimeFindUniqueArgs extends AnimeFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Anime findUniqueOrThrow
   */
  export type AnimeFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Anime
     * 
    **/
    select?: AnimeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AnimeInclude | null
    /**
     * Filter, which Anime to fetch.
     * 
    **/
    where: AnimeWhereUniqueInput
  }


  /**
   * Anime base type for findFirst actions
   */
  export type AnimeFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Anime
     * 
    **/
    select?: AnimeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AnimeInclude | null
    /**
     * Filter, which Anime to fetch.
     * 
    **/
    where?: AnimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anime to fetch.
     * 
    **/
    orderBy?: Enumerable<AnimeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Anime.
     * 
    **/
    cursor?: AnimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anime from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anime.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Anime.
     * 
    **/
    distinct?: Enumerable<AnimeScalarFieldEnum>
  }

  /**
   * Anime: findFirst
   */
  export interface AnimeFindFirstArgs extends AnimeFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Anime findFirstOrThrow
   */
  export type AnimeFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Anime
     * 
    **/
    select?: AnimeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AnimeInclude | null
    /**
     * Filter, which Anime to fetch.
     * 
    **/
    where?: AnimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anime to fetch.
     * 
    **/
    orderBy?: Enumerable<AnimeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Anime.
     * 
    **/
    cursor?: AnimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anime from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anime.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Anime.
     * 
    **/
    distinct?: Enumerable<AnimeScalarFieldEnum>
  }


  /**
   * Anime findMany
   */
  export type AnimeFindManyArgs = {
    /**
     * Select specific fields to fetch from the Anime
     * 
    **/
    select?: AnimeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AnimeInclude | null
    /**
     * Filter, which Anime to fetch.
     * 
    **/
    where?: AnimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anime to fetch.
     * 
    **/
    orderBy?: Enumerable<AnimeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Anime.
     * 
    **/
    cursor?: AnimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anime from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anime.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AnimeScalarFieldEnum>
  }


  /**
   * Anime create
   */
  export type AnimeCreateArgs = {
    /**
     * Select specific fields to fetch from the Anime
     * 
    **/
    select?: AnimeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AnimeInclude | null
    /**
     * The data needed to create a Anime.
     * 
    **/
    data: XOR<AnimeCreateInput, AnimeUncheckedCreateInput>
  }


  /**
   * Anime update
   */
  export type AnimeUpdateArgs = {
    /**
     * Select specific fields to fetch from the Anime
     * 
    **/
    select?: AnimeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AnimeInclude | null
    /**
     * The data needed to update a Anime.
     * 
    **/
    data: XOR<AnimeUpdateInput, AnimeUncheckedUpdateInput>
    /**
     * Choose, which Anime to update.
     * 
    **/
    where: AnimeWhereUniqueInput
  }


  /**
   * Anime updateMany
   */
  export type AnimeUpdateManyArgs = {
    /**
     * The data used to update Anime.
     * 
    **/
    data: XOR<AnimeUpdateManyMutationInput, AnimeUncheckedUpdateManyInput>
    /**
     * Filter which Anime to update
     * 
    **/
    where?: AnimeWhereInput
  }


  /**
   * Anime upsert
   */
  export type AnimeUpsertArgs = {
    /**
     * Select specific fields to fetch from the Anime
     * 
    **/
    select?: AnimeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AnimeInclude | null
    /**
     * The filter to search for the Anime to update in case it exists.
     * 
    **/
    where: AnimeWhereUniqueInput
    /**
     * In case the Anime found by the `where` argument doesn't exist, create a new Anime with this data.
     * 
    **/
    create: XOR<AnimeCreateInput, AnimeUncheckedCreateInput>
    /**
     * In case the Anime was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AnimeUpdateInput, AnimeUncheckedUpdateInput>
  }


  /**
   * Anime delete
   */
  export type AnimeDeleteArgs = {
    /**
     * Select specific fields to fetch from the Anime
     * 
    **/
    select?: AnimeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AnimeInclude | null
    /**
     * Filter which Anime to delete.
     * 
    **/
    where: AnimeWhereUniqueInput
  }


  /**
   * Anime deleteMany
   */
  export type AnimeDeleteManyArgs = {
    /**
     * Filter which Anime to delete
     * 
    **/
    where?: AnimeWhereInput
  }


  /**
   * Anime without action
   */
  export type AnimeArgs = {
    /**
     * Select specific fields to fetch from the Anime
     * 
    **/
    select?: AnimeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AnimeInclude | null
  }



  /**
   * Model TypeLists
   */


  export type AggregateTypeLists = {
    _count: TypeListsCountAggregateOutputType | null
    _avg: TypeListsAvgAggregateOutputType | null
    _sum: TypeListsSumAggregateOutputType | null
    _min: TypeListsMinAggregateOutputType | null
    _max: TypeListsMaxAggregateOutputType | null
  }

  export type TypeListsAvgAggregateOutputType = {
    id: number | null
  }

  export type TypeListsSumAggregateOutputType = {
    id: number | null
  }

  export type TypeListsMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type TypeListsMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type TypeListsCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type TypeListsAvgAggregateInputType = {
    id?: true
  }

  export type TypeListsSumAggregateInputType = {
    id?: true
  }

  export type TypeListsMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type TypeListsMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type TypeListsCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type TypeListsAggregateArgs = {
    /**
     * Filter which TypeLists to aggregate.
     * 
    **/
    where?: TypeListsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TypeLists to fetch.
     * 
    **/
    orderBy?: Enumerable<TypeListsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TypeListsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TypeLists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TypeLists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TypeLists
    **/
    _count?: true | TypeListsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TypeListsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TypeListsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TypeListsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TypeListsMaxAggregateInputType
  }

  export type GetTypeListsAggregateType<T extends TypeListsAggregateArgs> = {
        [P in keyof T & keyof AggregateTypeLists]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTypeLists[P]>
      : GetScalarType<T[P], AggregateTypeLists[P]>
  }




  export type TypeListsGroupByArgs = {
    where?: TypeListsWhereInput
    orderBy?: Enumerable<TypeListsOrderByWithAggregationInput>
    by: Array<TypeListsScalarFieldEnum>
    having?: TypeListsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TypeListsCountAggregateInputType | true
    _avg?: TypeListsAvgAggregateInputType
    _sum?: TypeListsSumAggregateInputType
    _min?: TypeListsMinAggregateInputType
    _max?: TypeListsMaxAggregateInputType
  }


  export type TypeListsGroupByOutputType = {
    id: number
    name: string
    _count: TypeListsCountAggregateOutputType | null
    _avg: TypeListsAvgAggregateOutputType | null
    _sum: TypeListsSumAggregateOutputType | null
    _min: TypeListsMinAggregateOutputType | null
    _max: TypeListsMaxAggregateOutputType | null
  }

  type GetTypeListsGroupByPayload<T extends TypeListsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TypeListsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TypeListsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TypeListsGroupByOutputType[P]>
            : GetScalarType<T[P], TypeListsGroupByOutputType[P]>
        }
      >
    >


  export type TypeListsSelect = {
    id?: boolean
    name?: boolean
    Lists?: boolean | ListFindManyArgs
    _count?: boolean | TypeListsCountOutputTypeArgs
  }


  export type TypeListsInclude = {
    Lists?: boolean | ListFindManyArgs
    _count?: boolean | TypeListsCountOutputTypeArgs
  } 

  export type TypeListsGetPayload<S extends boolean | null | undefined | TypeListsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TypeLists :
    S extends undefined ? never :
    S extends { include: any } & (TypeListsArgs | TypeListsFindManyArgs)
    ? TypeLists  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Lists' ? Array < ListGetPayload<S['include'][P]>>  :
        P extends '_count' ? TypeListsCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TypeListsArgs | TypeListsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Lists' ? Array < ListGetPayload<S['select'][P]>>  :
        P extends '_count' ? TypeListsCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof TypeLists ? TypeLists[P] : never
  } 
      : TypeLists


  type TypeListsCountArgs = Merge<
    Omit<TypeListsFindManyArgs, 'select' | 'include'> & {
      select?: TypeListsCountAggregateInputType | true
    }
  >

  export interface TypeListsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one TypeLists that matches the filter.
     * @param {TypeListsFindUniqueArgs} args - Arguments to find a TypeLists
     * @example
     * // Get one TypeLists
     * const typeLists = await prisma.typeLists.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TypeListsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TypeListsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TypeLists'> extends True ? Prisma__TypeListsClient<TypeListsGetPayload<T>> : Prisma__TypeListsClient<TypeListsGetPayload<T> | null, null>

    /**
     * Find one TypeLists that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TypeListsFindUniqueOrThrowArgs} args - Arguments to find a TypeLists
     * @example
     * // Get one TypeLists
     * const typeLists = await prisma.typeLists.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TypeListsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TypeListsFindUniqueOrThrowArgs>
    ): Prisma__TypeListsClient<TypeListsGetPayload<T>>

    /**
     * Find the first TypeLists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeListsFindFirstArgs} args - Arguments to find a TypeLists
     * @example
     * // Get one TypeLists
     * const typeLists = await prisma.typeLists.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TypeListsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TypeListsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TypeLists'> extends True ? Prisma__TypeListsClient<TypeListsGetPayload<T>> : Prisma__TypeListsClient<TypeListsGetPayload<T> | null, null>

    /**
     * Find the first TypeLists that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeListsFindFirstOrThrowArgs} args - Arguments to find a TypeLists
     * @example
     * // Get one TypeLists
     * const typeLists = await prisma.typeLists.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TypeListsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TypeListsFindFirstOrThrowArgs>
    ): Prisma__TypeListsClient<TypeListsGetPayload<T>>

    /**
     * Find zero or more TypeLists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeListsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TypeLists
     * const typeLists = await prisma.typeLists.findMany()
     * 
     * // Get first 10 TypeLists
     * const typeLists = await prisma.typeLists.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const typeListsWithIdOnly = await prisma.typeLists.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TypeListsFindManyArgs>(
      args?: SelectSubset<T, TypeListsFindManyArgs>
    ): PrismaPromise<Array<TypeListsGetPayload<T>>>

    /**
     * Create a TypeLists.
     * @param {TypeListsCreateArgs} args - Arguments to create a TypeLists.
     * @example
     * // Create one TypeLists
     * const TypeLists = await prisma.typeLists.create({
     *   data: {
     *     // ... data to create a TypeLists
     *   }
     * })
     * 
    **/
    create<T extends TypeListsCreateArgs>(
      args: SelectSubset<T, TypeListsCreateArgs>
    ): Prisma__TypeListsClient<TypeListsGetPayload<T>>

    /**
     * Delete a TypeLists.
     * @param {TypeListsDeleteArgs} args - Arguments to delete one TypeLists.
     * @example
     * // Delete one TypeLists
     * const TypeLists = await prisma.typeLists.delete({
     *   where: {
     *     // ... filter to delete one TypeLists
     *   }
     * })
     * 
    **/
    delete<T extends TypeListsDeleteArgs>(
      args: SelectSubset<T, TypeListsDeleteArgs>
    ): Prisma__TypeListsClient<TypeListsGetPayload<T>>

    /**
     * Update one TypeLists.
     * @param {TypeListsUpdateArgs} args - Arguments to update one TypeLists.
     * @example
     * // Update one TypeLists
     * const typeLists = await prisma.typeLists.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TypeListsUpdateArgs>(
      args: SelectSubset<T, TypeListsUpdateArgs>
    ): Prisma__TypeListsClient<TypeListsGetPayload<T>>

    /**
     * Delete zero or more TypeLists.
     * @param {TypeListsDeleteManyArgs} args - Arguments to filter TypeLists to delete.
     * @example
     * // Delete a few TypeLists
     * const { count } = await prisma.typeLists.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TypeListsDeleteManyArgs>(
      args?: SelectSubset<T, TypeListsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more TypeLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeListsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TypeLists
     * const typeLists = await prisma.typeLists.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TypeListsUpdateManyArgs>(
      args: SelectSubset<T, TypeListsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one TypeLists.
     * @param {TypeListsUpsertArgs} args - Arguments to update or create a TypeLists.
     * @example
     * // Update or create a TypeLists
     * const typeLists = await prisma.typeLists.upsert({
     *   create: {
     *     // ... data to create a TypeLists
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TypeLists we want to update
     *   }
     * })
    **/
    upsert<T extends TypeListsUpsertArgs>(
      args: SelectSubset<T, TypeListsUpsertArgs>
    ): Prisma__TypeListsClient<TypeListsGetPayload<T>>

    /**
     * Count the number of TypeLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeListsCountArgs} args - Arguments to filter TypeLists to count.
     * @example
     * // Count the number of TypeLists
     * const count = await prisma.typeLists.count({
     *   where: {
     *     // ... the filter for the TypeLists we want to count
     *   }
     * })
    **/
    count<T extends TypeListsCountArgs>(
      args?: Subset<T, TypeListsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TypeListsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TypeLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeListsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TypeListsAggregateArgs>(args: Subset<T, TypeListsAggregateArgs>): PrismaPromise<GetTypeListsAggregateType<T>>

    /**
     * Group by TypeLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeListsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TypeListsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TypeListsGroupByArgs['orderBy'] }
        : { orderBy?: TypeListsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TypeListsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTypeListsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for TypeLists.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TypeListsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Lists<T extends ListFindManyArgs= {}>(args?: Subset<T, ListFindManyArgs>): PrismaPromise<Array<ListGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * TypeLists base type for findUnique actions
   */
  export type TypeListsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the TypeLists
     * 
    **/
    select?: TypeListsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TypeListsInclude | null
    /**
     * Filter, which TypeLists to fetch.
     * 
    **/
    where: TypeListsWhereUniqueInput
  }

  /**
   * TypeLists: findUnique
   */
  export interface TypeListsFindUniqueArgs extends TypeListsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TypeLists findUniqueOrThrow
   */
  export type TypeListsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TypeLists
     * 
    **/
    select?: TypeListsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TypeListsInclude | null
    /**
     * Filter, which TypeLists to fetch.
     * 
    **/
    where: TypeListsWhereUniqueInput
  }


  /**
   * TypeLists base type for findFirst actions
   */
  export type TypeListsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the TypeLists
     * 
    **/
    select?: TypeListsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TypeListsInclude | null
    /**
     * Filter, which TypeLists to fetch.
     * 
    **/
    where?: TypeListsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TypeLists to fetch.
     * 
    **/
    orderBy?: Enumerable<TypeListsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TypeLists.
     * 
    **/
    cursor?: TypeListsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TypeLists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TypeLists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TypeLists.
     * 
    **/
    distinct?: Enumerable<TypeListsScalarFieldEnum>
  }

  /**
   * TypeLists: findFirst
   */
  export interface TypeListsFindFirstArgs extends TypeListsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TypeLists findFirstOrThrow
   */
  export type TypeListsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TypeLists
     * 
    **/
    select?: TypeListsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TypeListsInclude | null
    /**
     * Filter, which TypeLists to fetch.
     * 
    **/
    where?: TypeListsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TypeLists to fetch.
     * 
    **/
    orderBy?: Enumerable<TypeListsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TypeLists.
     * 
    **/
    cursor?: TypeListsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TypeLists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TypeLists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TypeLists.
     * 
    **/
    distinct?: Enumerable<TypeListsScalarFieldEnum>
  }


  /**
   * TypeLists findMany
   */
  export type TypeListsFindManyArgs = {
    /**
     * Select specific fields to fetch from the TypeLists
     * 
    **/
    select?: TypeListsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TypeListsInclude | null
    /**
     * Filter, which TypeLists to fetch.
     * 
    **/
    where?: TypeListsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TypeLists to fetch.
     * 
    **/
    orderBy?: Enumerable<TypeListsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TypeLists.
     * 
    **/
    cursor?: TypeListsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TypeLists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TypeLists.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TypeListsScalarFieldEnum>
  }


  /**
   * TypeLists create
   */
  export type TypeListsCreateArgs = {
    /**
     * Select specific fields to fetch from the TypeLists
     * 
    **/
    select?: TypeListsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TypeListsInclude | null
    /**
     * The data needed to create a TypeLists.
     * 
    **/
    data: XOR<TypeListsCreateInput, TypeListsUncheckedCreateInput>
  }


  /**
   * TypeLists update
   */
  export type TypeListsUpdateArgs = {
    /**
     * Select specific fields to fetch from the TypeLists
     * 
    **/
    select?: TypeListsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TypeListsInclude | null
    /**
     * The data needed to update a TypeLists.
     * 
    **/
    data: XOR<TypeListsUpdateInput, TypeListsUncheckedUpdateInput>
    /**
     * Choose, which TypeLists to update.
     * 
    **/
    where: TypeListsWhereUniqueInput
  }


  /**
   * TypeLists updateMany
   */
  export type TypeListsUpdateManyArgs = {
    /**
     * The data used to update TypeLists.
     * 
    **/
    data: XOR<TypeListsUpdateManyMutationInput, TypeListsUncheckedUpdateManyInput>
    /**
     * Filter which TypeLists to update
     * 
    **/
    where?: TypeListsWhereInput
  }


  /**
   * TypeLists upsert
   */
  export type TypeListsUpsertArgs = {
    /**
     * Select specific fields to fetch from the TypeLists
     * 
    **/
    select?: TypeListsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TypeListsInclude | null
    /**
     * The filter to search for the TypeLists to update in case it exists.
     * 
    **/
    where: TypeListsWhereUniqueInput
    /**
     * In case the TypeLists found by the `where` argument doesn't exist, create a new TypeLists with this data.
     * 
    **/
    create: XOR<TypeListsCreateInput, TypeListsUncheckedCreateInput>
    /**
     * In case the TypeLists was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TypeListsUpdateInput, TypeListsUncheckedUpdateInput>
  }


  /**
   * TypeLists delete
   */
  export type TypeListsDeleteArgs = {
    /**
     * Select specific fields to fetch from the TypeLists
     * 
    **/
    select?: TypeListsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TypeListsInclude | null
    /**
     * Filter which TypeLists to delete.
     * 
    **/
    where: TypeListsWhereUniqueInput
  }


  /**
   * TypeLists deleteMany
   */
  export type TypeListsDeleteManyArgs = {
    /**
     * Filter which TypeLists to delete
     * 
    **/
    where?: TypeListsWhereInput
  }


  /**
   * TypeLists without action
   */
  export type TypeListsArgs = {
    /**
     * Select specific fields to fetch from the TypeLists
     * 
    **/
    select?: TypeListsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TypeListsInclude | null
  }



  /**
   * Model ProfilePicture
   */


  export type AggregateProfilePicture = {
    _count: ProfilePictureCountAggregateOutputType | null
    _min: ProfilePictureMinAggregateOutputType | null
    _max: ProfilePictureMaxAggregateOutputType | null
  }

  export type ProfilePictureMinAggregateOutputType = {
    id: string | null
    publicId: string | null
    url: string | null
    format: string | null
    version: string | null
  }

  export type ProfilePictureMaxAggregateOutputType = {
    id: string | null
    publicId: string | null
    url: string | null
    format: string | null
    version: string | null
  }

  export type ProfilePictureCountAggregateOutputType = {
    id: number
    publicId: number
    url: number
    format: number
    version: number
    _all: number
  }


  export type ProfilePictureMinAggregateInputType = {
    id?: true
    publicId?: true
    url?: true
    format?: true
    version?: true
  }

  export type ProfilePictureMaxAggregateInputType = {
    id?: true
    publicId?: true
    url?: true
    format?: true
    version?: true
  }

  export type ProfilePictureCountAggregateInputType = {
    id?: true
    publicId?: true
    url?: true
    format?: true
    version?: true
    _all?: true
  }

  export type ProfilePictureAggregateArgs = {
    /**
     * Filter which ProfilePicture to aggregate.
     * 
    **/
    where?: ProfilePictureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfilePictures to fetch.
     * 
    **/
    orderBy?: Enumerable<ProfilePictureOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ProfilePictureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfilePictures from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfilePictures.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProfilePictures
    **/
    _count?: true | ProfilePictureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfilePictureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfilePictureMaxAggregateInputType
  }

  export type GetProfilePictureAggregateType<T extends ProfilePictureAggregateArgs> = {
        [P in keyof T & keyof AggregateProfilePicture]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfilePicture[P]>
      : GetScalarType<T[P], AggregateProfilePicture[P]>
  }




  export type ProfilePictureGroupByArgs = {
    where?: ProfilePictureWhereInput
    orderBy?: Enumerable<ProfilePictureOrderByWithAggregationInput>
    by: Array<ProfilePictureScalarFieldEnum>
    having?: ProfilePictureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfilePictureCountAggregateInputType | true
    _min?: ProfilePictureMinAggregateInputType
    _max?: ProfilePictureMaxAggregateInputType
  }


  export type ProfilePictureGroupByOutputType = {
    id: string
    publicId: string
    url: string
    format: string
    version: string
    _count: ProfilePictureCountAggregateOutputType | null
    _min: ProfilePictureMinAggregateOutputType | null
    _max: ProfilePictureMaxAggregateOutputType | null
  }

  type GetProfilePictureGroupByPayload<T extends ProfilePictureGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProfilePictureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfilePictureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfilePictureGroupByOutputType[P]>
            : GetScalarType<T[P], ProfilePictureGroupByOutputType[P]>
        }
      >
    >


  export type ProfilePictureSelect = {
    id?: boolean
    publicId?: boolean
    url?: boolean
    format?: boolean
    version?: boolean
    Users?: boolean | UserFindManyArgs
    _count?: boolean | ProfilePictureCountOutputTypeArgs
  }


  export type ProfilePictureInclude = {
    Users?: boolean | UserFindManyArgs
    _count?: boolean | ProfilePictureCountOutputTypeArgs
  } 

  export type ProfilePictureGetPayload<S extends boolean | null | undefined | ProfilePictureArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ProfilePicture :
    S extends undefined ? never :
    S extends { include: any } & (ProfilePictureArgs | ProfilePictureFindManyArgs)
    ? ProfilePicture  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Users' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends '_count' ? ProfilePictureCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ProfilePictureArgs | ProfilePictureFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Users' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends '_count' ? ProfilePictureCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof ProfilePicture ? ProfilePicture[P] : never
  } 
      : ProfilePicture


  type ProfilePictureCountArgs = Merge<
    Omit<ProfilePictureFindManyArgs, 'select' | 'include'> & {
      select?: ProfilePictureCountAggregateInputType | true
    }
  >

  export interface ProfilePictureDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one ProfilePicture that matches the filter.
     * @param {ProfilePictureFindUniqueArgs} args - Arguments to find a ProfilePicture
     * @example
     * // Get one ProfilePicture
     * const profilePicture = await prisma.profilePicture.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProfilePictureFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProfilePictureFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ProfilePicture'> extends True ? Prisma__ProfilePictureClient<ProfilePictureGetPayload<T>> : Prisma__ProfilePictureClient<ProfilePictureGetPayload<T> | null, null>

    /**
     * Find one ProfilePicture that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProfilePictureFindUniqueOrThrowArgs} args - Arguments to find a ProfilePicture
     * @example
     * // Get one ProfilePicture
     * const profilePicture = await prisma.profilePicture.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProfilePictureFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ProfilePictureFindUniqueOrThrowArgs>
    ): Prisma__ProfilePictureClient<ProfilePictureGetPayload<T>>

    /**
     * Find the first ProfilePicture that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePictureFindFirstArgs} args - Arguments to find a ProfilePicture
     * @example
     * // Get one ProfilePicture
     * const profilePicture = await prisma.profilePicture.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProfilePictureFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProfilePictureFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ProfilePicture'> extends True ? Prisma__ProfilePictureClient<ProfilePictureGetPayload<T>> : Prisma__ProfilePictureClient<ProfilePictureGetPayload<T> | null, null>

    /**
     * Find the first ProfilePicture that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePictureFindFirstOrThrowArgs} args - Arguments to find a ProfilePicture
     * @example
     * // Get one ProfilePicture
     * const profilePicture = await prisma.profilePicture.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProfilePictureFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProfilePictureFindFirstOrThrowArgs>
    ): Prisma__ProfilePictureClient<ProfilePictureGetPayload<T>>

    /**
     * Find zero or more ProfilePictures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePictureFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProfilePictures
     * const profilePictures = await prisma.profilePicture.findMany()
     * 
     * // Get first 10 ProfilePictures
     * const profilePictures = await prisma.profilePicture.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profilePictureWithIdOnly = await prisma.profilePicture.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProfilePictureFindManyArgs>(
      args?: SelectSubset<T, ProfilePictureFindManyArgs>
    ): PrismaPromise<Array<ProfilePictureGetPayload<T>>>

    /**
     * Create a ProfilePicture.
     * @param {ProfilePictureCreateArgs} args - Arguments to create a ProfilePicture.
     * @example
     * // Create one ProfilePicture
     * const ProfilePicture = await prisma.profilePicture.create({
     *   data: {
     *     // ... data to create a ProfilePicture
     *   }
     * })
     * 
    **/
    create<T extends ProfilePictureCreateArgs>(
      args: SelectSubset<T, ProfilePictureCreateArgs>
    ): Prisma__ProfilePictureClient<ProfilePictureGetPayload<T>>

    /**
     * Delete a ProfilePicture.
     * @param {ProfilePictureDeleteArgs} args - Arguments to delete one ProfilePicture.
     * @example
     * // Delete one ProfilePicture
     * const ProfilePicture = await prisma.profilePicture.delete({
     *   where: {
     *     // ... filter to delete one ProfilePicture
     *   }
     * })
     * 
    **/
    delete<T extends ProfilePictureDeleteArgs>(
      args: SelectSubset<T, ProfilePictureDeleteArgs>
    ): Prisma__ProfilePictureClient<ProfilePictureGetPayload<T>>

    /**
     * Update one ProfilePicture.
     * @param {ProfilePictureUpdateArgs} args - Arguments to update one ProfilePicture.
     * @example
     * // Update one ProfilePicture
     * const profilePicture = await prisma.profilePicture.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProfilePictureUpdateArgs>(
      args: SelectSubset<T, ProfilePictureUpdateArgs>
    ): Prisma__ProfilePictureClient<ProfilePictureGetPayload<T>>

    /**
     * Delete zero or more ProfilePictures.
     * @param {ProfilePictureDeleteManyArgs} args - Arguments to filter ProfilePictures to delete.
     * @example
     * // Delete a few ProfilePictures
     * const { count } = await prisma.profilePicture.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProfilePictureDeleteManyArgs>(
      args?: SelectSubset<T, ProfilePictureDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProfilePictures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePictureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProfilePictures
     * const profilePicture = await prisma.profilePicture.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProfilePictureUpdateManyArgs>(
      args: SelectSubset<T, ProfilePictureUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ProfilePicture.
     * @param {ProfilePictureUpsertArgs} args - Arguments to update or create a ProfilePicture.
     * @example
     * // Update or create a ProfilePicture
     * const profilePicture = await prisma.profilePicture.upsert({
     *   create: {
     *     // ... data to create a ProfilePicture
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProfilePicture we want to update
     *   }
     * })
    **/
    upsert<T extends ProfilePictureUpsertArgs>(
      args: SelectSubset<T, ProfilePictureUpsertArgs>
    ): Prisma__ProfilePictureClient<ProfilePictureGetPayload<T>>

    /**
     * Count the number of ProfilePictures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePictureCountArgs} args - Arguments to filter ProfilePictures to count.
     * @example
     * // Count the number of ProfilePictures
     * const count = await prisma.profilePicture.count({
     *   where: {
     *     // ... the filter for the ProfilePictures we want to count
     *   }
     * })
    **/
    count<T extends ProfilePictureCountArgs>(
      args?: Subset<T, ProfilePictureCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfilePictureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProfilePicture.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePictureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfilePictureAggregateArgs>(args: Subset<T, ProfilePictureAggregateArgs>): PrismaPromise<GetProfilePictureAggregateType<T>>

    /**
     * Group by ProfilePicture.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePictureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfilePictureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfilePictureGroupByArgs['orderBy'] }
        : { orderBy?: ProfilePictureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfilePictureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfilePictureGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ProfilePicture.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProfilePictureClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Users<T extends UserFindManyArgs= {}>(args?: Subset<T, UserFindManyArgs>): PrismaPromise<Array<UserGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ProfilePicture base type for findUnique actions
   */
  export type ProfilePictureFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     * 
    **/
    select?: ProfilePictureSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfilePictureInclude | null
    /**
     * Filter, which ProfilePicture to fetch.
     * 
    **/
    where: ProfilePictureWhereUniqueInput
  }

  /**
   * ProfilePicture: findUnique
   */
  export interface ProfilePictureFindUniqueArgs extends ProfilePictureFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ProfilePicture findUniqueOrThrow
   */
  export type ProfilePictureFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     * 
    **/
    select?: ProfilePictureSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfilePictureInclude | null
    /**
     * Filter, which ProfilePicture to fetch.
     * 
    **/
    where: ProfilePictureWhereUniqueInput
  }


  /**
   * ProfilePicture base type for findFirst actions
   */
  export type ProfilePictureFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     * 
    **/
    select?: ProfilePictureSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfilePictureInclude | null
    /**
     * Filter, which ProfilePicture to fetch.
     * 
    **/
    where?: ProfilePictureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfilePictures to fetch.
     * 
    **/
    orderBy?: Enumerable<ProfilePictureOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfilePictures.
     * 
    **/
    cursor?: ProfilePictureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfilePictures from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfilePictures.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfilePictures.
     * 
    **/
    distinct?: Enumerable<ProfilePictureScalarFieldEnum>
  }

  /**
   * ProfilePicture: findFirst
   */
  export interface ProfilePictureFindFirstArgs extends ProfilePictureFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ProfilePicture findFirstOrThrow
   */
  export type ProfilePictureFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     * 
    **/
    select?: ProfilePictureSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfilePictureInclude | null
    /**
     * Filter, which ProfilePicture to fetch.
     * 
    **/
    where?: ProfilePictureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfilePictures to fetch.
     * 
    **/
    orderBy?: Enumerable<ProfilePictureOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfilePictures.
     * 
    **/
    cursor?: ProfilePictureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfilePictures from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfilePictures.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfilePictures.
     * 
    **/
    distinct?: Enumerable<ProfilePictureScalarFieldEnum>
  }


  /**
   * ProfilePicture findMany
   */
  export type ProfilePictureFindManyArgs = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     * 
    **/
    select?: ProfilePictureSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfilePictureInclude | null
    /**
     * Filter, which ProfilePictures to fetch.
     * 
    **/
    where?: ProfilePictureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfilePictures to fetch.
     * 
    **/
    orderBy?: Enumerable<ProfilePictureOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProfilePictures.
     * 
    **/
    cursor?: ProfilePictureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfilePictures from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfilePictures.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProfilePictureScalarFieldEnum>
  }


  /**
   * ProfilePicture create
   */
  export type ProfilePictureCreateArgs = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     * 
    **/
    select?: ProfilePictureSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfilePictureInclude | null
    /**
     * The data needed to create a ProfilePicture.
     * 
    **/
    data: XOR<ProfilePictureCreateInput, ProfilePictureUncheckedCreateInput>
  }


  /**
   * ProfilePicture update
   */
  export type ProfilePictureUpdateArgs = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     * 
    **/
    select?: ProfilePictureSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfilePictureInclude | null
    /**
     * The data needed to update a ProfilePicture.
     * 
    **/
    data: XOR<ProfilePictureUpdateInput, ProfilePictureUncheckedUpdateInput>
    /**
     * Choose, which ProfilePicture to update.
     * 
    **/
    where: ProfilePictureWhereUniqueInput
  }


  /**
   * ProfilePicture updateMany
   */
  export type ProfilePictureUpdateManyArgs = {
    /**
     * The data used to update ProfilePictures.
     * 
    **/
    data: XOR<ProfilePictureUpdateManyMutationInput, ProfilePictureUncheckedUpdateManyInput>
    /**
     * Filter which ProfilePictures to update
     * 
    **/
    where?: ProfilePictureWhereInput
  }


  /**
   * ProfilePicture upsert
   */
  export type ProfilePictureUpsertArgs = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     * 
    **/
    select?: ProfilePictureSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfilePictureInclude | null
    /**
     * The filter to search for the ProfilePicture to update in case it exists.
     * 
    **/
    where: ProfilePictureWhereUniqueInput
    /**
     * In case the ProfilePicture found by the `where` argument doesn't exist, create a new ProfilePicture with this data.
     * 
    **/
    create: XOR<ProfilePictureCreateInput, ProfilePictureUncheckedCreateInput>
    /**
     * In case the ProfilePicture was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ProfilePictureUpdateInput, ProfilePictureUncheckedUpdateInput>
  }


  /**
   * ProfilePicture delete
   */
  export type ProfilePictureDeleteArgs = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     * 
    **/
    select?: ProfilePictureSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfilePictureInclude | null
    /**
     * Filter which ProfilePicture to delete.
     * 
    **/
    where: ProfilePictureWhereUniqueInput
  }


  /**
   * ProfilePicture deleteMany
   */
  export type ProfilePictureDeleteManyArgs = {
    /**
     * Filter which ProfilePictures to delete
     * 
    **/
    where?: ProfilePictureWhereInput
  }


  /**
   * ProfilePicture without action
   */
  export type ProfilePictureArgs = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     * 
    **/
    select?: ProfilePictureSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfilePictureInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AnimeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    year: 'year',
    nbrEpisode: 'nbrEpisode',
    imageUrl: 'imageUrl'
  };

  export type AnimeScalarFieldEnum = (typeof AnimeScalarFieldEnum)[keyof typeof AnimeScalarFieldEnum]


  export const ListScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    typeListId: 'typeListId',
    animeId: 'animeId',
    score: 'score'
  };

  export type ListScalarFieldEnum = (typeof ListScalarFieldEnum)[keyof typeof ListScalarFieldEnum]


  export const ProfilePictureScalarFieldEnum: {
    id: 'id',
    publicId: 'publicId',
    url: 'url',
    format: 'format',
    version: 'version'
  };

  export type ProfilePictureScalarFieldEnum = (typeof ProfilePictureScalarFieldEnum)[keyof typeof ProfilePictureScalarFieldEnum]


  export const RolesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    color: 'color'
  };

  export type RolesScalarFieldEnum = (typeof RolesScalarFieldEnum)[keyof typeof RolesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TypeListsScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type TypeListsScalarFieldEnum = (typeof TypeListsScalarFieldEnum)[keyof typeof TypeListsScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    passwordHash: 'passwordHash',
    userAuthToken: 'userAuthToken',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    roleId: 'roleId',
    profilePictureId: 'profilePictureId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    username?: StringFilter | string
    passwordHash?: StringFilter | string
    userAuthToken?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    role?: XOR<RolesRelationFilter, RolesWhereInput>
    roleId?: IntFilter | number
    Lists?: ListListRelationFilter
    profilePicture?: XOR<ProfilePictureRelationFilter, ProfilePictureWhereInput>
    profilePictureId?: StringFilter | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    userAuthToken?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: RolesOrderByWithRelationInput
    roleId?: SortOrder
    Lists?: ListOrderByRelationAggregateInput
    profilePicture?: ProfilePictureOrderByWithRelationInput
    profilePictureId?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: string
    username?: string
    userAuthToken?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    userAuthToken?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    roleId?: SortOrder
    profilePictureId?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    username?: StringWithAggregatesFilter | string
    passwordHash?: StringWithAggregatesFilter | string
    userAuthToken?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    roleId?: IntWithAggregatesFilter | number
    profilePictureId?: StringWithAggregatesFilter | string
  }

  export type RolesWhereInput = {
    AND?: Enumerable<RolesWhereInput>
    OR?: Enumerable<RolesWhereInput>
    NOT?: Enumerable<RolesWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    color?: StringFilter | string
    Users?: UserListRelationFilter
  }

  export type RolesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
    Users?: UserOrderByRelationAggregateInput
  }

  export type RolesWhereUniqueInput = {
    id?: number
    name?: string
    color?: string
  }

  export type RolesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
    _count?: RolesCountOrderByAggregateInput
    _avg?: RolesAvgOrderByAggregateInput
    _max?: RolesMaxOrderByAggregateInput
    _min?: RolesMinOrderByAggregateInput
    _sum?: RolesSumOrderByAggregateInput
  }

  export type RolesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RolesScalarWhereWithAggregatesInput>
    OR?: Enumerable<RolesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RolesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    color?: StringWithAggregatesFilter | string
  }

  export type ListWhereInput = {
    AND?: Enumerable<ListWhereInput>
    OR?: Enumerable<ListWhereInput>
    NOT?: Enumerable<ListWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: StringFilter | string
    typeList?: XOR<TypeListsRelationFilter, TypeListsWhereInput>
    typeListId?: IntFilter | number
    anime?: XOR<AnimeRelationFilter, AnimeWhereInput>
    animeId?: StringFilter | string
    score?: IntFilter | number
  }

  export type ListOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
    typeList?: TypeListsOrderByWithRelationInput
    typeListId?: SortOrder
    anime?: AnimeOrderByWithRelationInput
    animeId?: SortOrder
    score?: SortOrder
  }

  export type ListWhereUniqueInput = {
    id?: string
    userId_animeId?: ListUserIdAnimeIdCompoundUniqueInput
  }

  export type ListOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    typeListId?: SortOrder
    animeId?: SortOrder
    score?: SortOrder
    _count?: ListCountOrderByAggregateInput
    _avg?: ListAvgOrderByAggregateInput
    _max?: ListMaxOrderByAggregateInput
    _min?: ListMinOrderByAggregateInput
    _sum?: ListSumOrderByAggregateInput
  }

  export type ListScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ListScalarWhereWithAggregatesInput>
    OR?: Enumerable<ListScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ListScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    userId?: StringWithAggregatesFilter | string
    typeListId?: IntWithAggregatesFilter | number
    animeId?: StringWithAggregatesFilter | string
    score?: IntWithAggregatesFilter | number
  }

  export type AnimeWhereInput = {
    AND?: Enumerable<AnimeWhereInput>
    OR?: Enumerable<AnimeWhereInput>
    NOT?: Enumerable<AnimeWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    year?: StringFilter | string
    nbrEpisode?: IntFilter | number
    imageUrl?: StringFilter | string
    Lists?: ListListRelationFilter
  }

  export type AnimeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    year?: SortOrder
    nbrEpisode?: SortOrder
    imageUrl?: SortOrder
    Lists?: ListOrderByRelationAggregateInput
  }

  export type AnimeWhereUniqueInput = {
    id?: string
  }

  export type AnimeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    year?: SortOrder
    nbrEpisode?: SortOrder
    imageUrl?: SortOrder
    _count?: AnimeCountOrderByAggregateInput
    _avg?: AnimeAvgOrderByAggregateInput
    _max?: AnimeMaxOrderByAggregateInput
    _min?: AnimeMinOrderByAggregateInput
    _sum?: AnimeSumOrderByAggregateInput
  }

  export type AnimeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AnimeScalarWhereWithAggregatesInput>
    OR?: Enumerable<AnimeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AnimeScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    year?: StringWithAggregatesFilter | string
    nbrEpisode?: IntWithAggregatesFilter | number
    imageUrl?: StringWithAggregatesFilter | string
  }

  export type TypeListsWhereInput = {
    AND?: Enumerable<TypeListsWhereInput>
    OR?: Enumerable<TypeListsWhereInput>
    NOT?: Enumerable<TypeListsWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    Lists?: ListListRelationFilter
  }

  export type TypeListsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    Lists?: ListOrderByRelationAggregateInput
  }

  export type TypeListsWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type TypeListsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: TypeListsCountOrderByAggregateInput
    _avg?: TypeListsAvgOrderByAggregateInput
    _max?: TypeListsMaxOrderByAggregateInput
    _min?: TypeListsMinOrderByAggregateInput
    _sum?: TypeListsSumOrderByAggregateInput
  }

  export type TypeListsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TypeListsScalarWhereWithAggregatesInput>
    OR?: Enumerable<TypeListsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TypeListsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type ProfilePictureWhereInput = {
    AND?: Enumerable<ProfilePictureWhereInput>
    OR?: Enumerable<ProfilePictureWhereInput>
    NOT?: Enumerable<ProfilePictureWhereInput>
    id?: StringFilter | string
    publicId?: StringFilter | string
    url?: StringFilter | string
    format?: StringFilter | string
    version?: StringFilter | string
    Users?: UserListRelationFilter
  }

  export type ProfilePictureOrderByWithRelationInput = {
    id?: SortOrder
    publicId?: SortOrder
    url?: SortOrder
    format?: SortOrder
    version?: SortOrder
    Users?: UserOrderByRelationAggregateInput
  }

  export type ProfilePictureWhereUniqueInput = {
    id?: string
    publicId?: string
    url?: string
  }

  export type ProfilePictureOrderByWithAggregationInput = {
    id?: SortOrder
    publicId?: SortOrder
    url?: SortOrder
    format?: SortOrder
    version?: SortOrder
    _count?: ProfilePictureCountOrderByAggregateInput
    _max?: ProfilePictureMaxOrderByAggregateInput
    _min?: ProfilePictureMinOrderByAggregateInput
  }

  export type ProfilePictureScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProfilePictureScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProfilePictureScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProfilePictureScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    publicId?: StringWithAggregatesFilter | string
    url?: StringWithAggregatesFilter | string
    format?: StringWithAggregatesFilter | string
    version?: StringWithAggregatesFilter | string
  }

  export type UserCreateInput = {
    id?: string
    username: string
    passwordHash: string
    userAuthToken: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role: RolesCreateNestedOneWithoutUsersInput
    Lists?: ListCreateNestedManyWithoutUserInput
    profilePicture: ProfilePictureCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    username: string
    passwordHash: string
    userAuthToken: string
    createdAt?: Date | string
    updatedAt?: Date | string
    roleId: number
    Lists?: ListUncheckedCreateNestedManyWithoutUserInput
    profilePictureId: string
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    userAuthToken?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: RolesUpdateOneRequiredWithoutUsersNestedInput
    Lists?: ListUpdateManyWithoutUserNestedInput
    profilePicture?: ProfilePictureUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    userAuthToken?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roleId?: IntFieldUpdateOperationsInput | number
    Lists?: ListUncheckedUpdateManyWithoutUserNestedInput
    profilePictureId?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    userAuthToken?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    userAuthToken?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roleId?: IntFieldUpdateOperationsInput | number
    profilePictureId?: StringFieldUpdateOperationsInput | string
  }

  export type RolesCreateInput = {
    name: string
    color: string
    Users?: UserCreateNestedManyWithoutRoleInput
  }

  export type RolesUncheckedCreateInput = {
    id?: number
    name: string
    color: string
    Users?: UserUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RolesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    Users?: UserUpdateManyWithoutRoleNestedInput
  }

  export type RolesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    Users?: UserUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RolesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type RolesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type ListCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutListsInput
    typeList: TypeListsCreateNestedOneWithoutListsInput
    anime: AnimeCreateNestedOneWithoutListsInput
    score: number
  }

  export type ListUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    typeListId: number
    animeId: string
    score: number
  }

  export type ListUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutListsNestedInput
    typeList?: TypeListsUpdateOneRequiredWithoutListsNestedInput
    anime?: AnimeUpdateOneRequiredWithoutListsNestedInput
    score?: IntFieldUpdateOperationsInput | number
  }

  export type ListUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    typeListId?: IntFieldUpdateOperationsInput | number
    animeId?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
  }

  export type ListUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    score?: IntFieldUpdateOperationsInput | number
  }

  export type ListUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    typeListId?: IntFieldUpdateOperationsInput | number
    animeId?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
  }

  export type AnimeCreateInput = {
    id: string
    name: string
    year: string
    nbrEpisode: number
    imageUrl: string
    Lists?: ListCreateNestedManyWithoutAnimeInput
  }

  export type AnimeUncheckedCreateInput = {
    id: string
    name: string
    year: string
    nbrEpisode: number
    imageUrl: string
    Lists?: ListUncheckedCreateNestedManyWithoutAnimeInput
  }

  export type AnimeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    nbrEpisode?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    Lists?: ListUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    nbrEpisode?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    Lists?: ListUncheckedUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    nbrEpisode?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    nbrEpisode?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type TypeListsCreateInput = {
    name: string
    Lists?: ListCreateNestedManyWithoutTypeListInput
  }

  export type TypeListsUncheckedCreateInput = {
    id?: number
    name: string
    Lists?: ListUncheckedCreateNestedManyWithoutTypeListInput
  }

  export type TypeListsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    Lists?: ListUpdateManyWithoutTypeListNestedInput
  }

  export type TypeListsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    Lists?: ListUncheckedUpdateManyWithoutTypeListNestedInput
  }

  export type TypeListsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TypeListsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ProfilePictureCreateInput = {
    id?: string
    publicId: string
    url: string
    format: string
    version: string
    Users?: UserCreateNestedManyWithoutProfilePictureInput
  }

  export type ProfilePictureUncheckedCreateInput = {
    id?: string
    publicId: string
    url: string
    format: string
    version: string
    Users?: UserUncheckedCreateNestedManyWithoutProfilePictureInput
  }

  export type ProfilePictureUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    publicId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    format?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    Users?: UserUpdateManyWithoutProfilePictureNestedInput
  }

  export type ProfilePictureUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    publicId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    format?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    Users?: UserUncheckedUpdateManyWithoutProfilePictureNestedInput
  }

  export type ProfilePictureUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    publicId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    format?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
  }

  export type ProfilePictureUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    publicId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    format?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type RolesRelationFilter = {
    is?: RolesWhereInput
    isNot?: RolesWhereInput
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type ListListRelationFilter = {
    every?: ListWhereInput
    some?: ListWhereInput
    none?: ListWhereInput
  }

  export type ProfilePictureRelationFilter = {
    is?: ProfilePictureWhereInput
    isNot?: ProfilePictureWhereInput
  }

  export type ListOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    userAuthToken?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    roleId?: SortOrder
    profilePictureId?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    roleId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    userAuthToken?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    roleId?: SortOrder
    profilePictureId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    userAuthToken?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    roleId?: SortOrder
    profilePictureId?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    roleId?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RolesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
  }

  export type RolesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RolesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
  }

  export type RolesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
  }

  export type RolesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type TypeListsRelationFilter = {
    is?: TypeListsWhereInput
    isNot?: TypeListsWhereInput
  }

  export type AnimeRelationFilter = {
    is?: AnimeWhereInput
    isNot?: AnimeWhereInput
  }

  export type ListUserIdAnimeIdCompoundUniqueInput = {
    userId: string
    animeId: string
  }

  export type ListCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    typeListId?: SortOrder
    animeId?: SortOrder
    score?: SortOrder
  }

  export type ListAvgOrderByAggregateInput = {
    typeListId?: SortOrder
    score?: SortOrder
  }

  export type ListMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    typeListId?: SortOrder
    animeId?: SortOrder
    score?: SortOrder
  }

  export type ListMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    typeListId?: SortOrder
    animeId?: SortOrder
    score?: SortOrder
  }

  export type ListSumOrderByAggregateInput = {
    typeListId?: SortOrder
    score?: SortOrder
  }

  export type AnimeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    year?: SortOrder
    nbrEpisode?: SortOrder
    imageUrl?: SortOrder
  }

  export type AnimeAvgOrderByAggregateInput = {
    nbrEpisode?: SortOrder
  }

  export type AnimeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    year?: SortOrder
    nbrEpisode?: SortOrder
    imageUrl?: SortOrder
  }

  export type AnimeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    year?: SortOrder
    nbrEpisode?: SortOrder
    imageUrl?: SortOrder
  }

  export type AnimeSumOrderByAggregateInput = {
    nbrEpisode?: SortOrder
  }

  export type TypeListsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TypeListsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TypeListsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TypeListsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TypeListsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProfilePictureCountOrderByAggregateInput = {
    id?: SortOrder
    publicId?: SortOrder
    url?: SortOrder
    format?: SortOrder
    version?: SortOrder
  }

  export type ProfilePictureMaxOrderByAggregateInput = {
    id?: SortOrder
    publicId?: SortOrder
    url?: SortOrder
    format?: SortOrder
    version?: SortOrder
  }

  export type ProfilePictureMinOrderByAggregateInput = {
    id?: SortOrder
    publicId?: SortOrder
    url?: SortOrder
    format?: SortOrder
    version?: SortOrder
  }

  export type RolesCreateNestedOneWithoutUsersInput = {
    create?: XOR<RolesCreateWithoutUsersInput, RolesUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RolesCreateOrConnectWithoutUsersInput
    connect?: RolesWhereUniqueInput
  }

  export type ListCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ListCreateWithoutUserInput>, Enumerable<ListUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ListCreateOrConnectWithoutUserInput>
    connect?: Enumerable<ListWhereUniqueInput>
  }

  export type ProfilePictureCreateNestedOneWithoutUsersInput = {
    create?: XOR<ProfilePictureCreateWithoutUsersInput, ProfilePictureUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ProfilePictureCreateOrConnectWithoutUsersInput
    connect?: ProfilePictureWhereUniqueInput
  }

  export type ListUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ListCreateWithoutUserInput>, Enumerable<ListUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ListCreateOrConnectWithoutUserInput>
    connect?: Enumerable<ListWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type RolesUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<RolesCreateWithoutUsersInput, RolesUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RolesCreateOrConnectWithoutUsersInput
    upsert?: RolesUpsertWithoutUsersInput
    connect?: RolesWhereUniqueInput
    update?: XOR<RolesUpdateWithoutUsersInput, RolesUncheckedUpdateWithoutUsersInput>
  }

  export type ListUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ListCreateWithoutUserInput>, Enumerable<ListUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ListCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ListUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<ListWhereUniqueInput>
    disconnect?: Enumerable<ListWhereUniqueInput>
    delete?: Enumerable<ListWhereUniqueInput>
    connect?: Enumerable<ListWhereUniqueInput>
    update?: Enumerable<ListUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ListUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ListScalarWhereInput>
  }

  export type ProfilePictureUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<ProfilePictureCreateWithoutUsersInput, ProfilePictureUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ProfilePictureCreateOrConnectWithoutUsersInput
    upsert?: ProfilePictureUpsertWithoutUsersInput
    connect?: ProfilePictureWhereUniqueInput
    update?: XOR<ProfilePictureUpdateWithoutUsersInput, ProfilePictureUncheckedUpdateWithoutUsersInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ListUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ListCreateWithoutUserInput>, Enumerable<ListUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ListCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ListUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<ListWhereUniqueInput>
    disconnect?: Enumerable<ListWhereUniqueInput>
    delete?: Enumerable<ListWhereUniqueInput>
    connect?: Enumerable<ListWhereUniqueInput>
    update?: Enumerable<ListUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ListUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ListScalarWhereInput>
  }

  export type UserCreateNestedManyWithoutRoleInput = {
    create?: XOR<Enumerable<UserCreateWithoutRoleInput>, Enumerable<UserUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRoleInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<Enumerable<UserCreateWithoutRoleInput>, Enumerable<UserUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRoleInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserUpdateManyWithoutRoleNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutRoleInput>, Enumerable<UserUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRoleInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutRoleInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutRoleInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutRoleInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutRoleInput>, Enumerable<UserUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRoleInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutRoleInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutRoleInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutRoleInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutListsInput = {
    create?: XOR<UserCreateWithoutListsInput, UserUncheckedCreateWithoutListsInput>
    connectOrCreate?: UserCreateOrConnectWithoutListsInput
    connect?: UserWhereUniqueInput
  }

  export type TypeListsCreateNestedOneWithoutListsInput = {
    create?: XOR<TypeListsCreateWithoutListsInput, TypeListsUncheckedCreateWithoutListsInput>
    connectOrCreate?: TypeListsCreateOrConnectWithoutListsInput
    connect?: TypeListsWhereUniqueInput
  }

  export type AnimeCreateNestedOneWithoutListsInput = {
    create?: XOR<AnimeCreateWithoutListsInput, AnimeUncheckedCreateWithoutListsInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutListsInput
    connect?: AnimeWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutListsNestedInput = {
    create?: XOR<UserCreateWithoutListsInput, UserUncheckedCreateWithoutListsInput>
    connectOrCreate?: UserCreateOrConnectWithoutListsInput
    upsert?: UserUpsertWithoutListsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutListsInput, UserUncheckedUpdateWithoutListsInput>
  }

  export type TypeListsUpdateOneRequiredWithoutListsNestedInput = {
    create?: XOR<TypeListsCreateWithoutListsInput, TypeListsUncheckedCreateWithoutListsInput>
    connectOrCreate?: TypeListsCreateOrConnectWithoutListsInput
    upsert?: TypeListsUpsertWithoutListsInput
    connect?: TypeListsWhereUniqueInput
    update?: XOR<TypeListsUpdateWithoutListsInput, TypeListsUncheckedUpdateWithoutListsInput>
  }

  export type AnimeUpdateOneRequiredWithoutListsNestedInput = {
    create?: XOR<AnimeCreateWithoutListsInput, AnimeUncheckedCreateWithoutListsInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutListsInput
    upsert?: AnimeUpsertWithoutListsInput
    connect?: AnimeWhereUniqueInput
    update?: XOR<AnimeUpdateWithoutListsInput, AnimeUncheckedUpdateWithoutListsInput>
  }

  export type ListCreateNestedManyWithoutAnimeInput = {
    create?: XOR<Enumerable<ListCreateWithoutAnimeInput>, Enumerable<ListUncheckedCreateWithoutAnimeInput>>
    connectOrCreate?: Enumerable<ListCreateOrConnectWithoutAnimeInput>
    connect?: Enumerable<ListWhereUniqueInput>
  }

  export type ListUncheckedCreateNestedManyWithoutAnimeInput = {
    create?: XOR<Enumerable<ListCreateWithoutAnimeInput>, Enumerable<ListUncheckedCreateWithoutAnimeInput>>
    connectOrCreate?: Enumerable<ListCreateOrConnectWithoutAnimeInput>
    connect?: Enumerable<ListWhereUniqueInput>
  }

  export type ListUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<Enumerable<ListCreateWithoutAnimeInput>, Enumerable<ListUncheckedCreateWithoutAnimeInput>>
    connectOrCreate?: Enumerable<ListCreateOrConnectWithoutAnimeInput>
    upsert?: Enumerable<ListUpsertWithWhereUniqueWithoutAnimeInput>
    set?: Enumerable<ListWhereUniqueInput>
    disconnect?: Enumerable<ListWhereUniqueInput>
    delete?: Enumerable<ListWhereUniqueInput>
    connect?: Enumerable<ListWhereUniqueInput>
    update?: Enumerable<ListUpdateWithWhereUniqueWithoutAnimeInput>
    updateMany?: Enumerable<ListUpdateManyWithWhereWithoutAnimeInput>
    deleteMany?: Enumerable<ListScalarWhereInput>
  }

  export type ListUncheckedUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<Enumerable<ListCreateWithoutAnimeInput>, Enumerable<ListUncheckedCreateWithoutAnimeInput>>
    connectOrCreate?: Enumerable<ListCreateOrConnectWithoutAnimeInput>
    upsert?: Enumerable<ListUpsertWithWhereUniqueWithoutAnimeInput>
    set?: Enumerable<ListWhereUniqueInput>
    disconnect?: Enumerable<ListWhereUniqueInput>
    delete?: Enumerable<ListWhereUniqueInput>
    connect?: Enumerable<ListWhereUniqueInput>
    update?: Enumerable<ListUpdateWithWhereUniqueWithoutAnimeInput>
    updateMany?: Enumerable<ListUpdateManyWithWhereWithoutAnimeInput>
    deleteMany?: Enumerable<ListScalarWhereInput>
  }

  export type ListCreateNestedManyWithoutTypeListInput = {
    create?: XOR<Enumerable<ListCreateWithoutTypeListInput>, Enumerable<ListUncheckedCreateWithoutTypeListInput>>
    connectOrCreate?: Enumerable<ListCreateOrConnectWithoutTypeListInput>
    connect?: Enumerable<ListWhereUniqueInput>
  }

  export type ListUncheckedCreateNestedManyWithoutTypeListInput = {
    create?: XOR<Enumerable<ListCreateWithoutTypeListInput>, Enumerable<ListUncheckedCreateWithoutTypeListInput>>
    connectOrCreate?: Enumerable<ListCreateOrConnectWithoutTypeListInput>
    connect?: Enumerable<ListWhereUniqueInput>
  }

  export type ListUpdateManyWithoutTypeListNestedInput = {
    create?: XOR<Enumerable<ListCreateWithoutTypeListInput>, Enumerable<ListUncheckedCreateWithoutTypeListInput>>
    connectOrCreate?: Enumerable<ListCreateOrConnectWithoutTypeListInput>
    upsert?: Enumerable<ListUpsertWithWhereUniqueWithoutTypeListInput>
    set?: Enumerable<ListWhereUniqueInput>
    disconnect?: Enumerable<ListWhereUniqueInput>
    delete?: Enumerable<ListWhereUniqueInput>
    connect?: Enumerable<ListWhereUniqueInput>
    update?: Enumerable<ListUpdateWithWhereUniqueWithoutTypeListInput>
    updateMany?: Enumerable<ListUpdateManyWithWhereWithoutTypeListInput>
    deleteMany?: Enumerable<ListScalarWhereInput>
  }

  export type ListUncheckedUpdateManyWithoutTypeListNestedInput = {
    create?: XOR<Enumerable<ListCreateWithoutTypeListInput>, Enumerable<ListUncheckedCreateWithoutTypeListInput>>
    connectOrCreate?: Enumerable<ListCreateOrConnectWithoutTypeListInput>
    upsert?: Enumerable<ListUpsertWithWhereUniqueWithoutTypeListInput>
    set?: Enumerable<ListWhereUniqueInput>
    disconnect?: Enumerable<ListWhereUniqueInput>
    delete?: Enumerable<ListWhereUniqueInput>
    connect?: Enumerable<ListWhereUniqueInput>
    update?: Enumerable<ListUpdateWithWhereUniqueWithoutTypeListInput>
    updateMany?: Enumerable<ListUpdateManyWithWhereWithoutTypeListInput>
    deleteMany?: Enumerable<ListScalarWhereInput>
  }

  export type UserCreateNestedManyWithoutProfilePictureInput = {
    create?: XOR<Enumerable<UserCreateWithoutProfilePictureInput>, Enumerable<UserUncheckedCreateWithoutProfilePictureInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutProfilePictureInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutProfilePictureInput = {
    create?: XOR<Enumerable<UserCreateWithoutProfilePictureInput>, Enumerable<UserUncheckedCreateWithoutProfilePictureInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutProfilePictureInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserUpdateManyWithoutProfilePictureNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutProfilePictureInput>, Enumerable<UserUncheckedCreateWithoutProfilePictureInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutProfilePictureInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutProfilePictureInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutProfilePictureInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutProfilePictureInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutProfilePictureNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutProfilePictureInput>, Enumerable<UserUncheckedCreateWithoutProfilePictureInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutProfilePictureInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutProfilePictureInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutProfilePictureInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutProfilePictureInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type RolesCreateWithoutUsersInput = {
    name: string
    color: string
  }

  export type RolesUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    color: string
  }

  export type RolesCreateOrConnectWithoutUsersInput = {
    where: RolesWhereUniqueInput
    create: XOR<RolesCreateWithoutUsersInput, RolesUncheckedCreateWithoutUsersInput>
  }

  export type ListCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    typeList: TypeListsCreateNestedOneWithoutListsInput
    anime: AnimeCreateNestedOneWithoutListsInput
    score: number
  }

  export type ListUncheckedCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    typeListId: number
    animeId: string
    score: number
  }

  export type ListCreateOrConnectWithoutUserInput = {
    where: ListWhereUniqueInput
    create: XOR<ListCreateWithoutUserInput, ListUncheckedCreateWithoutUserInput>
  }

  export type ProfilePictureCreateWithoutUsersInput = {
    id?: string
    publicId: string
    url: string
    format: string
    version: string
  }

  export type ProfilePictureUncheckedCreateWithoutUsersInput = {
    id?: string
    publicId: string
    url: string
    format: string
    version: string
  }

  export type ProfilePictureCreateOrConnectWithoutUsersInput = {
    where: ProfilePictureWhereUniqueInput
    create: XOR<ProfilePictureCreateWithoutUsersInput, ProfilePictureUncheckedCreateWithoutUsersInput>
  }

  export type RolesUpsertWithoutUsersInput = {
    update: XOR<RolesUpdateWithoutUsersInput, RolesUncheckedUpdateWithoutUsersInput>
    create: XOR<RolesCreateWithoutUsersInput, RolesUncheckedCreateWithoutUsersInput>
  }

  export type RolesUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type RolesUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type ListUpsertWithWhereUniqueWithoutUserInput = {
    where: ListWhereUniqueInput
    update: XOR<ListUpdateWithoutUserInput, ListUncheckedUpdateWithoutUserInput>
    create: XOR<ListCreateWithoutUserInput, ListUncheckedCreateWithoutUserInput>
  }

  export type ListUpdateWithWhereUniqueWithoutUserInput = {
    where: ListWhereUniqueInput
    data: XOR<ListUpdateWithoutUserInput, ListUncheckedUpdateWithoutUserInput>
  }

  export type ListUpdateManyWithWhereWithoutUserInput = {
    where: ListScalarWhereInput
    data: XOR<ListUpdateManyMutationInput, ListUncheckedUpdateManyWithoutListsInput>
  }

  export type ListScalarWhereInput = {
    AND?: Enumerable<ListScalarWhereInput>
    OR?: Enumerable<ListScalarWhereInput>
    NOT?: Enumerable<ListScalarWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    userId?: StringFilter | string
    typeListId?: IntFilter | number
    animeId?: StringFilter | string
    score?: IntFilter | number
  }

  export type ProfilePictureUpsertWithoutUsersInput = {
    update: XOR<ProfilePictureUpdateWithoutUsersInput, ProfilePictureUncheckedUpdateWithoutUsersInput>
    create: XOR<ProfilePictureCreateWithoutUsersInput, ProfilePictureUncheckedCreateWithoutUsersInput>
  }

  export type ProfilePictureUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    publicId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    format?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
  }

  export type ProfilePictureUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    publicId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    format?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutRoleInput = {
    id?: string
    username: string
    passwordHash: string
    userAuthToken: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Lists?: ListCreateNestedManyWithoutUserInput
    profilePicture: ProfilePictureCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutRoleInput = {
    id?: string
    username: string
    passwordHash: string
    userAuthToken: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Lists?: ListUncheckedCreateNestedManyWithoutUserInput
    profilePictureId: string
  }

  export type UserCreateOrConnectWithoutRoleInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput>
  }

  export type UserUpsertWithWhereUniqueWithoutRoleInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutRoleInput, UserUncheckedUpdateWithoutRoleInput>
    create: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput>
  }

  export type UserUpdateWithWhereUniqueWithoutRoleInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutRoleInput, UserUncheckedUpdateWithoutRoleInput>
  }

  export type UserUpdateManyWithWhereWithoutRoleInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUsersInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    id?: StringFilter | string
    username?: StringFilter | string
    passwordHash?: StringFilter | string
    userAuthToken?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    roleId?: IntFilter | number
    profilePictureId?: StringFilter | string
  }

  export type UserCreateWithoutListsInput = {
    id?: string
    username: string
    passwordHash: string
    userAuthToken: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role: RolesCreateNestedOneWithoutUsersInput
    profilePicture: ProfilePictureCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutListsInput = {
    id?: string
    username: string
    passwordHash: string
    userAuthToken: string
    createdAt?: Date | string
    updatedAt?: Date | string
    roleId: number
    profilePictureId: string
  }

  export type UserCreateOrConnectWithoutListsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutListsInput, UserUncheckedCreateWithoutListsInput>
  }

  export type TypeListsCreateWithoutListsInput = {
    name: string
  }

  export type TypeListsUncheckedCreateWithoutListsInput = {
    id?: number
    name: string
  }

  export type TypeListsCreateOrConnectWithoutListsInput = {
    where: TypeListsWhereUniqueInput
    create: XOR<TypeListsCreateWithoutListsInput, TypeListsUncheckedCreateWithoutListsInput>
  }

  export type AnimeCreateWithoutListsInput = {
    id: string
    name: string
    year: string
    nbrEpisode: number
    imageUrl: string
  }

  export type AnimeUncheckedCreateWithoutListsInput = {
    id: string
    name: string
    year: string
    nbrEpisode: number
    imageUrl: string
  }

  export type AnimeCreateOrConnectWithoutListsInput = {
    where: AnimeWhereUniqueInput
    create: XOR<AnimeCreateWithoutListsInput, AnimeUncheckedCreateWithoutListsInput>
  }

  export type UserUpsertWithoutListsInput = {
    update: XOR<UserUpdateWithoutListsInput, UserUncheckedUpdateWithoutListsInput>
    create: XOR<UserCreateWithoutListsInput, UserUncheckedCreateWithoutListsInput>
  }

  export type UserUpdateWithoutListsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    userAuthToken?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: RolesUpdateOneRequiredWithoutUsersNestedInput
    profilePicture?: ProfilePictureUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutListsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    userAuthToken?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roleId?: IntFieldUpdateOperationsInput | number
    profilePictureId?: StringFieldUpdateOperationsInput | string
  }

  export type TypeListsUpsertWithoutListsInput = {
    update: XOR<TypeListsUpdateWithoutListsInput, TypeListsUncheckedUpdateWithoutListsInput>
    create: XOR<TypeListsCreateWithoutListsInput, TypeListsUncheckedCreateWithoutListsInput>
  }

  export type TypeListsUpdateWithoutListsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TypeListsUncheckedUpdateWithoutListsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeUpsertWithoutListsInput = {
    update: XOR<AnimeUpdateWithoutListsInput, AnimeUncheckedUpdateWithoutListsInput>
    create: XOR<AnimeCreateWithoutListsInput, AnimeUncheckedCreateWithoutListsInput>
  }

  export type AnimeUpdateWithoutListsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    nbrEpisode?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeUncheckedUpdateWithoutListsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    nbrEpisode?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type ListCreateWithoutAnimeInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutListsInput
    typeList: TypeListsCreateNestedOneWithoutListsInput
    score: number
  }

  export type ListUncheckedCreateWithoutAnimeInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    typeListId: number
    score: number
  }

  export type ListCreateOrConnectWithoutAnimeInput = {
    where: ListWhereUniqueInput
    create: XOR<ListCreateWithoutAnimeInput, ListUncheckedCreateWithoutAnimeInput>
  }

  export type ListUpsertWithWhereUniqueWithoutAnimeInput = {
    where: ListWhereUniqueInput
    update: XOR<ListUpdateWithoutAnimeInput, ListUncheckedUpdateWithoutAnimeInput>
    create: XOR<ListCreateWithoutAnimeInput, ListUncheckedCreateWithoutAnimeInput>
  }

  export type ListUpdateWithWhereUniqueWithoutAnimeInput = {
    where: ListWhereUniqueInput
    data: XOR<ListUpdateWithoutAnimeInput, ListUncheckedUpdateWithoutAnimeInput>
  }

  export type ListUpdateManyWithWhereWithoutAnimeInput = {
    where: ListScalarWhereInput
    data: XOR<ListUpdateManyMutationInput, ListUncheckedUpdateManyWithoutListsInput>
  }

  export type ListCreateWithoutTypeListInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutListsInput
    anime: AnimeCreateNestedOneWithoutListsInput
    score: number
  }

  export type ListUncheckedCreateWithoutTypeListInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    animeId: string
    score: number
  }

  export type ListCreateOrConnectWithoutTypeListInput = {
    where: ListWhereUniqueInput
    create: XOR<ListCreateWithoutTypeListInput, ListUncheckedCreateWithoutTypeListInput>
  }

  export type ListUpsertWithWhereUniqueWithoutTypeListInput = {
    where: ListWhereUniqueInput
    update: XOR<ListUpdateWithoutTypeListInput, ListUncheckedUpdateWithoutTypeListInput>
    create: XOR<ListCreateWithoutTypeListInput, ListUncheckedCreateWithoutTypeListInput>
  }

  export type ListUpdateWithWhereUniqueWithoutTypeListInput = {
    where: ListWhereUniqueInput
    data: XOR<ListUpdateWithoutTypeListInput, ListUncheckedUpdateWithoutTypeListInput>
  }

  export type ListUpdateManyWithWhereWithoutTypeListInput = {
    where: ListScalarWhereInput
    data: XOR<ListUpdateManyMutationInput, ListUncheckedUpdateManyWithoutListsInput>
  }

  export type UserCreateWithoutProfilePictureInput = {
    id?: string
    username: string
    passwordHash: string
    userAuthToken: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role: RolesCreateNestedOneWithoutUsersInput
    Lists?: ListCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfilePictureInput = {
    id?: string
    username: string
    passwordHash: string
    userAuthToken: string
    createdAt?: Date | string
    updatedAt?: Date | string
    roleId: number
    Lists?: ListUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfilePictureInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfilePictureInput, UserUncheckedCreateWithoutProfilePictureInput>
  }

  export type UserUpsertWithWhereUniqueWithoutProfilePictureInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutProfilePictureInput, UserUncheckedUpdateWithoutProfilePictureInput>
    create: XOR<UserCreateWithoutProfilePictureInput, UserUncheckedCreateWithoutProfilePictureInput>
  }

  export type UserUpdateWithWhereUniqueWithoutProfilePictureInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutProfilePictureInput, UserUncheckedUpdateWithoutProfilePictureInput>
  }

  export type UserUpdateManyWithWhereWithoutProfilePictureInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUsersInput>
  }

  export type ListUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    typeList?: TypeListsUpdateOneRequiredWithoutListsNestedInput
    anime?: AnimeUpdateOneRequiredWithoutListsNestedInput
    score?: IntFieldUpdateOperationsInput | number
  }

  export type ListUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    typeListId?: IntFieldUpdateOperationsInput | number
    animeId?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
  }

  export type ListUncheckedUpdateManyWithoutListsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    typeListId?: IntFieldUpdateOperationsInput | number
    animeId?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
  }

  export type UserUpdateWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    userAuthToken?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Lists?: ListUpdateManyWithoutUserNestedInput
    profilePicture?: ProfilePictureUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    userAuthToken?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Lists?: ListUncheckedUpdateManyWithoutUserNestedInput
    profilePictureId?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    userAuthToken?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profilePictureId?: StringFieldUpdateOperationsInput | string
  }

  export type ListUpdateWithoutAnimeInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutListsNestedInput
    typeList?: TypeListsUpdateOneRequiredWithoutListsNestedInput
    score?: IntFieldUpdateOperationsInput | number
  }

  export type ListUncheckedUpdateWithoutAnimeInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    typeListId?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
  }

  export type ListUpdateWithoutTypeListInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutListsNestedInput
    anime?: AnimeUpdateOneRequiredWithoutListsNestedInput
    score?: IntFieldUpdateOperationsInput | number
  }

  export type ListUncheckedUpdateWithoutTypeListInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    animeId?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
  }

  export type UserUpdateWithoutProfilePictureInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    userAuthToken?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: RolesUpdateOneRequiredWithoutUsersNestedInput
    Lists?: ListUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProfilePictureInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    userAuthToken?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roleId?: IntFieldUpdateOperationsInput | number
    Lists?: ListUncheckedUpdateManyWithoutUserNestedInput
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}