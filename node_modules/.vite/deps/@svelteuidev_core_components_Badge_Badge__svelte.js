import {
  Box_default,
  createEventForwarder,
  createStyles,
  useActions
} from "./chunk-H3WODAA3.js";
import "./chunk-QKQJIKFJ.js";
import "./chunk-RNAHHGWI.js";
import "./chunk-M6MB33T7.js";
import "./chunk-6A2TAOKG.js";
import {
  SvelteComponentDev,
  add_flush_callback,
  add_location,
  assign,
  attr_dev,
  bind,
  binding_callbacks,
  check_outros,
  children,
  claim_component,
  claim_element,
  claim_space,
  compute_rest_props,
  compute_slots,
  create_component,
  create_slot,
  destroy_component,
  detach_dev,
  dispatch_dev,
  element,
  empty,
  exclude_internal_props,
  get_all_dirty_from_scope,
  get_current_component,
  get_slot_changes,
  get_spread_object,
  get_spread_update,
  group_outros,
  init,
  insert_hydration_dev,
  mount_component,
  safe_not_equal,
  space,
  transition_in,
  transition_out,
  update_slot_base,
  validate_slots
} from "./chunk-BJ76AV5Z.js";
import "./chunk-22TNCCH5.js";
import "./chunk-JC4IRQUL.js";

// node_modules/@svelteuidev/core/components/Badge/Badge.styles.js
var sizes = {
  xs: {
    fontSize: 9,
    height: 16
  },
  sm: {
    fontSize: 10,
    height: 18
  },
  md: {
    fontSize: 11,
    height: 20
  },
  lg: {
    fontSize: 13,
    height: 26
  },
  xl: {
    fontSize: 16,
    height: 32
  }
};
var dotSizes = {
  xs: 4,
  sm: 4,
  md: 6,
  lg: 8,
  xl: 10
};
var Badge_styles_default = createStyles((theme, { fullWidth, radius, size, color, gradientDeg, gradientFrom, gradientTo }) => {
  const dotSize = theme.fn.size({ size, sizes: dotSizes });
  const lightColors = theme.fn.variant({ color, variant: "light" });
  const filledColors = theme.fn.variant({ color, variant: "filled" });
  const outlineColors = theme.fn.variant({ color, variant: "outline" });
  const gradientColors = theme.fn.variant({
    variant: "gradient",
    gradient: { from: gradientFrom, to: gradientTo, deg: gradientDeg }
  });
  const { fontSize, height } = size in sizes ? sizes[size] : sizes.md;
  return {
    root: {
      focusRing: "auto",
      fontSize,
      height,
      WebkitTapHighlightColor: "transparent",
      lineHeight: `${height - 2}px`,
      textDecoration: "none",
      padding: `0 ${theme.fn.size({ size, sizes: theme.space }) / 1.5}px`,
      boxSizing: "border-box",
      display: fullWidth ? "flex" : "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      width: fullWidth ? "100%" : "auto",
      textTransform: "uppercase",
      borderRadius: theme.fn.radius(radius),
      fontWeight: 700,
      letterSpacing: 0.25,
      cursor: "default",
      textOverflow: "ellipsis",
      overflow: "hidden",
      "&.light": {
        [`${theme.dark} &`]: {
          backgroundColor: lightColors.background[0],
          color: lightColors.color[0]
        },
        backgroundColor: lightColors.background[1],
        color: lightColors.color[1],
        border: "1px solid transparent"
      },
      "&.filled": {
        [`${theme.dark} &`]: {
          backgroundColor: filledColors.background[0]
        },
        backgroundColor: filledColors.background[1],
        color: filledColors.color,
        border: "1px solid transparent"
      },
      "&.outline": {
        [`${theme.dark} &`]: {
          color: outlineColors.color[0],
          border: `1px solid ${outlineColors.border[0]}`
        },
        backgroundColor: outlineColors.background,
        color: outlineColors.color[1],
        border: `1px solid ${outlineColors.border[1]}`
      },
      "&.gradient": {
        backgroundImage: gradientColors.background,
        color: gradientColors.color,
        border: 0
      },
      "&.dot": {
        darkMode: {
          color: theme.fn.themeColor("dark", 0),
          border: `1px solid ${theme.fn.themeColor("dark", 3)}`,
          "&::before": {
            backgroundColor: theme.fn.themeColor(color, 4)
          }
        },
        backgroundColor: "transparent",
        color: theme.fn.themeColor("gray", 7),
        border: `1px solid ${theme.fn.themeColor("gray", 3)}`,
        paddingLeft: theme.fn.size({ size, sizes: theme.space }) / 1.5 - dotSize / 2,
        "&::before": {
          content: '""',
          display: "block",
          width: dotSize,
          height: dotSize,
          borderRadius: dotSize,
          backgroundColor: theme.fn.themeColor(color, 6),
          marginRight: dotSize
        }
      }
    },
    leftSection: {
      marginRight: parseInt(theme.space.xs.value) / 2
    },
    rightSection: {
      marginLeft: parseInt(theme.space.xs.value) / 2
    },
    inner: {
      whiteSpace: "nowrap",
      overflow: "hidden",
      textOverflow: "ellipsis"
    }
  };
});

// node_modules/@svelteuidev/core/components/Badge/Badge.svelte
var file = "I:/200_2e Annee/202_Informaticien 2e/PR-WEB 21/P_Practice/svelte/app-anime/node_modules/@svelteuidev/core/components/Badge/Badge.svelte";
var get_rightSection_slot_changes = (dirty) => ({});
var get_rightSection_slot_context = (ctx) => ({});
var get_leftSection_slot_changes = (dirty) => ({});
var get_leftSection_slot_context = (ctx) => ({});
function create_if_block_1(ctx) {
  let span;
  let span_class_value;
  let current;
  const leftSection_slot_template = ctx[15].leftSection;
  const leftSection_slot = create_slot(leftSection_slot_template, ctx, ctx[17], get_leftSection_slot_context);
  const block = {
    c: function create() {
      span = element("span");
      if (leftSection_slot)
        leftSection_slot.c();
      this.h();
    },
    l: function claim(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      if (leftSection_slot)
        leftSection_slot.l(span_nodes);
      span_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(span, "class", span_class_value = ctx[4].leftSection);
      add_location(span, file, 42, 2, 1321);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, span, anchor);
      if (leftSection_slot) {
        leftSection_slot.m(span, null);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (leftSection_slot) {
        if (leftSection_slot.p && (!current || dirty & 131072)) {
          update_slot_base(
            leftSection_slot,
            leftSection_slot_template,
            ctx2,
            ctx2[17],
            !current ? get_all_dirty_from_scope(ctx2[17]) : get_slot_changes(leftSection_slot_template, ctx2[17], dirty, get_leftSection_slot_changes),
            get_leftSection_slot_context
          );
        }
      }
      if (!current || dirty & 16 && span_class_value !== (span_class_value = ctx2[4].leftSection)) {
        attr_dev(span, "class", span_class_value);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(leftSection_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(leftSection_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(span);
      if (leftSection_slot)
        leftSection_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_1.name,
    type: "if",
    source: "(42:1) {#if $$slots.leftSection}",
    ctx
  });
  return block;
}
function create_if_block(ctx) {
  let span;
  let span_class_value;
  let current;
  const rightSection_slot_template = ctx[15].rightSection;
  const rightSection_slot = create_slot(rightSection_slot_template, ctx, ctx[17], get_rightSection_slot_context);
  const block = {
    c: function create() {
      span = element("span");
      if (rightSection_slot)
        rightSection_slot.c();
      this.h();
    },
    l: function claim(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      if (rightSection_slot)
        rightSection_slot.l(span_nodes);
      span_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(span, "class", span_class_value = ctx[4].rightSection);
      add_location(span, file, 48, 2, 1479);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, span, anchor);
      if (rightSection_slot) {
        rightSection_slot.m(span, null);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (rightSection_slot) {
        if (rightSection_slot.p && (!current || dirty & 131072)) {
          update_slot_base(
            rightSection_slot,
            rightSection_slot_template,
            ctx2,
            ctx2[17],
            !current ? get_all_dirty_from_scope(ctx2[17]) : get_slot_changes(rightSection_slot_template, ctx2[17], dirty, get_rightSection_slot_changes),
            get_rightSection_slot_context
          );
        }
      }
      if (!current || dirty & 16 && span_class_value !== (span_class_value = ctx2[4].rightSection)) {
        attr_dev(span, "class", span_class_value);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(rightSection_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(rightSection_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(span);
      if (rightSection_slot)
        rightSection_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block.name,
    type: "if",
    source: "(48:1) {#if $$slots.rightSection}",
    ctx
  });
  return block;
}
function create_default_slot(ctx) {
  let t0;
  let span;
  let span_class_value;
  let t1;
  let if_block1_anchor;
  let current;
  let if_block0 = ctx[8].leftSection && create_if_block_1(ctx);
  const default_slot_template = ctx[15].default;
  const default_slot = create_slot(default_slot_template, ctx, ctx[17], null);
  let if_block1 = ctx[8].rightSection && create_if_block(ctx);
  const block = {
    c: function create() {
      if (if_block0)
        if_block0.c();
      t0 = space();
      span = element("span");
      if (default_slot)
        default_slot.c();
      t1 = space();
      if (if_block1)
        if_block1.c();
      if_block1_anchor = empty();
      this.h();
    },
    l: function claim(nodes) {
      if (if_block0)
        if_block0.l(nodes);
      t0 = claim_space(nodes);
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      if (default_slot)
        default_slot.l(span_nodes);
      span_nodes.forEach(detach_dev);
      t1 = claim_space(nodes);
      if (if_block1)
        if_block1.l(nodes);
      if_block1_anchor = empty();
      this.h();
    },
    h: function hydrate() {
      attr_dev(span, "class", span_class_value = ctx[4].inner);
      add_location(span, file, 46, 1, 1405);
    },
    m: function mount(target, anchor) {
      if (if_block0)
        if_block0.m(target, anchor);
      insert_hydration_dev(target, t0, anchor);
      insert_hydration_dev(target, span, anchor);
      if (default_slot) {
        default_slot.m(span, null);
      }
      insert_hydration_dev(target, t1, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert_hydration_dev(target, if_block1_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (ctx2[8].leftSection) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & 256) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_1(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(t0.parentNode, t0);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & 131072)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            ctx2[17],
            !current ? get_all_dirty_from_scope(ctx2[17]) : get_slot_changes(default_slot_template, ctx2[17], dirty, null),
            null
          );
        }
      }
      if (!current || dirty & 16 && span_class_value !== (span_class_value = ctx2[4].inner)) {
        attr_dev(span, "class", span_class_value);
      }
      if (ctx2[8].rightSection) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & 256) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(default_slot, local);
      transition_in(if_block1);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block0);
      transition_out(default_slot, local);
      transition_out(if_block1);
      current = false;
    },
    d: function destroy(detaching) {
      if (if_block0)
        if_block0.d(detaching);
      if (detaching)
        detach_dev(t0);
      if (detaching)
        detach_dev(span);
      if (default_slot)
        default_slot.d(detaching);
      if (detaching)
        detach_dev(t1);
      if (if_block1)
        if_block1.d(detaching);
      if (detaching)
        detach_dev(if_block1_anchor);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot.name,
    type: "slot",
    source: "(36:0) <Box  use={[forwardEvents, [useActions, use]]}  bind:element  class={cx(className, variant, classes.root)}  {...$$restProps} >",
    ctx
  });
  return block;
}
function create_fragment(ctx) {
  let box;
  let updating_element;
  let current;
  const box_spread_levels = [
    {
      use: [ctx[6], [useActions, ctx[1]]]
    },
    {
      class: ctx[5](ctx[2], ctx[3], ctx[4].root)
    },
    ctx[7]
  ];
  function box_element_binding(value) {
    ctx[16](value);
  }
  let box_props = {
    $$slots: { default: [create_default_slot] },
    $$scope: { ctx }
  };
  for (let i = 0; i < box_spread_levels.length; i += 1) {
    box_props = assign(box_props, box_spread_levels[i]);
  }
  if (ctx[0] !== void 0) {
    box_props.element = ctx[0];
  }
  box = new Box_default({ props: box_props, $$inline: true });
  binding_callbacks.push(() => bind(box, "element", box_element_binding));
  const block = {
    c: function create() {
      create_component(box.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(box.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(box, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const box_changes = dirty & 254 ? get_spread_update(box_spread_levels, [
        dirty & 66 && {
          use: [ctx2[6], [useActions, ctx2[1]]]
        },
        dirty & 60 && {
          class: ctx2[5](ctx2[2], ctx2[3], ctx2[4].root)
        },
        dirty & 128 && get_spread_object(ctx2[7])
      ]) : {};
      if (dirty & 131344) {
        box_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_element && dirty & 1) {
        updating_element = true;
        box_changes.element = ctx2[0];
        add_flush_callback(() => updating_element = false);
      }
      box.$set(box_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(box.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(box.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(box, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  let cx;
  let classes;
  const omit_props_names = [
    "use",
    "element",
    "class",
    "override",
    "color",
    "variant",
    "gradient",
    "size",
    "radius",
    "fullWidth"
  ];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Badge", slots, ["leftSection", "default", "rightSection"]);
  const $$slots = compute_slots(slots);
  let { use = [], element: element2 = void 0, class: className = "", override = {}, color = "blue", variant = "light", gradient = { from: "blue", to: "cyan", deg: 45 }, size = "md", radius = "xl", fullWidth = false } = $$props;
  const forwardEvents = createEventForwarder(get_current_component());
  function box_element_binding(value) {
    element2 = value;
    $$invalidate(0, element2);
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(7, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("use" in $$new_props)
      $$invalidate(1, use = $$new_props.use);
    if ("element" in $$new_props)
      $$invalidate(0, element2 = $$new_props.element);
    if ("class" in $$new_props)
      $$invalidate(2, className = $$new_props.class);
    if ("override" in $$new_props)
      $$invalidate(9, override = $$new_props.override);
    if ("color" in $$new_props)
      $$invalidate(10, color = $$new_props.color);
    if ("variant" in $$new_props)
      $$invalidate(3, variant = $$new_props.variant);
    if ("gradient" in $$new_props)
      $$invalidate(11, gradient = $$new_props.gradient);
    if ("size" in $$new_props)
      $$invalidate(12, size = $$new_props.size);
    if ("radius" in $$new_props)
      $$invalidate(13, radius = $$new_props.radius);
    if ("fullWidth" in $$new_props)
      $$invalidate(14, fullWidth = $$new_props.fullWidth);
    if ("$$scope" in $$new_props)
      $$invalidate(17, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    useStyles: Badge_styles_default,
    createEventForwarder,
    useActions,
    get_current_component,
    Box: Box_default,
    use,
    element: element2,
    className,
    override,
    color,
    variant,
    gradient,
    size,
    radius,
    fullWidth,
    forwardEvents,
    classes,
    cx
  });
  $$self.$inject_state = ($$new_props) => {
    if ("use" in $$props)
      $$invalidate(1, use = $$new_props.use);
    if ("element" in $$props)
      $$invalidate(0, element2 = $$new_props.element);
    if ("className" in $$props)
      $$invalidate(2, className = $$new_props.className);
    if ("override" in $$props)
      $$invalidate(9, override = $$new_props.override);
    if ("color" in $$props)
      $$invalidate(10, color = $$new_props.color);
    if ("variant" in $$props)
      $$invalidate(3, variant = $$new_props.variant);
    if ("gradient" in $$props)
      $$invalidate(11, gradient = $$new_props.gradient);
    if ("size" in $$props)
      $$invalidate(12, size = $$new_props.size);
    if ("radius" in $$props)
      $$invalidate(13, radius = $$new_props.radius);
    if ("fullWidth" in $$props)
      $$invalidate(14, fullWidth = $$new_props.fullWidth);
    if ("classes" in $$props)
      $$invalidate(4, classes = $$new_props.classes);
    if ("cx" in $$props)
      $$invalidate(5, cx = $$new_props.cx);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 32256) {
      $:
        $$invalidate(
          5,
          { cx, classes } = Badge_styles_default(
            {
              color,
              fullWidth,
              size,
              radius,
              gradientDeg: gradient.deg,
              gradientFrom: gradient.from,
              gradientTo: gradient.to
            },
            { override }
          ),
          cx,
          ($$invalidate(4, classes), $$invalidate(10, color), $$invalidate(14, fullWidth), $$invalidate(12, size), $$invalidate(13, radius), $$invalidate(11, gradient), $$invalidate(9, override))
        );
    }
  };
  return [
    element2,
    use,
    className,
    variant,
    classes,
    cx,
    forwardEvents,
    $$restProps,
    $$slots,
    override,
    color,
    gradient,
    size,
    radius,
    fullWidth,
    slots,
    box_element_binding,
    $$scope
  ];
}
var Badge = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, {
      use: 1,
      element: 0,
      class: 2,
      override: 9,
      color: 10,
      variant: 3,
      gradient: 11,
      size: 12,
      radius: 13,
      fullWidth: 14
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Badge",
      options,
      id: create_fragment.name
    });
  }
  get use() {
    throw new Error("<Badge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set use(value) {
    throw new Error("<Badge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get element() {
    throw new Error("<Badge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value) {
    throw new Error("<Badge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get class() {
    throw new Error("<Badge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value) {
    throw new Error("<Badge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get override() {
    throw new Error("<Badge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set override(value) {
    throw new Error("<Badge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get color() {
    throw new Error("<Badge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set color(value) {
    throw new Error("<Badge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get variant() {
    throw new Error("<Badge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set variant(value) {
    throw new Error("<Badge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get gradient() {
    throw new Error("<Badge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set gradient(value) {
    throw new Error("<Badge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get size() {
    throw new Error("<Badge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set size(value) {
    throw new Error("<Badge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get radius() {
    throw new Error("<Badge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set radius(value) {
    throw new Error("<Badge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get fullWidth() {
    throw new Error("<Badge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set fullWidth(value) {
    throw new Error("<Badge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Badge_default = Badge;
export {
  Badge_default as default
};
//# sourceMappingURL=@svelteuidev_core_components_Badge_Badge__svelte.js.map
